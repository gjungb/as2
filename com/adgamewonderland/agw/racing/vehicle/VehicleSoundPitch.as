/*  * Generated by ASDT */ /*klasse:			VehicleSoundPitchautor: 			gerd jungbluth, adgame-wonderlandemail:			gerd.jungbluth@adgame-wonderland.dekunde:			agwerstellung: 		02.06.2005zuletzt bearbeitet:	07.06.2005durch			gjstatus:			in bearbeitung*///import com.adgamewonderland.agw.racing.race.*;import com.adgamewonderland.agw.racing.vehicle.*;class com.adgamewonderland.agw.racing.vehicle.VehicleSoundPitch extends Sound {		public static var SEGMENTS:Number = 50;		private static var SOUND_UP:Number = 0;		private static var SOUND_DOWN:Number = 1;		private var myVehicle:Vehicle;		private var mySoundIds:Array;		private var mySoundAct:Number;		private var myOffset:Number;		private var myOffsetMin:Number;		private var myOffsetMax:Number;		public function VehicleSoundPitch(vobj:Vehicle, sound0:String, sound1:String )	{		// vererbte eigenschaften		super(vobj.movieclip);		// fahrzeug, zu dem der sound gehoert		myVehicle = vobj;		// bibliotheksverknuepfungen der beiden sounds		mySoundIds = new Array();		// erster (aufsteigender) sound		mySoundIds[VehicleSoundPitch.SOUND_UP] = sound0;		// zweiter (absteigender) sound		mySoundIds[VehicleSoundPitch.SOUND_DOWN] = sound1;		// initiliasieren		init();	}		public function setOffset(onum:Number ):Void	{		// testen, ob zu wenig		if (onum < myOffsetMin) {			myOffset = 	myOffsetMin;		// testen, ob zuviel		} else if (onum > myOffsetMax) {			myOffset = myOffsetMax;		// neuer offset		} else {			myOffset = onum;		}	}		private function init():Void	{		// aktuell abgespielter sound		mySoundAct = VehicleSoundPitch.SOUND_UP;		// ersten sound attachen		this.attachSound(mySoundIds[mySoundAct]);		// ausblenden		this.setVolume(0);		// minimaler offset		myOffsetMin = 2 / VehicleSoundPitch.SEGMENTS;		// maximaler offset		myOffsetMax = 1 - myOffsetMin;		// offset (zwischen 0 und 1), bei dem der sound gestartet wird		setOffset(0.25);		// abspielen		this.start(duration * myOffset / 1000, 0);		// regelmaessig updaten		setInterval(this, "controlSound", duration / VehicleSoundPitch.SEGMENTS);	}		private function controlSound():Void	{		// zielposition		var endpos:Number = duration * myOffset;		// neue startposition		var startpos:Number;		// je nach aktuellem sound		switch (mySoundAct) {			// aufsteigend			case VehicleSoundPitch.SOUND_UP :				// testen, ob fertig				if (position >= endpos) {					// neue startposition					startpos = (duration - position + Math.random()) / 1000; // 					// sound stoppen					this.stop();					// gegenlaeufiger sound					mySoundAct = VehicleSoundPitch.SOUND_DOWN;					// attachen					this.attachSound(mySoundIds[mySoundAct]);					// starten					this.start(startpos, 1);				}				break;				// absteigend			case VehicleSoundPitch.SOUND_DOWN :				// testen, ob fertig				if (duration - position <= endpos) {					// neue startposition					startpos = (duration - position + Math.random()) / 1000; // 					// sound stoppen					this.stop();					// gegenlaeufiger sound					mySoundAct = VehicleSoundPitch.SOUND_UP;					// attachen					this.attachSound(mySoundIds[mySoundAct]);					// starten					this.start(startpos, 1);				}							break;		}	}}