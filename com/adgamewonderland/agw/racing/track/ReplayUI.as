/* 
 * Generated by ASDT 
*/ 

/*
klasse:			ReplayUI
autor: 			gerd jungbluth, adgame-wonderland
email:			gerd.jungbluth@adgame-wonderland.de
kunde:			agw
erstellung: 		01.07.2005
zuletzt bearbeitet:	01.07.2005
durch			gj
status:			in bearbeitung
*/

import com.adgamewonderland.agw.math.*;

import com.adgamewonderland.agw.racing.track.*;

import com.adgamewonderland.blaupunkt.dtmracing.challenge.*;

import com.adgamewonderland.blaupunkt.dtmracing.ui.*;

class com.adgamewonderland.agw.racing.track.ReplayUI extends MiniTrackUI {
	
	private static var TIME_STEP:Number = 250;
	
	private var myStep:Number;
	
	private var myInterval:Number;
	
	private var back_btn:Button;
	
	public function ReplayUI()
	{
		// vererbung
		super();
		// aktueller schritt
		myStep = 0;
		// interval
		myInterval = 0;
	}
	
	public function startReplay(tid:Number, replays:Array ):Void
	{
		// rennstrecke anzeigen
		showTrack(tid);
		// button zurueck
		back_btn.onRelease = function () {
			this._parent.closeReplay();
		}
		// status der herausforderung
		var status:Number = ChallengeController.getInstance().getStatus();
		// challenger minivehicle
		var v0:MovieClip = addMiniVehicle(0);
		// auf rot, wenn opponent replay sieht
		v0.gotoAndStop(status == Challenge.STATUS_OPPONENT_AWARDED ? 3 : 2);
		// opponent minivehicle
		var v1:MovieClip = addMiniVehicle(1);
		// auf gruen, wenn opponent replay sieht
		v1.gotoAndStop(status == Challenge.STATUS_OPPONENT_AWARDED ? 2 : 3);
		// zeitdifferenz zwischen zwei steps
		var tdiff:Number = TIME_STEP; // ChallengeReplay.TDIFF * 
		// aktueller schritt
		myStep = 0;
		// regelmaessig updaten
		myInterval = setInterval(this, "updatePositions", tdiff, replays);
	}
	
	public function updatePositions(replays:Array ):Void
	{
		// replay challenger
		var replay0:ChallengeReplay = replays[0];
		// replay opponent
		var replay1:ChallengeReplay = replays[1];
		
		// position challenger
		var position0:Point = replay0.getPosition(myStep);
		// position opponent
		var position1:Point = replay1.getPosition(myStep);
		
		// challenger anzeigen
		if (position0 != null) showVehicle(0, position0);
		// opponent anzeigen
		if (position1 != null) showVehicle(1, position1);
		
		// naechster schritt
		myStep ++;
		
		// fertig, wenn beide angekommen
		if (position0 == null && position1 == null) stopReplay();
	}
	
	public function closeReplay():Void
	{
		// stoppen
		stopReplay();
		// keine strecke
		showTrack(0);
		// minivehicles loeschen
		myMiniVehicles[0].removeMovieClip();
		myMiniVehicles[1].removeMovieClip();
		// award benachrichtigen
		AwardUI(_parent).onStopReplay();
	}
	
	private function stopReplay():Void
	{
		// interval loeschen
		clearInterval(myInterval);
	}
	
	private function addMiniVehicle(id:Number ):MovieClip
	{
		// attachen
		var minivehicle:MovieClip = vehicles_mc.attachMovie("minivehicle", "minivehicle" + id + "_mc", vehicles_mc.getNextHighestDepth() , {_myFrame : id + 2}); // , {_myFrame : id + 2}
		// speichern
		myMiniVehicles[id] = minivehicle;
		// skalieren
		minivehicle._xscale = minivehicle._yscale = 50;
		// transparent
//		minivehicle._alpha = 50;
		// zurueck geben
		return minivehicle;
	}
	
	private function showVehicle(id:Number, position:Point ):Void
	{
		// mini fahrzeug
		var minivehicle:MovieClip = myMiniVehicles[id];
		// positionieren
		minivehicle._x = position.x / 100 * SCALE + XSHIFT[myTid - 1];
		minivehicle._y = position.y / 100 * SCALE + YSHIFT[myTid - 1];
	}
}