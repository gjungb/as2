/* 
 * Generated by ASDT 
*/ 

/*
klasse:			Polygon
autor: 			gerd jungbluth, adgame-wonderland
email:			gerd.jungbluth@adgame-wonderland.de
kunde:			agw
erstellung: 		18.05.2005
zuletzt bearbeitet:	09.06.2005
durch			gj
status:			in bearbeitung
*/

import com.adgamewonderland.agw.math.*;

class com.adgamewonderland.agw.math.Polygon {
	
	private var myNumPoints:Number;
	
	private var myPoints:Array;
	
	private var myBorders:Array;
	
	private var myCenter:Point;
	
	public function Polygon(pnum:Number )
	{
		// anzahl der punkte
		myNumPoints = pnum;
		// die punkte, die das polygon umreissen
		myPoints = new Array();
		// die raender, die das polygon umreissen
		myBorders = new Array();
		// schwerpunkt (als schnittpunkt der diagonalen)
		myCenter = new Point(0, 0);
	}
	
	public function get borders():Array
	{
		// die raender, die das polygon umreissen
		return myBorders;
	}
	
	public function get center():Point
	{
		// schwerpunkt (als schnittpunkt der diagonalen)
		return myCenter;
	}
	
	public function addPoint(point:Point ):Void
	{
		// punkt hinzufuegen
		myPoints.push(point);
		// raender aktualisieren
		updateBorders();
		// bei viereck schwerpunkt bilden
		if (getNumPoints() == 4) updateCenter();
	}
	
	public function getPoint(num:Number ):Point
	{
		// entsprechender punkt
		return myPoints[num - 1];
	}
	
	public function getNumPoints():Number
	{
		// anzahl der punkte
		return myPoints.length;
//		return myNumPoints; // klappt nicht! 09.06.2005
	}
	
	public function moveTo(pos:Point ):Void
	{
		// schleife ueber alle punkte
		for (var i:Number = 1; i <= myPoints.length; i++) {
			// punkt
			var p1:Point = getPoint(i);
			// x-richtung
			p1.x += pos.x;
		}
		
	}
	
	private function updateBorders():Void
	{
		// schleife ueber alle punkte
		for (var i:Number = 1; i <= myPoints.length; i++) {
			// startpunkt
			var p1:Point = getPoint(i);
			// zielpunkt
			var p2:Point = (i < myPoints.length ? getPoint(i + 1) : getPoint(1));
			// neuer rand
			var border:Border = new Border(p1, p2);
			// speichern
			myBorders[i - 1] = border;
		}
	}
	
	private function updateCenter():Void
	{
		// verbindung von der ersten zur dritten ecke
		var b1:Border = new Border(getPoint(1), getPoint(3));
		// verbindung von der zweiten zur vierten ecke
		var b2:Border = new Border(getPoint(2), getPoint(4));
		// schnittpunkt ermitteln und speichern
		myCenter = LinearAlgebra.getInstance().getBorderBorderIntersection(b1, b2);
	}
}