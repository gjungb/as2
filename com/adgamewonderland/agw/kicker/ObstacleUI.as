/* 
 * Generated by ASDT 
*/ 

/*
klasse:			ObstacleUI
autor: 			gerd jungbluth, adgame-wonderland
email:			gerd.jungbluth@adgame-wonderland.de
kunde:			agw
erstellung: 		15.05.2005
zuletzt bearbeitet:	17.05.2005
durch			gj
status:			in bearbeitung
*/

import com.adgamewonderland.agw.math.*;

import com.adgamewonderland.agw.physics.*;

import com.adgamewonderland.agw.kicker.*;

class com.adgamewonderland.agw.kicker.ObstacleUI extends MovieClip implements Movable {

	private static var STATUS_MOVING:Number = 1;
	
	private static var STATUS_BLOCKED:Number = 2;
	
	private static var STATUS_HIT:Number = 3;
	
	public static var TYPE_GOAL:Number = 1;
	
	public static var TYPE_DEFENDER:Number = 2;
	
	public static var TYPE_SPECIAL:Number = 3;
	
	private var myKickerUI:KickerUI;
	
	private var myBallUI:BallUI;
	
	private var myId:Number;
	
	private var myType:Number;
	
	private var myPosStart:Point;
	
	private var myPosAct:Point;
	
	private var myVelocity:Vector;
	
	private var myMover:Mover;
	
	private var myDepth:Number;
	
	private var myStatus:Number;
	
	private var myHitarea:Rectangle;
	
	private var myHitsMax:Number;
	
	private var myHitsAct:Number;
	
	public function ObstacleUI()
	{
		// spiel
		myKickerUI = _level0.kicker_mc; // KickerUI(_parent);
		// ball
		myBallUI = myKickerUI.getBall();
		// id des obstacles
		id = ObstacleFactory.getInstance().registerObstacle(this);
		// eindeutigen namen vergeben
		_name = "obstacle" + id + "_mc";
		// typ des obstacles
		type = 0;
		// startposition
		myPosStart = new Point(_x, _y);
		// aktuelle position
		myPosAct = new Point(_x, _y);
		// lineare geschwindigkeit
		myVelocity = new Vector(Number.MIN_VALUE, Number.MIN_VALUE);
		// mover
		myMover = new Mover(this);
		// tiefe auf der buehne
		myDepth = 1;
		// aktueller status
		myStatus = STATUS_MOVING;
		// hitarea
		myHitarea = new Rectangle(0, 0, _width, _height);
		// anzahl notwendiger treffer durch BallUI, bis es verschwindet
		myHitsMax = 0;
		// anzahl aktueller treffer durch BallUI
		myHitsAct = 0;
	}
	
	public function set id(inum:Number ):Void
	{
		// id des obstacles
		myId = inum;
	}
	
	public function get id():Number
	{
		// id des obstacles
		return myId;
	}
	
	public function set type(tnum:Number ):Void
	{
		// typ des obstacles
		myType = tnum;
	}
	
	public function get type():Number
	{
		// typ des obstacles
		return myType;
	}
	
	public function setPosition(xpos:Number, ypos:Number ):Void
	{
		// positionieren
		_x = myPosAct.x = xpos;
		_y = myPosAct.y = ypos;
	}
	
	public function onMove():Void {}
	
	public function onStopMove():Void {}
	
	public function resetObstacle():Void {}
	
	private function startObstacle():Void {}
	
	private function isBallColliding():Boolean
	{
		// boolscher wert, ob der ball das obstacle trifft
		var colliding:Boolean = false;
		// aktuelle fiktive position des balles
		var ballpos:Point = myBallUI.getPositionLinear();
		// als object fuer lokale koordinaten
		var pos:Object = {x : ballpos.x, y : ballpos.y};
		// in lokale koordinaten
		this.globalToLocal(pos);
		// testen, ob innerhalb der hitarea
		colliding = myHitarea.isPointInside(new Point(pos.x, pos.y));
		// zurueck geben
		return (colliding);
	}
	
	private function setStatus(status:Number ):Void
	{
		
		
	}
		
}