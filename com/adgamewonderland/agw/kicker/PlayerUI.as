/* 
 * Generated by ASDT 
*/ 

/*
klasse:			PlayerUI
autor: 			gerd jungbluth, adgame-wonderland
email:			gerd.jungbluth@adgame-wonderland.de
kunde:			agw
erstellung: 		31.03.2005
zuletzt bearbeitet:	15.05.2005
durch			gj
status:			in bearbeitung
*/

import com.adgamewonderland.agw.math.*;

import com.adgamewonderland.agw.kicker.*;

class com.adgamewonderland.agw.kicker.PlayerUI extends MovieClip {
	
	private static var STRENGTH_STEPS:Number = 50;
	
	private static var FOOTPOS:Point = new Point(12, 160);
	
	private var _myXMin:Number;
	
	private var _myXMax:Number;
	
	private var _myStrengthMin:Number;
	
	private var _myStrengthMax:Number;
	
	private var _myStrengthTime:Number;
	
	private var myKickerUI:KickerUI;
	
	private var myPosAct:Point;
	
	private var myStrengthAct:Number;
	
	private var myInterval:Number;
	
	private var isMovable:Boolean;
	
	private var isShooting:Boolean;
	
	private var animation_shoot_mc:MovieClip;
	
	private var animation_loose_mc:MovieClip;
	
	public function PlayerUI()
	{
		// spiel
		myKickerUI = KickerUI(_parent);
		// aktuelle position
		myPosAct = new Point(_x, _y);
		// aktuelle schussstaerke
		myStrengthAct = _myStrengthMin;
		// interval
		myInterval = 0;
		
		// schalter, ob er sich bewegen / schiessen darf
		movable = true;
		// schalter, ob er gerade schießt oder nicht
		shooting = false;
	}
	
	public function get position():Point
	{
		// aktuelle position
		return myPosAct;
	}
	
	public function set movable(bool:Boolean ):Void
	{
		// schalter, ob er sich bewegen / schiessen darf
		isMovable = bool;
	}
	
	public function get movable():Boolean
	{
		// schalter, ob er sich bewegen / schiessen darf
		return isMovable;
	}
	
	public function set shooting(bool:Boolean ):Void
	{
		// schalter, ob er gerade schießt oder nicht
		isShooting = bool;
	}
	
	public function get shooting():Boolean
	{
		// schalter, ob er gerade schießt oder nicht
		return isShooting;
	}
	
	public function onMouseDown()
	{
		// abbrechen, wenn er gerade schießt
		if (shooting) return;
		// ausholen
		if (animation_shoot_mc._currentframe == 1) animation_shoot_mc.play();
		// hochzaehlen
		myInterval = setInterval(this, "updateStrength", _myStrengthTime / STRENGTH_STEPS, true);
	}
	
	public function onMouseMove()
	{
		// an x-position der maus
		if (movable) setPosition(_root._xmouse, _y);
		// spiel informieren
		if (!shooting) myKickerUI.onPlayerMove();
	}
	
	public function onMouseUp()
	{
		// abbrechen, wenn er gerade schießt
		if (shooting) return;
		// schalter auf schiessen
		shooting = true;
		// animation abspielen
		animation_shoot_mc.gotoAndPlay("frShoot");
		// spiel informieren
		myKickerUI.onPlayerShoot(myStrengthAct);
		// hochzaehlen schussstaerke beenden
		clearInterval(myInterval);
		// schussstaerke runter zaehlen
		updateStrength(false);
	}
	
	public function getBallPosition():Point
	{
		// gewuenschte position des balls
		var ballpos:Object = {x : FOOTPOS.x, y : FOOTPOS.y};
		// global
		this.localToGlobal(ballpos);
		// als point zurueck geben
		return (new Point(ballpos.x, ballpos.y));
	}
	
	public function getPosition():Point
	{
		// gewuenschte position am unteren ende des spielers
		var pos:Object = {x : 0, y : _height};
		// global
		this.localToGlobal(pos);
		// als point zurueck geben
		return (new Point(pos.x, pos.y));
	}
	
	private function setPosition(xpos:Number, ypos:Number ):Void
	{
		// grenzen abfangen
		if (xpos < _myXMin) xpos = _myXMin;
		if (xpos > _myXMax) xpos = _myXMax;
		// positionieren
		_x = myPosAct.x = xpos;
		_y = myPosAct.y = ypos;
	}
	
	private function updateStrength(updown:Boolean ):Void
	{
		// display
		var display:DisplayUI = myKickerUI.getDisplay();
		// hoch- oder runterzaehlen
		switch (updown) {
			// hoch
			case true :
				// schrittweite
				var diff:Number = (_myStrengthMax / STRENGTH_STEPS);
				// hochzaehlen bis maximum
				if ((myStrengthAct += diff) > _myStrengthMax) myStrengthAct = _myStrengthMax;
				// prozentuale schussstaerke anzeigen lassen
				display.showStrength((myStrengthAct - _myStrengthMin) / (_myStrengthMax - _myStrengthMin) * 100);
			
				break;
			// runter
			case false :
				// aktuelle schussstaerke
				myStrengthAct = _myStrengthMin;
				// anzeigen lassen
				display.showStrength(0);
			
				break;
		}
	}
	
}