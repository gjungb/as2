/*klasse:			ScrollbarUIautor: 			gerd jungbluth, adgamewonderlandemail:			gerd.jungbluth@adgamewonderland.dekunde:			skandiaerstellung: 		26.01.2005zuletzt bearbeitet:	12.02.2005durch			gjstatus:			final*/class com.adgamewonderland.agw.util.ScrollbarUI extends MovieClip {	// Attributes	private var _mySteps:Number;	private var _myHeight:Number;	private var _myTarget:String;	private var mySteps:Number;	private var myHeight:Number;	private var myTarget:Object;	private var myPause:Number;	private var myThumb:Object;	private var myInterval:Number;	private var myBounds:Object;	private var thumb_mc:MovieClip;	private var arrowdown_mc:MovieClip;	private var arrowup_mc:MovieClip;	private var scrolltrack_mc:MovieClip;	// Operations	// konstruktor	public function ScrollbarUI( )	{		// schrittweite beim scrollen		mySteps = _mySteps;		// hoehe des scrollbar		myHeight = 0;		// grenzen, innerhalb derer der thumb bewegt wird		myThumb = {yMin : 0, yMax : 0, xMin : thumb_mc._x + 1, xMax : thumb_mc._x + 1};		// skalieren und buttons positionieren		setScrollerSize(_myHeight);		// movieclip, das gescrollt wird		myTarget = null;		// grenzen, innerhalb derer das movieclip gescrollt wird		myBounds = {yMin : 0, yMax : 0};		// speichern und grenzen des scrollens berechnen		setScrollTarget(_parent[_myTarget]);		// pause [ms] zwischen zwei scroll-bewegungen		myPause = 40;		// buttons aktivieren		setButtonsActive();	}	public function setScrollerSize (height:Number ):Void	{		// hoehe des scrollbar		myHeight = height;		// unteren button positionieren		arrowdown_mc._y = height - arrowdown_mc._height;		// minimaler y-wert des thumb		myThumb.yMin = arrowup_mc._y + arrowup_mc._height + thumb_mc._height / 2;		// maximaler y-wert des thumb		myThumb.yMax = arrowdown_mc._y - thumb_mc._height / 2;		// trackbar positionieren und skalieren		scrolltrack_mc._y = arrowup_mc._y + arrowup_mc._height / 2;		scrolltrack_mc._height = arrowdown_mc._y + arrowdown_mc._height / 2 - scrolltrack_mc._y;	}	public function setScrollTarget(target:Object ):Void	{		// movieclip, das gescrollt wird		myTarget = target;		// maximaler y-wert des gescrollten movieclips		myBounds.yMax = myTarget._y;		// minimaler y-wert des gescrollten movieclips		myBounds.yMin = myTarget._y - (myTarget._height - myHeight) - mySteps;		// wenn gescrolltes movieclip zu kurz, nicht scrollen		_visible = (myTarget._height > myHeight);		// thumb ganz nach oben		setThumbPosition(0);		// scroller an rechte obere ecke		_y = myTarget._y;	}	private function setButtonsActive():Void	{		// nach oben		arrowup_mc.onPress = function () {			// scrollen starten			this._parent.startScroll(1);		};		// stoppen		arrowup_mc.onRelease = arrowup_mc.onReleaseOutside = function () {			// scrollen stoppen			this._parent.stopScroll();		};		// nach unten		arrowdown_mc.onPress = function () {			// scrollen starten			this._parent.startScroll(-1);		};		// stoppen		arrowdown_mc.onRelease = arrowdown_mc.onReleaseOutside = function () {			// scrollen stoppen			this._parent.stopScroll();		};		// thumb bewegen		thumb_mc.onPress = function () {			// bewegen			this._parent.startThumb();		};		// stoppen		thumb_mc.onRelease = thumb_mc.onReleaseOutside = function () {			// bewegung stoppen			this._parent.stopThumb();		};		// auf hintergrund des scrollers klicken		scrolltrack_mc.onRelease = function () {			// thumb an diese position springen lassen			this._parent.scrollThumb(_parent._ymouse);		};		// nicht als hand		scrolltrack_mc.useHandCursor = false;	}	private function startScroll(dir:Number ):Void	{		// schleife fuer scrollen starten		myInterval = setInterval(this, "scrollTarget", myPause, dir);	}	private function stopScroll():Void	{		// scrollen beenden		clearInterval(myInterval);	}	private function startThumb():Void	{		// draggen erlauben		thumb_mc.startDrag(true, myThumb.xMin, myThumb.yMin, myThumb.xMax, myThumb.yMax);		// callback waehrend gedraggt wird		thumb_mc.onEnterFrame = function () {			// thumb bewegen			this._parent.scrollThumb(_y);		};	}	private function stopThumb():Void	{		// draggen beenden		thumb_mc.stopDrag();		// callback loeschen		delete(thumb_mc.onEnterFrame);	}	private function scrollTarget(dir:Number ):Void	{		// neue position		var newpos = myTarget._y + (dir * mySteps);		// wenn ausserhalb der grenzen, genau auf grenze		if (newpos < myBounds.yMin) newpos = myBounds.yMin;		if (newpos > myBounds.yMax) newpos = myBounds.yMax;		// prozent der neuen position		var percent = getTargetPercent(newpos);		// an neue position setzen		setTargetPosition(percent);		// an schieber uebergeben		setThumbPosition(percent);	}	private function setTargetPosition(percent:Number ):Void	{		// neue position		var newpos = myBounds.yMin + (percent - 100) * -1 / 100 * (myBounds.yMax - myBounds.yMin);		// positionieren		myTarget._y = newpos;	}	private function scrollThumb(pos) {		// prozent des thumb berechnen sich aus verhÃ€ltnis der aktuellen position zu yMin und yMax		var percent = Math.round((pos  - myThumb.yMin) / (myThumb.yMax - myThumb.yMin) * 100);		// grenzen abfangen		if (percent < -5 || percent > 105) return;		// auf grenzen setzen		if (percent < 0) percent = 0;		if (percent > 100) percent = 100;		// movieclip an neue position setzen		setTargetPosition(percent);		// an schieber uebergeben		setThumbPosition(percent);	}	public function setThumbPosition(percent:Number ):Void	{		// neue position		var newpos = myThumb.yMin + percent * (myThumb.yMax - myThumb.yMin) / 100;		// positionieren		thumb_mc._y = newpos;	}	private function getTargetPercent(pos:Number ):Number	{		// prozent berechnen sich aus verhÃ€ltnis der aktuellen position zu yMin und yMax (nicht runden, da lange targets dann nicht gescrollt werden!)		var percent = 100 - (pos  - myBounds.yMin) / (myBounds.yMax - myBounds.yMin) * 100; // Math.round()		// zurueck geben		return (percent);	}} /* end class ScrollbarUI */