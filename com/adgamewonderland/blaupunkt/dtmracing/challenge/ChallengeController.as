/* 
 * Generated by ASDT 
*/ 

/*
klasse:			ChallengeController
autor: 			gerd jungbluth, adgame-wonderland
email:			gerd.jungbluth@adgame-wonderland.de
kunde:			blaupunkt
erstellung: 		08.06.2005
zuletzt bearbeitet:	23.06.2005
durch			gj
status:			in bearbeitung
*/

import mx.rpc.FaultEvent;
import mx.rpc.ResultEvent;

import com.adgamewonderland.agw.net.*;

import com.adgamewonderland.blaupunkt.dtmracing.challenge.*;

import com.adgamewonderland.blaupunkt.dtmracing.remoting.*;

class com.adgamewonderland.blaupunkt.dtmracing.challenge.ChallengeController {
	
	public static var TID_TRAINING:Number = 11;
	
	private static var instance:ChallengeController;
	
	private var myDate:Date;
	
	private var myUser:User;
	
	private var myOpponent:User;
	
	private var myChallenge:Challenge;
	
	private var myTracks:Array;
	
	private var myCars:Array;
	
	public static function getInstance():ChallengeController
	{
		if (instance == null)
			instance = new ChallengeController();
		return instance;
	}
	
	public function onLoginUser(user:User ):Void
	{
		// user speichern
		setUser(user);
	}
	
	public function onLogoutUser():Void
	{
		// kein user
		setUser(null);
		// kein opponent
		setOpponent(null);
		// keine challenge
		setChallenge(null);
	}
	
	public function onLoginGuest():Void
	{
		// kein user
		setUser(null);
		// leere herausforderung
		setChallenge(new Challenge(new ChallengeDetail(ChallengeDetail.MODE_CHALLENGER), null));
		// status gast
		myChallenge.setStatus(Challenge.STATUS_GUEST);
	}
	
	public function onTraining():Void
	{
		// leere herausforderung
		setChallenge(new Challenge(new ChallengeDetail(ChallengeDetail.MODE_CHALLENGER), null));
		// status gast
		myChallenge.setStatus(Challenge.STATUS_TRAINING);
	}
	
	public function initChallenge():Void
	{
		// details fuer challenger
		var challenger:ChallengeDetail = new ChallengeDetail(ChallengeDetail.MODE_CHALLENGER);
		// user-id
		challenger.setUid(myUser.getUid());
		// nickname
		challenger.setNickname(myUser.getNickname());
		// email
		challenger.setEmail(myUser.getEmail());
		// details fuer opponent
		var opponent:ChallengeDetail = new ChallengeDetail(ChallengeDetail.MODE_OPPONENT);
		// neue herausforderung
		setChallenge(new Challenge(challenger, opponent));
		// kein gegner
		setOpponent(null);
	}
	
	public function sendChallenge():Void
	{
		// status
		myChallenge.setStatus(Challenge.STATUS_CHALLENGER_DONE);
		// details opponent
		var details:ChallengeDetail = myChallenge.getDetails(ChallengeDetail.MODE_OPPONENT);
		// opponent uid
		details.setUid(myOpponent.getUid());
    	// ist der opponent neu (sprich noch nicht registriert)
    	if (myOpponent.getUid() == null) details.setNewuser(1);
		// opponent email
		details.setEmail(myOpponent.getEmail());
		// herausforderung abschicken ohne callback
		ChallengeConnector.saveChallenge(myChallenge, this, null);
	}
	
	public function getUpdatedChallenge():Challenge
	{
		// status
		myChallenge.setStatus(Challenge.STATUS_OPPONENT_DONE);
		// zurueck geben
		return myChallenge;
	}
	
	public function getCastedChallenge(res:Object ):Challenge
	{
		// challenger details
		res.challengerDetail = ChallengeDetail(RemotingBeanCaster.getCastedInstance(new ChallengeDetail(), res.challengerDetail));
		// challenger lapresults
		var lapresults1:Array = res.challengerDetail.getLapresults();
		// einzeln casten
		for (var i:String in lapresults1) lapresults1[i] = ChallengeLapresult(RemotingBeanCaster.getCastedInstance(new ChallengeLapresult(), lapresults1[i]));
		// opponent details
		res.opponentDetail = ChallengeDetail(RemotingBeanCaster.getCastedInstance(new ChallengeDetail(), res.opponentDetail));
		// opponent lapresults
		var lapresults2:Array = res.opponentDetail.getLapresults();
		// einzeln casten
		for (var j:String in lapresults2) lapresults2[j] = ChallengeLapresult(RemotingBeanCaster.getCastedInstance(new ChallengeLapresult(), lapresults2[j]));
		// casten
		var challenge:Challenge = Challenge(RemotingBeanCaster.getCastedInstance(new Challenge(), res));
		// zurueck geben
		return challenge;
	}
	
	public function getCastedAward(res:Object ):Award
	{
		// challenger details
		res.challengerDetail = ChallengeDetail(RemotingBeanCaster.getCastedInstance(new ChallengeDetail(), res.challengerDetail));
		// challenger lapresults
		var lapresults1:Array = res.challengerDetail.getLapresults();
		// einzeln casten
		for (var i:String in lapresults1) lapresults1[i] = ChallengeLapresult(RemotingBeanCaster.getCastedInstance(new ChallengeLapresult(), lapresults1[i]));
		// opponent details
		res.opponentDetail = ChallengeDetail(RemotingBeanCaster.getCastedInstance(new ChallengeDetail(), res.opponentDetail));
		// opponent lapresults
		var lapresults2:Array = res.opponentDetail.getLapresults();
		// einzeln casten
		for (var j:String in lapresults2) lapresults2[j] = ChallengeLapresult(RemotingBeanCaster.getCastedInstance(new ChallengeLapresult(), lapresults2[j]));
		// casten
		var award:Award = Award(RemotingBeanCaster.getCastedInstance(new Award(), res));
		// zurueck geben
		return award;
	}
	
	public function setChallenge(challenge:Challenge ):Void
	{
		// challenge
		myChallenge = challenge;
	}
	
	public function getChallenge():Challenge
	{
		// challenge
		return myChallenge;
	}
	
	public function setUser(user:User ):Void
	{
		// user
		myUser = user;
	}
	
	public function getUser():User
	{
		// user
		return myUser;
	}
	
	public function setOpponent(opponent:User ):Void
	{
		// opponent
		myOpponent = opponent;
	}
	
	public function getOpponent():User
	{
		// opponent
		return myOpponent;
	}
	
	public function setDate(date:Date ):Void
	{
		// datum
		myDate = date;
	}
	
	public function getDate():Date
	{
		// datum
		return myDate;
	}
	
	public function setTracks(arr:Array ):Void
	{
		// tracks
		myTracks = arr;
		
		// in typisierte instanzen umformen
		for (var i:String in myTracks) {
			// weiter, wenn "serviceName"
			if (i == "serviceName") continue;
			// aktuelles object
			var obj:Object = myTracks[i];
			// in Track umformen
			var track:Track = Track(RemotingBeanCaster.getCastedInstance(new Track(), obj));
			// speichern
			myTracks[i] = track;
		}
	}
	
	public function getTracks():Array
	{
		// tracks
		return myTracks;
	}
	
	public function setCars(arr:Array ):Void
	{
		// cars
		myCars = arr;
		
		// in typisierte instanzen umformen
		for (var i:String in myCars) {
			// weiter, wenn "serviceName"
			if (i == "serviceName") continue;
			// aktuelles object
			var obj:Object = myCars[i];
			// in Car umformen
			var car:Car = Car(RemotingBeanCaster.getCastedInstance(new Car(), obj));
			// speichern
			myCars[i] = car;
		}
	}
	
	public function getCars():Array
	{
		// cars
		return myCars;
	}
	
	public function setSelectedTrack(tid:Number ):Void
	{
		// rennstrecke
		myChallenge.setTid(tid);
	}
	
	public function getSelectedTrack():Number
	{
		// rennstrecke
		return myChallenge.getTid();
	}
	
	public function setSelectedCar(carid:Number ):Void
	{
		// fahrzeug
		myChallenge.getDetailsForCurrentStatus().setCarid(carid);
//		// challenger
//		if (myChallenge.getStatus() == Challenge.STATUS_NEW) myChallenge.getDetails(ChallengeDetail.MODE_CHALLENGER).setCarid(carid);
//		// opponent
//		if (myChallenge.getStatus() == Challenge.STATUS_CHALLENGER_DONE) myChallenge.getDetails(ChallengeDetail.MODE_OPPONENT).setCarid(carid);
	}
	
	public function getSelectedCar():Number
	{
		// fahrzeug
		return myChallenge.getDetailsForCurrentStatus().getCarid();
	}
	
	public function setRacetime(racetime:Number ):Void
	{
		// rennzeit
		myChallenge.getDetailsForCurrentStatus().setRacetime(racetime);
	}
	
	public function getRacetime(mode:Number ):Number
	{
		// rennzeit
		return myChallenge.getDetails(mode).getRacetime();
	}
	
	public function setLapresults(lapresults:Array ):Void
	{
		// rundenzeiten
		myChallenge.getDetailsForCurrentStatus().setLapresults(lapresults);
	}
	
	public function getLapresults(mode:Number ):Array
	{
		// rundenzeiten
		return myChallenge.getDetails(mode).getLapresults();
	}
	
	public function setReplay(replay:ChallengeReplay ):Void
	{
		// replay
		myChallenge.getDetailsForCurrentStatus().setReplay(replay.getReplay());
	}
	
	public function getReplay(mode:Number ):ChallengeReplay
	{
		// replay
		return new ChallengeReplay(myChallenge.getDetails(mode).getReplay());
	}
	
	public function setChallengerMessage(message:String ):Void
	{
		// nachricht des challengers
		myChallenge.getDetailsForCurrentStatus().setMessage(message);
	}
	
	public function getStatus():Number
	{
		// status der herausforderung
		return myChallenge.getStatus();
	}
	
	private function ChallengeController()
	{
		// datum
		myDate = new Date(_root.now);
		// user
		myUser = null;
		// opponent
		myOpponent = null;
		// herausforderung
		myChallenge = null;
		// rennstrecken
		myTracks = new Array();
		// fahrzeuge
		myCars = new Array();
	}
	
//	private function getChallengeDetails():ChallengeDetail
//	{
//		// challenger
//		if (myChallenge.getStatus() == Challenge.STATUS_NEW) return myChallenge.getDetails(ChallengeDetail.MODE_CHALLENGER);
//		// opponent
//		if (myChallenge.getStatus() == Challenge.STATUS_CHALLENGER_DONE) return myChallenge.getDetails(ChallengeDetail.MODE_OPPONENT);
//	}
}