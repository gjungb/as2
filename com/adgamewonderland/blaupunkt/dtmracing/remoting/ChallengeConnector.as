/* 
 * Generated by ASDT 
*/

/*
klasse:			ChallengeConnector
autor: 			gerd jungbluth, adgame-wonderland
email:			gerd.jungbluth@adgame-wonderland.de
kunde:			blaupunkt
erstellung: 		08.06.2005
zuletzt bearbeitet:	26.06.2005
durch			gj
status:			in bearbeitung
*/

import mx.remoting.debug.NetDebug;
import mx.remoting.Service;
import mx.remoting.PendingCall;
import mx.rpc.RelayResponder;
import mx.rpc.FaultEvent;
import mx.rpc.ResultEvent;

import com.meychi.MD5;

import com.adgamewonderland.blaupunkt.dtmracing.challenge.*;

import com.adgamewonderland.blaupunkt.dtmracing.remoting.*;

class com.adgamewonderland.blaupunkt.dtmracing.remoting.ChallengeConnector extends RemotingConnector {
	
	private static var myGatewayURL:String = "http://192.168.0.27:8080/dtmchallenge/gateway";
	
	private static var myRemoteObject:String = "com.agw.blaupunkt.dtmracing.remoting.connectors.ChallengeConnector";
	
	private static var myService:Service;
	
	public static function registerUser(user:User, caller:Object, callback:String ):Void
	{
		// registrierung senden
		var pc:PendingCall = getService().registerUser(user);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loginUser(email:String, password:String, caller:Object, callback:String ):Void
	{
		// login testen
		var pc:PendingCall = getService().loginUser(email, MD5.calculate(password));
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadAddress(uid:Number, caller:Object, callback:String ):Void
	{
		// adresse laden
		var pc:PendingCall = getService().loadAddress(uid);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function updateUser(user:User, caller:Object, callback:String ):Void
	{
		// geaenderten user senden
		var pc:PendingCall = getService().updateUser(user);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function updateAddress(uid:Number, address:UserAddress, caller:Object, callback:String ):Void
	{
		// geaenderte adresse senden
		var pc:PendingCall = getService().updateAddress(uid, address);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadOpponent(email:String, caller:Object, callback:String ):Void
	{
		// details des gegners laden
		var pc:PendingCall = getService().loadOpponent(email);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function saveChallenge(challenge:Challenge, caller:Object, callback:String ):Void
	{
		// herausforderung senden
		var pc:PendingCall = getService().saveChallenge(challenge);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function updateChallenge(challenge:Challenge, caller:Object, callback:String ):Void
	{
		// herausforderung updaten
		var pc:PendingCall = getService().updateChallenge(challenge);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function updateChallengeDetails(details:ChallengeDetail, caller:Object, callback:String ):Void
	{
		// herausforderungsdetails updaten
		var pc:PendingCall = getService().updateChallengeDetails(details);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadChallengeByMailid(mailid:String, caller:Object, callback:String ):Void
	{
		// herausforderung laden
		var pc:PendingCall = getService().loadChallengeByMailid(mailid);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadChallengeByDid(did:Number, caller:Object, callback:String ):Void
	{
		// herausforderung laden
		var pc:PendingCall = getService().loadChallengeByDid(did);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	private static function getService():Service
	{
		// testen, ob service schon instantiiert
		if (myService instanceof Service == false) {
			// debugger
//			NetDebug.initialize();
			// offline / online
			if (_url.indexOf("http://") == -1) {
				// remoting service mit url
				myService = new Service(myGatewayURL, null, myRemoteObject, null, null);
			} else {
				// remoting service ohne url
				myService = new Service("", null, myRemoteObject, null, null);
			}
		}
		// zurueck geben
		return myService;
	}
}