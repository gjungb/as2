/* 
 * Generated by ASDT 
*/ 

/*
klasse:			StatisticConnector
autor: 			gerd jungbluth, adgame-wonderland
email:			gerd.jungbluth@adgame-wonderland.de
kunde:			agw
erstellung: 		26.05.2005
zuletzt bearbeitet:	26.06.2005
durch			gj
status:			in bearbeitung
*/

import mx.remoting.debug.NetDebug;
import mx.remoting.Service;
import mx.remoting.PendingCall;
import mx.rpc.RelayResponder;
import mx.rpc.FaultEvent;
import mx.rpc.ResultEvent;

import com.adgamewonderland.blaupunkt.dtmracing.remoting.*;

class com.adgamewonderland.blaupunkt.dtmracing.remoting.StatisticConnector extends RemotingConnector {
	
	private static var myGatewayURL:String = "http://192.168.0.27:8080/dtmchallenge/gateway";
	
	private static var myRemoteObject:String = "com.agw.blaupunkt.dtmracing.remoting.connectors.StatisticConnector";
	
	private static var myService:Service;
	
	public static function loadTracks(caller:Object, callback:String ):Void
	{
		// strecken laden
		var pc:PendingCall = getService().loadTracks();
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadTrackStatistic(tid:Number, caller:Object, callback:String ):Void
	{
		// streckenstatistik laden
		var pc:PendingCall = getService().loadTrackStatistic(tid);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadTrackLayout(tid:Number, caller:Object, callback:String ):Void
	{
		// service
		var service:Service = getService();
		// streckenlayout laden
		var pc:PendingCall = getService().loadTrackLayout(tid);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadCars(caller:Object, callback:String ):Void
	{
		// fahrzeuge laden
		var pc:PendingCall = getService().loadCars();
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadUserStatistic(uid:Number, caller:Object, callback:String ):Void
	{
		// userstatistik laden
		var pc:PendingCall = getService().loadUserStatistic(uid);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadRankAllstars(score:Number, caller:Object, callback:String ):Void
	{
		// service
		var service:Service = getService();
		// platzierung laden
		var pc:PendingCall = getService().loadRankAllstars(score);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadRankTrack(tid:Number, racetime:Number, caller:Object, callback:String ):Void
	{
		// service
		var service:Service = getService();
		// platzierung laden
		var pc:PendingCall = getService().loadRankTrack(tid, racetime);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadChallengeList(uid:Number, mode:Number, caller:Object, callback:String ):Void
	{
		// liste der herausforderungen laden
		var pc:PendingCall = getService().loadChallengeList(uid, mode);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadAwardList(uid:Number, caller:Object, callback:String ):Void
	{
		// liste der siegerehrungen laden
		var pc:PendingCall = getService().loadAwardList(uid);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadScoreAllstars(startat:Number, count:Number, caller:Object, callback:String ):Void
	{
		// highscoreliste laden
		var pc:PendingCall = getService().loadScoreAllstars(startat, count);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadScoreTrack(tid:Number, startat:Number, count:Number, caller:Object, callback:String ):Void
	{
		// highscoreliste laden
		var pc:PendingCall = getService().loadScoreTrack(tid, startat, count);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadAward(cid:Number, caller:Object, callback:String ):Void
	{
		// siegerehrung laden
		var pc:PendingCall = getService().loadAward(cid);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadReplays(did0:Number, did1:Number, caller:Object, callback:String ):Void
	{
		// replays laden
		var pc:PendingCall = getService().loadReplays(did0, did1);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	private static function getService():Service
	{
		// testen, ob service schon instantiiert
		if (myService instanceof Service == false) {
			// debugger
//			NetDebug.initialize();
			// offline / online
			if (_url.indexOf("http://") == -1) {
				// remoting service mit url
				myService = new Service(myGatewayURL, null, myRemoteObject, null, null);
			} else {
				// remoting service ohne url
				myService = new Service("", null, myRemoteObject, null, null);
			}
		}
		// zurueck geben
		return myService;
	}
}