/*  * Generated by ASDT */ /*klasse:			ChooserTrackUIautor: 			gerd jungbluth, adgame-wonderlandemail:			gerd.jungbluth@adgame-wonderland.dekunde:			blaupunkterstellung: 		16.06.2005zuletzt bearbeitet:	24.06.2005durch			gjstatus:			in bearbeitung*/import mx.rpc.ResultEvent;import mx.rpc.FaultEvent;import com.adgamewonderland.agw.net.*;import com.adgamewonderland.agw.util.*;import com.adgamewonderland.blaupunkt.dtmracing.challenge.*;import com.adgamewonderland.blaupunkt.dtmracing.remoting.*;import com.adgamewonderland.blaupunkt.dtmracing.statistic.*;import com.adgamewonderland.blaupunkt.dtmracing.ui.*;class com.adgamewonderland.blaupunkt.dtmracing.ui.ChooserTrackUI extends ChooserUI {		private var myTracks:Array;		private var trackstats_txt:TextField;		public function ChooserTrackUI()	{		// vererbung		super();		// rennstrecken		myTracks = ChallengeController.getInstance().getTracks();		// maximale position		myPositionMax = myTracks.length;		// bestzeit der strecke zentriert		trackstats_txt.autoSize = "center";	}		private function initHeadline(mode:Number ):Void	{		// headline zentriert		headline_txt.autoSize = "center";		// headline		headline_txt.text = "";		// je nach modus		if (mode == MODE_SELECT) headline_txt.text += "Wählen Sie eine Strecke";		// in versalien		headline_txt.text = headline_txt.text.toUpperCase();	}		private function initPosition(mode:Number ):Void	{		// interval loeschen		clearInterval(myInterval);		// je nach modus (select, show)		switch (mode) {			// select			case (MODE_SELECT) :				// bei gast zur trainingsstrecke				if (ChallengeController.getInstance().getStatus() == Challenge.STATUS_GUEST) {					// training					setPosition(ChallengeController.TID_TRAINING);				} else {					// an anfang					setPosition(1);				}							break;			// show			case (MODE_SHOW) :				// gewaehlte rennstrecke				var tid:Number = ChallengeController.getInstance().getSelectedTrack();				// anzeigen				setPosition(tid);							break;		}	}		public function loadTrackStatistic(tid:Number ):Void	{		// bestzeit der strecke laden		StatisticConnector.loadTrackStatistic(tid, this, "onTrackStatisticLoaded");	}		public function onTrackStatisticLoaded(re:ResultEvent ):Void	{		// in TrackStatistic casten		var trackstats:TrackStatistic = TrackStatistic(RemotingBeanCaster.getCastedInstance(new TrackStatistic(), re.result));		// rennzeit		var time:String = (trackstats.getTopracetime() != null ? TimeFormater.getMinutesSecondsMilliseconds(trackstats.getTopracetime()) : "-");		// nickname		var nickname:String = (trackstats.getNickname() != null ? trackstats.getNickname() : "-");		// anzeigen		trackstats_txt.text = "Bestzeit: " + time + " (" + nickname + ")";	}		private function onChangePosition():Void	{		// gewaehlte rennstrecke		var track:Track = myTracks[myPositionCurrent - 1];		// testen, ob das auswaehlen der strecke erlaubt		var allowed:Boolean = isTrackAllowed(track);		// parent informieren		ChallengeUI(_parent).getInfobox().onChangeTrack(track.getTid(), allowed);				// wenn erlaubt, id speichern		if (allowed) ChallengeController.getInstance().setSelectedTrack(track.getTid());		// wenn nicht erlaubt, stoppen (wg. alpha)		if (!allowed) stop();		// statistik fuer diese strecke laden		if (track.getTid() != ChallengeController.TID_TRAINING) loadTrackStatistic(track.getTid());	}		private function isTrackAllowed(track:Track ):Boolean	{		// ist die strecke erlaubt		var allowed:Boolean = false;		// aktuelles datum		var date:Date = ChallengeController.getInstance().getDate();		// je nach status		var status:Number = ChallengeController.getInstance().getStatus();		// gast, training, herausforderung		switch (status) {			// gast			case Challenge.STATUS_GUEST :				// nur training				allowed = (track.getTid() == ChallengeController.TID_TRAINING);							break;			// training			case Challenge.STATUS_TRAINING :				// ist die strecke in vergangenheit oder aber training				allowed = (date.getTime() > track.getValidto().getTime()) || track.getTid() == ChallengeController.TID_TRAINING;				break;			// herausforderung			default :				// ist die strecke geoeffnet aber nicht training				allowed = (date.getTime() > track.getValidfrom().getTime()) && track.getTid() != ChallengeController.TID_TRAINING;								break;		}		// zurueck geben		return allowed;	}}