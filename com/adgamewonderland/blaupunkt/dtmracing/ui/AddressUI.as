/*  * Generated by ASDT */ /*klasse:			AddressUIautor: 			gerd jungbluth, adgame-wonderlandemail:			gerd.jungbluth@adgame-wonderland.dekunde:			blaupunkterstellung: 		15.06.2005zuletzt bearbeitet:	26.06.2005durch			gjstatus:			in bearbeitung*/import mx.rpc.ResultEvent;import mx.rpc.FaultEvent;import com.adgamewonderland.agw.*;import com.adgamewonderland.agw.net.*;import com.adgamewonderland.agw.util.*;import com.adgamewonderland.blaupunkt.dtmracing.challenge.*;import com.adgamewonderland.blaupunkt.dtmracing.remoting.*;class com.adgamewonderland.blaupunkt.dtmracing.ui.AddressUI extends MovieClip {		private static var DATE_DELIMITER:String = ".";		private static var DATE_DAYSPERMONTH:Array = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];		private var _myLoad:Boolean;		private var myAid:Number;		private var firstname_txt:TextField;		private var lastname_txt:TextField;		private var street_txt:TextField;		private var postcode_txt:TextField;		private var city_txt:TextField;		private var country_txt:TextField;		private var birthday_txt:TextField;		private var phone_txt:TextField;		public var message_txt:TextField;		private var optin_mc:CheckboxUI;		private var reset_btn:Button;		public function AddressUI()	{			// adress id		myAid = null;		// button reset		reset_btn.onRelease = function() {			this._parent.resetForm();		};		// tabsetter		var index:Number = 4;		firstname_txt.tabIndex = ++index;		lastname_txt.tabIndex = ++index;		street_txt.tabIndex = ++index;		postcode_txt.tabIndex = ++index;		city_txt.tabIndex = ++index;		country_txt.tabIndex = ++index;		birthday_txt.tabIndex = ++index;		phone_txt.tabIndex = ++index;		// adresse laden		if (_myLoad) loadAddress();	}		public function loadAddress():Void	{		// eingeloggter user		var user:User = ChallengeController.getInstance().getUser();		// adresse laden lassen		ChallengeConnector.loadAddress(user.getUid(), this, "onAddressLoaded");	}		public function onAddressLoaded(re:ResultEvent ):Void	{		// in useraddress casten		var address:UserAddress = UserAddress(RemotingBeanCaster.getCastedInstance(new UserAddress(), re.result));		// adress id		myAid = address.getAid();		// abbrechen, wenn nicht gefuellt		if (address.getFirstname() == null) return;		// textfelder fuellen		firstname_txt.text = address.getFirstname();		lastname_txt.text = address.getLastname();		street_txt.text = address.getStreet();		postcode_txt.text = address.getPostcode();		city_txt.text = address.getCity();		country_txt.text = address.getCountry();		phone_txt.text = address.getPhone();		birthday_txt.text = getStringFromDate(address.getBirthday());		optin_mc.status = (address.getOptin() == 1);	}		public function getAddress():UserAddress	{		// meldung ausblenden		message_txt.text = "";		// wenn alle leer, leere adresse zurueck geben		if (isFormEmpty()) return new UserAddress(myAid);		// firstname		var firstname:String = firstname_txt.text;		// lastname		var lastname:String = lastname_txt.text;		// street		var street:String = street_txt.text;		// postcode		var postcode:String = postcode_txt.text;		// city		var city:String = city_txt.text;		// country		var country:String = country_txt.text;		// phone		var phone:String = phone_txt.text;		// birthday		var birthday:Date = getDateFromString(birthday_txt.text);		// optin		var optin:Number = Number(optin_mc.status);		// validieren, ob 1. korrekte email adresse, 2. nicht leerer nickname, 3. nicht leeres passwort		var errors:Array = (new Formprocessor()).checkForm([1, "", firstname, 1, "", lastname, 1, "", street, 1, "", postcode, 1, "", city, 1, "", country, 1, "", phone]);		// testen, ob fehler gefunden		if (errors.length != 0 || birthday == null || optin == 0) {			// nachricht			message_txt.text = "Bitte vollständig ausfüllen oder vollständig leer lassen!";			// abbrechen			return null;		}		// neue adresse zurueck geben		return new UserAddress(myAid, firstname, lastname, street, postcode, city, country, phone, birthday, optin);	}		public function resetForm():Void	{		// alle textfelder leeren		for (var i:String in this) {			// textfeld			if (this[i] instanceof TextField && this[i].type == "input") this[i].text = "";		}		// meldung ausblenden		message_txt.text = "";	}		private function isFormEmpty():Boolean	{		// abbrechen, wenn eins nicht leer		for (var i:String in this) {			// textfeld			if (this[i] instanceof TextField && this[i].type == "input") {				// wenn nicht leer				if (this[i].text != "") return false;			}		}		// alle leer		return true;	}		private function getDateFromString(str:String ):Date	{		// in array spalten		var arr:Array = str.split(DATE_DELIMITER);		// abbrechen, wenn nicht drei elemente		if (arr.length != 3) return null;		// abbrechen, wenn nicht exakte laenge		if (arr[0].length != 2 || arr[1].length != 2 || arr[2].length != 4) return null;		// jahr		var year:Number = Number(arr[2]);		// abbrechen, wenn keine zahl		if (isNaN(year)) return null;		// abbrechen, wenn zu gross oder zu klein		if (year < 1900 || year > ChallengeController.getInstance().getDate().getFullYear()) return null;		// monat		var month:Number = Number(arr[1]);		// abbrechen, wenn keine zahl		if (isNaN(month)) return null;		// abbrechen, wenn zu gross oder zu klein		if (month < 1 || month > 12) return;		// tag		var day:Number = Number(arr[0]);		// abbrechen, wenn keine zahl		if (isNaN(day)) return;		// abbrechen, wenn zu gross oder zu klein		if (day < 1 || day > DATE_DAYSPERMONTH[month - 1]) return;				// neues datum zurueck geben		return new Date(year, month - 1, day);	}		private function getStringFromDate(date:Date ):String	{		// datum als string (TT.MM.JJJJ)		var str:String;		// tag		var day:String = String(date.getDate());		// fuehrende 0		if (day.length < 2) day = "0" + day;		// monat		var month:String = String(date.getMonth() + 1);		// fuehrende 0		if (month.length < 2) month = "0" + month;		// jahr		var year:String = String(date.getFullYear());		// zusammen setzen		str = day + DATE_DELIMITER + month + DATE_DELIMITER + year;		// und zureuck geben		return str;	}	}