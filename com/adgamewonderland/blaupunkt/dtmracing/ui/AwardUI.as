/* 
 * Generated by ASDT 
*/ 

/*
klasse:			AwardUI
autor: 			gerd jungbluth, adgame-wonderland
email:			gerd.jungbluth@adgame-wonderland.de
kunde:			blaupunkt
erstellung: 		15.06.2005
zuletzt bearbeitet:	01.07.2005
durch			gj
status:			in bearbeitung
*/

import mx.rpc.ResultEvent;
import mx.rpc.FaultEvent;

import com.adgamewonderland.agw.*;

import com.adgamewonderland.agw.net.*;

import com.adgamewonderland.agw.util.*;

import com.adgamewonderland.blaupunkt.dtmracing.challenge.*;

import com.adgamewonderland.blaupunkt.dtmracing.remoting.*;

import com.adgamewonderland.blaupunkt.dtmracing.ui.*;

import com.adgamewonderland.agw.racing.track.*;

class com.adgamewonderland.blaupunkt.dtmracing.ui.AwardUI extends MovieClip {
	
	private var myDtmRacingUI:DtmRacingUI;
	
	private var myAward:Award;
	
	private var chooser_track_mc:ChooserTrackUI;
	
	private var chooser_car1_mc:ChooserCarUI;
	
	private var chooser_car2_mc:ChooserCarUI;
	
	private var result1_mc:RaceResultUI;
	
	private var result2_mc:RaceResultUI;
	
	private var replay_mc:ReplayUI;
	
	private var nickname1_txt:TextField;
	
	private var nickname2_txt:TextField;
	
	private var award_info_mc:InfoboxAwardUI;
	
	private var back_metal_mc:MovieClip;
	
	private var meta_transition_mc:MovieClip;
	
	public function AwardUI()
	{
		// hauptzeitleiste
		myDtmRacingUI = DtmRacingUI(_parent);
		// geladene siegerehrung
		myAward = new Award();
		// abspielen verfolgen
		var follower:TimelineFollower = new TimelineFollower(this, "init");
		// abspielen verfolgen
		onEnterFrame = function() {
			follower.followTimeline();
		}
	}
	
	public function init():Void
	{
		// cid
		var cid:Number = ChallengeController.getInstance().getChallenge().getCid();
		// siegerehrung laden
		StatisticConnector.loadAward(cid, this, "onAwardLoaded");
	}
	
	public function onAwardLoaded(re:ResultEvent ):Void
	{
		// in award casten
		myAward = ChallengeController.getInstance().getCastedAward(re.result);
		
		// renstrecke
		chooser_track_mc.setPosition(myAward.getTid());
		
		// details challenger
		var detail1:ChallengeDetail = myAward.getChallengerDetail();
		// details opponent
		var detail2:ChallengeDetail = myAward.getOpponentDetail();
		
		// nickname challenger
		nickname1_txt.text = detail1.getNickname();
		// nickname opponent
		nickname2_txt.text = detail2.getNickname();
		
		// fahrzeug challenger
		chooser_car1_mc.setPosition(detail1.getCarid());
		// fahrzeug opponent
		chooser_car2_mc.setPosition(detail2.getCarid());
		
		// rennzeit challenger
		var racetime1:Number = detail1.getRacetime();
		// rennzeit opponent
		var racetime2:Number = detail2.getRacetime();
		
		// ist der challenger oder der opponent eingeloggt
		var loggedin:Number = 0;
		// uids vergleichen
		if (detail1.getUid() == ChallengeController.getInstance().getUser().getUid()) {
			// challenger
			loggedin = ChallengeDetail.MODE_CHALLENGER;
		} else {
			// opponent
			loggedin = ChallengeDetail.MODE_OPPONENT;
		}
		// status der challenge entsprechend updaten
		updateChallengeStatus(loggedin);
		
		// gewonnen oder verloren
		var won:Boolean;
		// gewinner ermitteln
		if (racetime1 < racetime2) {
			// challenger hat gewonnen
			// wenn challenger eingeloggt, gewonnen
			if (loggedin == ChallengeDetail.MODE_CHALLENGER) {
				won = true;
			} else {
				won = false;
			}
		} else {
			// opponent hat gewonnen
			// wenn opponent eingeloggt, gewonnen
			if (loggedin == ChallengeDetail.MODE_OPPONENT) {
				won = true;
			} else {
				won = false;
			}
		}
		// entsprechender text
		var winloose:String = "Sie haben " + (won ? "gewonnen." : "verloren.");
		
		// unterschied der rundenzeiten
		var timediff:Number = Math.abs(racetime1 - racetime2);
		// vorzeichen fur win / loose
		var sign:String = (won ? "-" : "+");
		// als formatierter string
		var racetime:String = sign + TimeFormater.getMinutesSecondsMilliseconds(timediff);
		
		// anzeigen
		award_info_mc.initInfobox(winloose, racetime);
		
		// metal hochfahren
		back_metal_mc.showMetal(true);
		
	}
	
	public function stopAward():Void
	{
		// abspielen verfolgen
		var follower:TimelineFollower = new TimelineFollower(this, "onAwardFinished", DtmRacingUI.NEXT_MAIN);
		// abspielen verfolgen
		onEnterFrame = function() {
			follower.followTimeline();
		}
		// abspielen
		gotoAndPlay("frClose");
	}
	
	public function loadReplays():Void
	{
		// did challenger
		var did0:Number = myAward.getChallengerDetail().getDid();
		// did opponent
		var did1:Number = myAward.getOpponentDetail().getDid();
		// replays laden lassen
		StatisticConnector.loadReplays(did0, did1, this, "onReplaysLoaded");
		// blende runterfahren
		meta_transition_mc._visible = true;
		meta_transition_mc.showMetal(false);
		// als button
		meta_transition_mc.onRelease = function () {};
		meta_transition_mc.useHandCursor = false;
	}
	
	public function onReplaysLoaded(re:ResultEvent ):Void
	{
		// beide in ChallengeReplay casten
		var replay0:ChallengeReplay = ChallengeReplay(RemotingBeanCaster.getCastedInstance(new ChallengeReplay(), re.result[0]));
		var replay1:ChallengeReplay = ChallengeReplay(RemotingBeanCaster.getCastedInstance(new ChallengeReplay(), re.result[1]));
		// replays als array
		var replays:Array = new Array(replay0, replay1);
		// replay starten
		replay_mc.startReplay(myAward.getTid(), replays);
	}
	
	public function onStopReplay():Void
	{
		// blende hochfahren
		meta_transition_mc.showMetal(true);
		
	}
	
	public function onAwardFinished(next:Number ):Void
	{
		// zur main
		if (next == DtmRacingUI.NEXT_MAIN) {
			myDtmRacingUI.showMain();
		}
	}
	
	private function updateChallengeStatus(loggedin:Number ):Void
	{
		// challenge
		var challenge:Challenge = ChallengeController.getInstance().getChallenge();
		// neuer status der challenge
		var status:Number;
		// challenger
		if (loggedin == ChallengeDetail.MODE_CHALLENGER) status = Challenge.STATUS_CHALLENGER_AWARDED;
		// opponent
		if (loggedin == ChallengeDetail.MODE_OPPONENT) status = Challenge.STATUS_OPPONENT_AWARDED;
		// neuen status setzen
		challenge.setStatus(status);
		// updaten
		ChallengeConnector.updateChallenge(challenge, this, null);
	}
	
}