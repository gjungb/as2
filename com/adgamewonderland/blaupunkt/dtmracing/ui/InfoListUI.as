/* 
 * Generated by ASDT 
*/ 

/*
klasse:			InfoListUI
autor: 			gerd jungbluth, adgame-wonderland
email:			gerd.jungbluth@adgame-wonderland.de
kunde:			blaupunkt
erstellung: 		15.06.2005
zuletzt bearbeitet:	26.06.2005
durch			gj
status:			in bearbeitung
*/

import mx.rpc.ResultEvent;
import mx.rpc.FaultEvent;

import com.adgamewonderland.agw.net.*;

import com.adgamewonderland.agw.util.*;

import com.adgamewonderland.blaupunkt.dtmracing.challenge.*;

import com.adgamewonderland.blaupunkt.dtmracing.remoting.*;

import com.adgamewonderland.blaupunkt.dtmracing.ui.*;

class com.adgamewonderland.blaupunkt.dtmracing.ui.InfoListUI extends MovieClip {
	
	public static var MODE_CHALLENGER:Number = ChallengeDetail.MODE_CHALLENGER;
	
	public static var MODE_OPPONENT:Number = ChallengeDetail.MODE_OPPONENT;
	
	public static var MODE_AWARD:Number = 3;
	
	private static var HEADLINES:Array = ["Ich habe herausgefordert", "Ich wurde herausgefordert", "Siegerehrungen"];
	
	private static var LISTPOS:Object = {x : 3, y : 37};
	
	private static var LISTDIMS:Object = {width : 167, height : 120};
	
	private var _myMode:Number;
	
	private var myInterval:Number;
	
	private var list_mc:MovieClip;
	
	private var mask_mc:MovieClip;
	
	private var scrollbar_mc:ScrollbarUI;
	
	private var reload_btn:Button;
	
	private var headline1_txt:TextField;
	
	private var headline2_txt:TextField;
	
	public function InfoListUI()
	{
		// headline anzeigen
		headline1_txt.text = headline2_txt.text = HEADLINES[_myMode - 1].toUpperCase();
		// button reload
		reload_btn.onRelease = function() {
			this._parent.loadInfoList();
		};
	}
	
	public function get mode():Number
	{
		// modus
		return _myMode;
	}
	
	public function init():Void
	{
		// sofort statistik aufrufen (schlaegt fehl)
//		loadInfoList();
		// nach pause statistik nochmal aufrufen
		myInterval = setInterval(this, "loadInfoList", _myMode * 200);
	}
	
	public function loadInfoList():Void
	{
		// interval loeschen
		clearInterval(myInterval);
		// uid des users 
		var uid:Number = ChallengeController.getInstance().getUser().getUid();
		// je nach modus
		switch (_myMode) {
			// challenger
			case MODE_CHALLENGER :
				// liste "ich habe herausgefordert" laden
				StatisticConnector.loadChallengeList(uid, _myMode, this, "onInfoListLoaded");
				
				break;
			// opponent
			case MODE_OPPONENT :
				// liste "ich wurde herausgefordert" laden
				StatisticConnector.loadChallengeList(uid, _myMode, this, "onInfoListLoaded");
			
				break;
			// award
			case MODE_AWARD :
				// liste der siegerehrungen laden
				StatisticConnector.loadAwardList(uid, this, "onInfoListLoaded");
			
				break;
		}
	}
	
	public function onInfoListLoaded(re:ResultEvent ):Void
	{
		// anzeigen
		showInfoList(re.result);
	}
	
	public function onSelectItem(detail:ChallengeDetail ):Void
	{
		// challenge laden
		ChallengeConnector.loadChallengeByDid(detail.getDid(), this, "onChallengeLoaded");
	}
	
	public function onChallengeLoaded(re:ResultEvent ):Void
	{
		// in challenge casten
		var challenge:Challenge = ChallengeController.getInstance().getCastedChallenge(re.result);
		// je nach modus
		if (_myMode == MODE_OPPONENT) {
			// herausforderung annehmen
			_parent._parent.acceptChallenge(challenge);
		} else if (_myMode == MODE_AWARD) {
			// siegerehrung ansehen
			_parent._parent.showAward(challenge);
		}
	}
	
	public function onDeleteItem(detail:ChallengeDetail ):Void
	{
		// nicht mehr in liste anzeigen
		detail.setShowinlist(0);
		// details in db updaten und dann liste neu laden
		ChallengeConnector.updateChallengeDetails(detail, this, "loadInfoList");
	}
	
	private function showInfoList(details:Array ):Void
	{
		// bisherige liste loeschen
		removeList();
		// neue liste
		this.createEmptyMovieClip("list_mc", 1);
		// positionieren
		list_mc._x = LISTPOS.x;
		list_mc._y = LISTPOS.y;
		// y-position des naechsten details
		var ypos:Number = 0;
		// schleife ueber alle details
		for (var i:String in details) {
			// "serviceName" ueberspringen
			if (i == "serviceName") continue;
			// tiefe fuer attachen
			var depth:Number = list_mc.getNextHighestDepth();
			// aktuelles detail
			var detail:ChallengeDetail = ChallengeDetail(RemotingBeanCaster.getCastedInstance(new ChallengeDetail(), details[i]));
			// ich wurde hearsugefordert / siegerehrungen duerfen ausgewaehlt werden, ich habe herausgefordert nicht
			var selectable:Boolean = (_myMode == MODE_CHALLENGER ? false : true);
			// herausforderungen duerfen geloescht werden, siegerehrungen nicht
			var deletable:Boolean = (_myMode == MODE_AWARD ? false : true);
			// konstruktor fuer neues item
			var constructor:Object = {_y : ypos, _myDetail : detail, _isSelectable : selectable, _isDeletable : deletable};
			// attachen
			var listitem_mc:InfoListItemUI = InfoListItemUI(list_mc.attachMovie("infoListItemUI", "listdetail" + depth + "_mc", depth, constructor));
			// naechste y-position
			ypos += listitem_mc._height;
		}
		// scrollbar updaten
		scrollbar_mc.setScrollTarget(list_mc);
		// maske anzeigen
		showMask();
	}
	
	private function removeList():Void
	{
		// maske von buehne loeschen
		mask_mc.removeMovieClip();
		// liste von buehne loeschen
		list_mc.removeMovieClip();
	}
	
	private function showMask():Void
	{
		// neue maske
		this.createEmptyMovieClip("mask_mc", 2);
		// positionieren
		mask_mc._x = LISTPOS.x;
		mask_mc._y = LISTPOS.y;
		// rechteck mit fuellung
		mask_mc.beginFill(0xCCCCCC, 100);
		// zeichnen
		mask_mc.lineTo(LISTDIMS.width, 0);
		mask_mc.lineTo(LISTDIMS.width, LISTDIMS.height);
		mask_mc.lineTo(0, LISTDIMS.height);
		mask_mc.lineTo(0, 0);
		// als maske
		list_mc.setMask(mask_mc);
	}
	
	
}