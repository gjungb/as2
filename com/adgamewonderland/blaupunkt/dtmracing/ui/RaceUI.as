/* 
 * Generated by ASDT 
*/ 

/*
klasse:			RaceUI
autor: 			gerd jungbluth, adgame-wonderland
email:			gerd.jungbluth@adgame-wonderland.de
kunde:			blaupunkt
erstellung: 		15.06.2005
zuletzt bearbeitet:	08.08.2005
durch			gj
status:			in bearbeitung
*/

import mx.rpc.FaultEvent;
import mx.rpc.ResultEvent;

import com.adgamewonderland.agw.racing.race.*;

import com.adgamewonderland.blaupunkt.dtmracing.challenge.*;

import com.adgamewonderland.blaupunkt.dtmracing.remoting.*;

import com.adgamewonderland.blaupunkt.dtmracing.ui.*;

class com.adgamewonderland.blaupunkt.dtmracing.ui.RaceUI extends MovieClip {
	
	private static var RACEPATH:String = "dtmracing_race1.swf";
	
	private static var RACEPOS:Object = {x : 0, y : 129};
	
	private static var PAUSE_START:Number = 3000;
	
	private var myDtmRacingUI:DtmRacingUI;
	
	private var myInterval:Number;
	
	private var loading_txt:TextField;
	
	private var nickname1_txt:TextField;
	
	private var nickname2_txt:TextField;
	
	private var versus_txt:TextField;
	
	private var raceloader_mc:MovieClip;
	
	private var meta_transition_mc:MovieClip;
	
	public function RaceUI()
	{
		// hauptzeitleiste
		myDtmRacingUI = DtmRacingUI(_parent);
		// status der herausforderung
		var status:Number = ChallengeController.getInstance().getStatus();
		// headline initialisieren
		initHeadline(status);
		// rennen loeschen
		RaceController.getInstance().resetRaceController();
	}
	
	public function loadRace():Void
	{
		// raceloader im hintergrund
		raceloader_mc = createEmptyMovieClip("raceloader_mc", -16384);
		// positionieren
		raceloader_mc._x = RACEPOS.x;
		raceloader_mc._y = RACEPOS.y;
		// moviecliploader
		var loader_mcl:MovieClipLoader = new MovieClipLoader();
		// listener fuer moviecliploader
		var lsnr:Object = new Object();
		// referenz auf raceui
		lsnr.raceui = this;
		// start des ladens
		lsnr.onLoadStart = function (target_mc:MovieClip ) {
		};
		// waehrend des ladens
		lsnr.onLoadProgress = function (target_mc:MovieClip, bytesLoaded:Number, bytesTotal:Number ) {
		};
		// laden beendet
		lsnr.onLoadComplete = function (target_mc:MovieClip ) {
		};
		// geladene swf initialisiert
		lsnr.onLoadInit = function (target_mc:MovieClip ) {
			// callback
			this.raceui.onRaceLoaded();
		};
		// listener registrieren
		loader_mcl.addListener(lsnr);
		// laden
		loader_mcl.loadClip(RACEPATH, raceloader_mc);
		// loader anzeigen
		loading_txt._visible = true;
	}
	
	public function onRaceLoaded():Void
	{
		// gewaehlte strecke
		var tid:Number = ChallengeController.getInstance().getSelectedTrack();
		// gewaehltes fahrzeug
		var carid:Number = ChallengeController.getInstance().getSelectedCar();
		// race controller
		var rc:RaceController = RaceController.getInstance();
		// rennen initialisieren
		rc.initRace(tid, carid, this, onRaceInited);
		// quality
//		_quality = "LOW";
	}
	
	public function onRaceInited():Void
	{
		// nach kurzer pause starten
		myInterval = setInterval(this, "startRace", PAUSE_START);
	}
	
	public function startRace():Void
	{
		// interval loeschen
		clearInterval(myInterval);
		// loader ausblenden
		loading_txt._visible = false;
		// blende hochfahren
		meta_transition_mc.showMetal(true);
		// ampel und rennen starten
		RaceController.getInstance().startLights(onRaceFinished);
	}
	
	public function onRaceFinished(racetime:Number, lapresults:Array, replay:ChallengeReplay ):Void
	{
		// blende runterfahren
		meta_transition_mc.showMetal(false);
		// von buehne loeschen
		raceloader_mc.removeMovieClip();
		// rennzeit speichern
		ChallengeController.getInstance().setRacetime(racetime);
		// rundenzeiten speichern
		ChallengeController.getInstance().setLapresults(lapresults);
		// replay speichern
		ChallengeController.getInstance().setReplay(replay);
		
		// entscheiden, wie es weiter geht
		var status:Number = ChallengeController.getInstance().getStatus();
		// testen, ob opponent beendet
		if (status == Challenge.STATUS_CHALLENGER_DONE) {
			// challenge updaten
			saveChallenge();
		} else {
			// alle anderen zum result
			myDtmRacingUI.showResult();
		}
	}
	
	public function stopRace():Void
	{
		// rennen loeschen
		RaceController.getInstance().resetRaceController();
		// quality
//		_quality = "HIGH";
	}
	
	public function saveChallenge():Void
	{
		// logout button ausschalten
		myDtmRacingUI.getMetanavi().showLogout(false);
		// challenge updaten
		var challenge:Challenge = ChallengeController.getInstance().getUpdatedChallenge();
		// senden
		ChallengeConnector.saveChallenge(challenge, this, "onChallengeSaved");
	}
	
	public function onChallengeSaved(re:ResultEvent ):Void
	{
		// logout button einschalten
		myDtmRacingUI.getMetanavi().showLogout(true);
		// zur siegerehrung
		myDtmRacingUI.showAward();
	}
	
	private function initHeadline(status:Number ):Void
	{
		// herausforderung
		if (status == Challenge.STATUS_NEW || status == Challenge.STATUS_CHALLENGER_DONE) {
			// nicknames anzeigen
			nickname1_txt.text = ChallengeController.getInstance().getUser().getNickname();
			// opponent
			var opponent:User = ChallengeController.getInstance().getOpponent();
			// nickname oder email anzeigen
			if (opponent.getUid() != undefined) {
				nickname2_txt.text = opponent.getNickname();
			} else {
				nickname2_txt.text = opponent.getEmail();
			}
		// training, guest
		} else {
			// keine headline
			versus_txt._visible = false;
		}
	}
}