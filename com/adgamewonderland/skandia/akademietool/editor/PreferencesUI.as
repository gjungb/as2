/*klasse:			PreferencesUIautor: 			gerd jungbluth, adgamewonderlandemail:			gerd.jungbluth@adgamewonderland.dekunde:			skandiaerstellung: 		04.04.2005zuletzt bearbeitet: 06.04.2005durch			gjstatus:			final*/import mx.rpc.ResultEvent;import mx.rpc.FaultEvent;import mx.remoting.RecordSet;import mx.utils.Iterator;import com.adgamewonderland.skandia.akademietool.editor.*;import com.adgamewonderland.skandia.akademietool.quiz.*;class com.adgamewonderland.skandia.akademietool.editor.PreferencesUI extends MovieClip {		private static var LISTPOS:Object = {tasks : {x : 201, y : 239}, suppliers : {x : 201, y : 454}};		private static var LISTDIMS:Object = {tasks : {width : 480, height : 80}, suppliers : {width : 480, height : 60}};		private var myEditorUI:EditorUI;		private var myTaskStatistics:RecordSet;		private var mySuppliers:RecordSet;		private var myTextfields:Array;		private var tasks_mc:MovieClip;		private var suppliers_mc:MovieClip;		private var scrollbar_tasks_mc:ScrollbarUI;		private var scrollbar_suppliers_mc:ScrollbarUI;		private var topic_txt:TextField;		private var name_txt:TextField;		private var email_txt:TextField;		private var phone_txt:TextField;		private var savetopic_btn:Button;		private var savesupplier_btn:Button;		private var close_btn:Button;		public function PreferencesUI()	{		// editor		myEditorUI = EditorUI(_parent);		// statistik der aufgaben als record set		myTaskStatistics = new RecordSet();		// autoren als record set		mySuppliers = new RecordSet();		// alle textfelder		myTextfields = [];		// themengebiet speichern button		savetopic_btn.onRelease = function() {			this._parent.saveTopic();		};		// autor speichern button		savesupplier_btn.onRelease = function() {			this._parent.saveSupplier();		};		// abbrechen button		close_btn.onRelease = function() {			this._parent.myEditorUI.showWelcome();		};	}		public function init():Void	{		// statistik der aufgaben laden		loadTaskStatistics();		// liste der autoren laden		loadSuppliers();				// themengebiet		initTextfield(topic_txt, "Themengebiet", 32);		// name		initTextfield(name_txt, "Name", 32);		// email		initTextfield(email_txt, "E-Mail", 64);		// phone		initTextfield(phone_txt, "Telefon", 32);	}		private function loadTaskStatistics():Void	{		// liste laden lassen		EditorConnector.loadTaskStatistics(this, "onTaskStatisticsLoaded");		// loader anzeigen		myEditorUI.showLoader(true, "Statistik der Aufgaben wird geladen");	}		public function onTaskStatisticsLoaded(re:ResultEvent ):Void	{		// loader ausblenden		myEditorUI.showLoader(false);		// statistik speichern		myTaskStatistics = RecordSet(re.result);		// statistik anzeigen		showTaskStatistics(myTaskStatistics);	}		private function loadSuppliers():Void	{		// liste laden lassen		EditorConnector.loadSuppliers(this, "onSuppliersLoaded");		// loader anzeigen		myEditorUI.showLoader(true, "Liste der Autoren wird geladen");	}		public function onSuppliersLoaded(re:ResultEvent ):Void	{		// loader ausblenden		myEditorUI.showLoader(false);		// alle autoren speichern		mySuppliers = RecordSet(re.result);		// autoren anzeigen		showSuppliers(mySuppliers);	}		private function showTaskStatistics(tasks:RecordSet ):Void	{		// bisherige liste loeschen		removeList("tasks");		// neue liste		this.createEmptyMovieClip("tasks_mc", getNextHighestDepth());		// positionieren		tasks_mc._x = LISTPOS["tasks"].x;		tasks_mc._y = LISTPOS["tasks"].y;		// iterator fuer alle items		var iterator:Iterator = tasks.getIterator();		// umschalter fuer wechselnden hintergrund		var back:Boolean = false;		// y-position des naechsten items		var ypos:Number = 0;		// themengebiete		var topics:Array = myEditorUI.dropdowncontent.topics;		// aktuelles themengebiet		var toid:Number = 0;		// je themengebiet eine statistik		var stats:Array = [];		// aktuelle statistik		var stat:PreferencesTaskStatistics;		// erledigte themengebiete		var done:Array = [topics.length];		// schleife ueber alle items		while (iterator.hasNext()) {			// aktuelles item aus record set			var item:Object = iterator.next();			// testen, ob neues themengebiet			if (item["TOPIC"] != toid) {				// neue id				toid = item["TOPIC"];				// als erledigt markieren				done[toid - 1] = true;				// neue statisitk				stat = new PreferencesTaskStatistics(topics[toid - 1]);				// speichern				stats[toid - 1] = stat;			}			// anzahl aufgaben			var numtasks:Number = item["NUMTASKS"];			// schwierigkeitsgrad			var difficulty:Number = item["DIFFICULTY"];			// summe der fragen zum schwierigkeitsgrad			stat["difficulty" + difficulty] += numtasks;			// summe der fragen			stat.taskstotal += numtasks;			// summe der aktiven fragen			if (item["ACTIVE"] == 1) stat.tasksactive += numtasks;		}		// schleife ueber alle themengebiete		for (var i : Number = 0; i < topics.length; i++) {			// weiter, wenn erledigt			if (done[i] == true) continue;			// neue statisitk			stat = new PreferencesTaskStatistics(topics[i]);			// speichern			stats[i] = stat;		}		// schleife ueber alle statistiken		for (var j:Number = 0; j < stats.length; j++) {			// tiefe fuer attachen			var depth:Number = tasks_mc.getNextHighestDepth();			// konstruktor fuer neues PreferencesListItemUI			var constructor:Object = {_y : ypos, _myItem : stats[j], _myBack : back};			// attachen			var listitem_mc:PreferencesListItemUI = PreferencesListItemUI(tasks_mc.attachMovie("preferencesTasksUI", "listitem" + depth + "_mc", depth, constructor));			// hintergrund wechseln			back = !back;			// naechste y-position			ypos += listitem_mc._height;		}		// scrollbar updaten		scrollbar_tasks_mc.setScrollTarget(tasks_mc);		// maske anzeigen		showMask("tasks");	}		private function showSuppliers(suppliers:RecordSet ):Void	{		// bisherige liste loeschen		removeList("suppliers");		// neue liste		this.createEmptyMovieClip("suppliers_mc", getNextHighestDepth());		// positionieren		suppliers_mc._x = LISTPOS["suppliers"].x;		suppliers_mc._y = LISTPOS["suppliers"].y;		// iterator fuer alle items		var iterator:Iterator = suppliers.getIterator();		// umschalter fuer wechselnden hintergrund		var back:Boolean = false;		// y-position des naechsten items		var ypos:Number = 0;		// schleife ueber alle items		while (iterator.hasNext()) {			// tiefe fuer attachen			var depth:Number = suppliers_mc.getNextHighestDepth();			// aktuelles item aus record set			var item:Object = iterator.next();			// konstruktor fuer neues PreferencesListItemUI			var constructor:Object = {_y : ypos, _myItem : item, _myBack : back};			// attachen			var listitem_mc:PreferencesListItemUI = PreferencesListItemUI(suppliers_mc.attachMovie("preferencesSuppliersUI", "listitem" + depth + "_mc", depth, constructor));			// hintergrund wechseln			back = !back;			// naechste y-position			ypos += listitem_mc._height;		}		// scrollbar updaten		scrollbar_suppliers_mc.setScrollTarget(suppliers_mc);		// maske anzeigen		showMask("suppliers");	}		private function removeList(mode:String ):Void	{		// entsprechendes movieclip		var mc:MovieClip = this[mode + "_mc"];		// loeschen		mc.removeMovieClip();	}		private function showMask(mode:String ):Void	{		// zu maskierendes movieclip		var list_mc:MovieClip = this[mode + "_mc"];		// neue maske		var mask_mc:MovieClip = this.createEmptyMovieClip("mask_" + mode + "_mc", list_mc.getDepth() + 1);		// positionieren		mask_mc._x = list_mc._x;		mask_mc._y = list_mc._y;		// rechteck mit fuellung		mask_mc.beginFill(0xCCCCCC, 100);		// zeichnen		mask_mc.lineTo(LISTDIMS[mode].width, 0);		mask_mc.lineTo(LISTDIMS[mode].width, LISTDIMS[mode].height);		mask_mc.lineTo(0, LISTDIMS[mode].height);		mask_mc.lineTo(0, 0);		// als maske		list_mc.setMask(mask_mc);	}		private function initTextfield(field:TextField, deftxt:String, maxlength:Number ):Void	{		// default text		field.text = field.defaultText = deftxt; 		// beim betreten ggf. leeren 		field.onSetFocus = function () { 			// leeren, wenn default 			if (this.text == this.defaultText) this.text = "";	 		}; 		// beim verlassen ggf. default nehmen		field.onKillFocus = function() {			// wenn leer, default			if (this.text == "") this.text = this.defaultText;		};		// maximale anzahl zeichen		field.maxChars = maxlength;		// speichern		myTextfields.push(field);	}		private function saveTopic():Void	{		// fehlerhafte objekte		var errors:Array = [];		// textfelder checken		var field:TextField = topic_txt;		// 1. default-wert		if (field.text == field.defaultText) errors.push(field);		// 2. leer		if (field.text == "") errors.push(field);		// abbrechen wenn fehler gefunden		if (errors.length > 0) {			// meldung anzeigen			myEditorUI.showMessage(true, 4);			// abbrechen			return;		}		// themengebiet speichern lassen		EditorConnector.sendTopic(myEditorUI.user.userid, field.text, this, "onTopicSaved");		// loader anzeigen		myEditorUI.showLoader(true, "Themengebiet wird gespeichert");	}		public function onTopicSaved(re:ResultEvent ):Void	{		// loader ausblenden		myEditorUI.showLoader(false);		// meldung anzeigen, je nachdem ob erfolgreich oder nicht		if (re.result) {			// meldung			myEditorUI.showMessage(true, 5);			// content fuer dropdowns aktualisieren			myEditorUI.loadDropdownContent();		} else {			// fehlermeldung			myEditorUI.showMessage(true, 6);		}	}		private function saveSupplier():Void	{		// fehlerhafte objekte		var errors:Array = [];		// textfelder checken		var field:TextField = name_txt;		// 1. default-wert		if (field.text == field.defaultText) errors.push(field);		// 2. leer		if (field.text == "") errors.push(field);		// abbrechen wenn fehler gefunden		if (errors.length > 0) {			// meldung anzeigen			myEditorUI.showMessage(true, 7);			// abbrechen			return;		}		// email und telefon		var email:String = (email_txt.text != email_txt.defaultText ? email_txt.text : "");		var phone:String = (phone_txt.text != phone_txt.defaultText ? phone_txt.text : "");		// autor speichern lassen		EditorConnector.sendSupplier(name_txt.text, email, phone, this, "onSupplierSaved");		// loader anzeigen		myEditorUI.showLoader(true, "Autor wird gespeichert");	}		public function onSupplierSaved(re:ResultEvent ):Void	{		// loader ausblenden		myEditorUI.showLoader(false);		// meldung anzeigen, je nachdem ob erfolgreich oder nicht		if (re.result) {			// meldung			myEditorUI.showMessage(true, 8);			// content fuer dropdowns aktualisieren			myEditorUI.loadDropdownContent();		} else {			// fehlermeldung			myEditorUI.showMessage(true, 6);		}	}}