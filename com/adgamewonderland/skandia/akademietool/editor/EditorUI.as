/*klasse:			EditorUIautor: 			gerd jungbluth, adgamewonderlandemail:			gerd.jungbluth@adgamewonderland.dekunde:			skandiaerstellung: 		03.02.2005zuletzt bearbeitet: 05.04.2005durch			gjstatus:			final*/import mx.rpc.ResultEvent;import mx.rpc.FaultEvent;import com.adgamewonderland.skandia.akademietool.editor.*;import com.adgamewonderland.skandia.akademietool.quiz.*;class com.adgamewonderland.skandia.akademietool.editor.EditorUI extends MovieClip {		private static var LOADTIME:Number = 2000;		private var myUser:User;		private var myDropdownContent:DropdownContent;		private var myListOrder:Object;		private var loader_mc:LoaderUI;		private var message_mc:MovieClip;		private var navigation_mc:NavigationUI;		private var login_mc:LoginUI;		private var welcome_mc:WelcomeUI;		private var tasklist_mc:TaskListUI;		private var taskedit_mc:TaskEditUI;		private var taskprint_mc:TaskPrintUI;		private var quizedit_mc:QuizEditUI;		private var preferences_mc:PreferencesUI;		private var nickname_txt:TextField;		public function EditorUI()	{		// user, der den editor bedient		myUser = new User();		// content fuer dropdowns		myDropdownContent = new DropdownContent();		// sortierreihenfolge fuer aufgabenliste		myListOrder = {item : "TID", order : "ASC"};				// content fuer dropdowns laden		loadDropdownContent();	}		public function get user():User	{		// user, der den editor bedient		return myUser;	}		public function get dropdowncontent():DropdownContent	{		// content fuer dropdowns		return myDropdownContent;	}		public function set listorder(obj:Object ):Void	{		// sortierreihenfolge fuer aufgabenliste		myListOrder = obj;	}		public function get listorder():Object	{		// sortierreihenfolge fuer aufgabenliste		return myListOrder;	}		public function loadDropdownContent():Void	{		// content fuer dropdowns laden lassen		EditorConnector.loadDropdownContent(this, "onDropdownContentLoaded");		// loader anzeigen		showLoader(true, "Pflegetool wird initialisiert");	}		public function onDropdownContentLoaded(re:ResultEvent ):Void	{		// loader ausblenden		showLoader(false);		// result als EditorDropdownContentBean		var result:Object = re.result;		// schwierigkeitsgrade		myDropdownContent.difficulties = result.difficulties;		// themengebiete		myDropdownContent.topics = result.topics;		// autoren		myDropdownContent.suppliers = result.suppliers;	}		public function onConnectorFault(fe:FaultEvent ):Void	{   		trace("There was a problem: " + fe.fault.faultstring);	   	trace("The faultcode is: " + fe.fault.faultcode);	 	trace("The detail: " + fe.fault.detail);	   	trace("The error class name is: " + fe.fault.type);	}		public function loginUser(user:User ):Void	{		// user, der den editor bedient		myUser = user;		// nickname linksbuendig		nickname_txt.autoSize = "left";		// anzeigen		nickname_txt.text = user.nickname;		// zur willkommensseite		showWelcome();	}		public function logoutUser():Void	{		// user loeschen		delete(myUser);		// nickname loeschen		nickname_txt.text = "";		// zum login		showLogin();	}		public function showLogin():Void	{		// login aufrufen		navigate("frLogin", 50, "login_mc", "", []);		// navigation umschalten		navigation_mc.showButtons("login");	}		public function showWelcome():Void	{		// willkommensseite aufrufen		navigate("frWelcome", 50, "welcome_mc", "", []);		// navigation umschalten		navigation_mc.showButtons("welcome");	}		public function showTaskList():Void	{		// liste aufrufen		navigate("frTasklist", 50, "tasklist_mc", "loadList", []);		// navigation umschalten		navigation_mc.showButtons("tasklist");	}		public function showTaskEdit(tid:Number ):Void	{		// editor aufrufen		navigate("frTaskedit", 50, "taskedit_mc", "init", [tid]);		// navigation umschalten		navigation_mc.showButtons("taskedit");	}		public function showTaskPrint():Void	{		// liste aufrufen		navigate("frTaskprint", 50, "taskprint_mc", "loadList", []);		// navigation umschalten		navigation_mc.showButtons("taskprint");	}		public function showQuizEdit():Void	{		// editor aufrufen		navigate("frQuizedit", 50, "quizedit_mc", "init", []);		// navigation umschalten		navigation_mc.showButtons("quizedit");	}		public function showPreferences():Void	{		// preferences editor aufrufen		navigate("frPreferences", 50, "preferences_mc", "init", []);		// navigation umschalten		navigation_mc.showButtons("preferences");	}		public function getValuesArray(names:Array ):Array	{		// array mit numerischen werten		var values:Array = [];		// schleife ueber laenge des namens-array		for (var i:Number = 0; i < names.length; i++) values[i] = i + 1;		// zurueck geben		return values;	}		public function showLoader(bool:Boolean, tstr:String ):Void	{		// ein- / ausblenden		switch (bool) {			// einblenden			case true:				// einblenden				loader_mc._visible = true;				// als blind button behandeln				loader_mc.onRelease = function() {};				// ohne hand				loader_mc.useHandCursor = false;				// resetten				loader_mc.showProgress(0);				// text anzeigen				loader_mc.text = tstr;				// startzeit				var start:Number = getTimer();				// laden verfolgen				onEnterFrame = function() {					// prozent vergange ladezeit					var percent:Number = Math.round((getTimer() - start) / LOADTIME * 100);					// anzeigen					loader_mc.showProgress(percent);					// resetten, wenn ende erreicht					if (percent >= 100) start = getTimer();				}								break;			// ausblenden			case false:				// ausblenden				loader_mc._visible = false;				// verfolgen beenden				delete(onEnterFrame);								break;		}	}		public function showMessage(bool:Boolean, code:Number ):Void	{		// fehlermeldung ein- / ausblenden		message_mc._visible = bool;		// zur entsprechenden meldung springen		message_mc.gotoAndStop("fr" + code);		// komplett als button behandeln		if (bool) {			message_mc.back_mc.onRelease = function() {};			message_mc.back_mc.useHandCursor = false;		} else {			delete(message_mc.back_mc.onRelease);			}	}		private function navigate(frame:String, pause:Number, target:String, method:String, args:Array ):Void	{		// loader ausblenden		showLoader(false);		// nachricht ausblenden		showMessage(false, 0);		// hinspringen		gotoAndStop(frame);		// funktion zur uebergabe der parameter an ziel		var invokeMethod = function(target:Object ) {			// uebergeben			target[method](args[0]);			// interval loeschen			clearInterval(interval);		};		// nach pause aufrufen		var interval:Number = setInterval(invokeMethod, pause, this[target]);	}	} /* end class EditorUI */