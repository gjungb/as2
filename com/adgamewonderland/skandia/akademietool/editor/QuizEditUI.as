/*klasse:			QuizEditUIautor: 			gerd jungbluth, adgamewonderlandemail:			gerd.jungbluth@adgamewonderland.dekunde:			skandiaerstellung: 		08.02.2005zuletzt bearbeitet:	06.04.2005durch			gjstatus:			in bearbeitung*/import mx.rpc.ResultEvent;import mx.rpc.FaultEvent;import mx.remoting.RecordSet;import mx.utils.Iterator;import com.adgamewonderland.skandia.akademietool.editor.*;class com.adgamewonderland.skandia.akademietool.editor.QuizEditUI extends MovieClip {		private static var DROPDOWN_YDIFF:Number = 20;		private var myEditorUI:EditorUI;		private var myConfig:EditorConfig;		private var topic_mc:DropdownEditorUI;		private var blind_mc:MovieClip;		private var userinfo_txt:TextField;		private var lastupdate_txt:TextField;		private var numtasks_txt:TextField;		private var maxtasks1_txt:TextField;		private var maxtasks2_txt:TextField;		private var timequiz_txt:TextField;		private var numtasks1_txt:TextField;		private var numtasks2_txt:TextField;		private var numtasks3_txt:TextField;		private var save_btn:Button;		private var close_btn:Button;		public function QuizEditUI()	{		// konfiguration		myConfig = new EditorConfig(null);		// editor		myEditorUI = EditorUI(_parent);		// eingabefelder duerfen nur ziffern enthalten		numtasks_txt.restrict = timequiz_txt.restrict = numtasks1_txt.restrict = numtasks2_txt.restrict = numtasks3_txt.restrict = "0-9";		// speichern button		save_btn.onRelease = function() {			this._parent.saveConfig();		};		// abbrechen button		close_btn.onRelease = function() {			this._parent.myEditorUI.showWelcome();		};	}		public function init():Void	{		// inhalt fuer dropdowns		var content:DropdownContent = myEditorUI.dropdowncontent;		// themengebiet		topic_mc.initDropdownUI("Themengebiet", content.topics, myEditorUI.getValuesArray(content.topics), this, "onSelectTopic", DROPDOWN_YDIFF);		// aenderungen an anzahl fragen ueberwachen		numtasks_txt.onKillFocus = function() {			this._parent.onNumtasksChanged(this, this.text);			};		// aenderungen an verteilung auf schwierigkeitsgrade ueberwachen		numtasks1_txt.onKillFocus = numtasks2_txt.onKillFocus = numtasks3_txt.onKillFocus = function() {			this._parent.onNumtasksChanged(this, this.text);			};		// aenderungen an dauer des quiz ueberwachen		timequiz_txt.onKillFocus = function() {			this._parent.onTimequizChanged(this, this.text);		};		// dauer des quiz begrenzen		timequiz_txt.maxChars = 4;		// blende einblenden		showBlind(true);	}		public function onSelectTopic(dropdown:DropdownEditorUI, toid:Number ):Void	{		// alte konfiguration loeschen		delete(myConfig);		// neue konfiguration mit themengebiet		myConfig = new EditorConfig(toid);		// konfiguration laden (anzahl aufgaben, wann zuletzt editiert von von wem)		loadConfig();	}		private function loadConfig():Void	{		// blende einblenden		showBlind(true);		// konfiguration laden lassen		EditorConnector.loadConfig(myConfig.toid, this, "onConfigLoaded");	}		public function onConfigLoaded(re:ResultEvent ):Void	{		// erster datensatz ist konfiguration		var config:Object = re.result.getItemAt(0);		// inhalte der spalten in konfiguration-objekt speichern		for (var column:String in config) {			// eigenschaft in kleinbuchstaben			myConfig[column.toLowerCase()] = config[column];		}		// verteilung auf schwierigkeitsgrade laden		loadDifficultyNums();	}		private function loadDifficultyNums():Void	{		// verteilung auf schwierigkeitsgrade laden lassen		EditorConnector.loadDifficultyNums(myConfig.toid, this, "onDifficultyNumsLoaded");	}		public function onDifficultyNumsLoaded(re:ResultEvent ):Void	{		// blende ausblenden		showBlind(false);		// datensaetze sind schwierigkeitsgrade		var difficultynums:RecordSet = RecordSet(re.result);		// schwierigkeitsgrade und deren anzahlen		myConfig.difficultynums = [];		// schwierigkeitsgrade speichern		for (var i:Number = 0; i < difficultynums.length; i++) {			// aktueller schwierigkeitsgrad			var difficulty:Object = difficultynums.getItemAt(i);			// aktuelle antwort und korrektheit			myConfig.difficultynums[difficulty.DID] = new EditorDifficulty(difficulty.DID, difficulty.NUMTASKS, difficulty.MAXTASKS);			// summe der fragen zum themengebiet			myConfig.sumtasks += difficulty.MAXTASKS;			// maximale anzahl an fragen, die im quiz gestellt werden darf			if (difficulty.MAXTASKS < myConfig.maxtasks["num"]) {				// anzahl speichern					myConfig.maxtasks["num"] = difficulty.MAXTASKS;				// entsprechenden schwierigkeitsgrad speichern				myConfig.maxtasks["difficulty"] = difficulty.DID;			}		}		// gesamte konfiguration anzeigen		showConfig();	}		public function onConnectorFault(fe:FaultEvent ):Void	{   		trace("There was a problem: " + fe.fault.faultstring);	   	trace("The faultcode is: " + fe.fault.faultcode);	 	trace("The detail: " + fe.fault.detail);	   	trace("The error class name is: " + fe.fault.type);	}		private function showConfig():Void	{		// userinfos		userinfo_txt.autoSize = "left";		userinfo_txt.text = "Zu diesem Themengebiet gibt es " + myConfig.sumtasks + " Fragen in der Datenbank.\n";		userinfo_txt.text += "Im Quiz dürfen maximal " + myConfig.maxtasks["num"] + " Fragen gestellt werden, da es\n";		userinfo_txt.text += "im Schwierigkeitsgrad \""  + myEditorUI.dropdowncontent.difficulties[myConfig.maxtasks["difficulty"] - 1] + "\" nicht mehr als " + myConfig.maxtasks["num"] + " aktive Fragen gibt!\n";		// lastupdate		lastupdate_txt.autoSize = "left";		lastupdate_txt.text = "Zuletzt gespeichert von:\n" + myConfig.nickname + "\nam: " + myConfig.lastupdate;		// anzahl fragen		numtasks_txt.text = String(myConfig.numtasks);		// maximale anzahl an fragen, die im quiz gestellt werden darf		maxtasks1_txt.autoSize = "left";		maxtasks1_txt.text = "(max. " + myConfig.maxtasks["num"] + ")";		// dauer des quiz		timequiz_txt.text = String(myConfig.timequiz);		// verteilung auf schwierigkeitsgrade		var difficultynums:Array = myConfig.difficultynums;		// schleife ueber alle schwierigkeitsgrade		for (var i:Number = 1; i <= difficultynums.length; i ++) {			// konfigurierte anzahl			this["numtasks" + i + "_txt"].text = difficultynums[i].numtasks;		}	}		private function saveConfig():Void	{		// summe der verteilung auf schwierigkeitsgrade testen		var correct:Boolean = testDifficultyNums();		// abbrechen wenn fehler gefunden		if (!correct) {			// meldung anzeigen			myEditorUI.showMessage(true, 9);			// abbrechen			return;		}		// anzahl fragen		myConfig.numtasks = Number(numtasks_txt.text);		// dauer des quiz		myConfig.timequiz = Number(timequiz_txt.text);		// schleife ueber alle schwierigkeitsgrade		for (var i:Number = 1; i <= myConfig.difficultynums.length; i ++) {			// aktueller schwierigkeitsgrad			var difficulty:EditorDifficulty = myConfig.difficultynums[i];			// eingegebene anzahl			difficulty.numtasks = Number(this["numtasks" + i + "_txt"].text);		}				// konfiguration speichern lassen		EditorConnector.sendConfig(myEditorUI.user.userid, myConfig, this, "onConfigSaved");		// loader anzeigen		myEditorUI.showLoader(true, "Konfiguration wird gespeichert");	}		public function onConfigSaved(re:ResultEvent ):Void	{		// loader ausblenden		myEditorUI.showLoader(false);		// meldung anzeigen, je nachdem ob erfolgreich oder nicht		if (re.result) {			// meldung			myEditorUI.showMessage(true, 10);		} else {			// fehlermeldung			myEditorUI.showMessage(true, 6);		}	}		private function onNumtasksChanged(field:TextField, input:Number ):Void	{		// maximalwert ueberwachen		if (Number(input) > myConfig.maxtasks["num"]) field.text = String(myConfig.maxtasks["num"]);		// abbrechen, wenn textfeld leer		if (isNaN(Number(input))) return;		// anzahl fragen eingegeben		if (field == numtasks_txt) {			// eingegebenen wert fuer anzahl fragen speichern			myConfig.numtasks = Number(field.text);			// gleichmaessige verteilung auf schwierigkeitsgrade vorschlagen			numtasks1_txt.text = String(Math.round(myConfig.numtasks / (myConfig.difficultynums.length - 1)));			numtasks2_txt.text = String(Math.round(myConfig.numtasks / (myConfig.difficultynums.length - 1)));			numtasks3_txt.text = String(myConfig.numtasks - (Number(numtasks1_txt.text) + Number(numtasks2_txt.text)));		}		// summe der verteilung auf schwierigkeitsgrade testen		var correct:Boolean = testDifficultyNums();		// auf fehler hinweisen		maxtasks2_txt.autoSize = "left";		maxtasks2_txt.text = (correct ? "" : "Die Summe muss " + myConfig.numtasks + " ergeben!");	}		private function testDifficultyNums():Boolean	{		// summe der verteilung auf schwierigkeitsgrade		var sum:Number = 0;		// schleife ueber schwierigkeitsgrade		for (var i : Number = 1; i <= 3; i++) {			// addieren			sum += Number(this["numtasks" + i + "_txt"].text);		}		// korrektheit zurueck geben		return (sum == myConfig.numtasks);	}		private function onTimequizChanged(field:TextField, input:Number ):Void	{		// positiven wert ueberwachen		if (Number(input) == 0 || isNaN(Number(input))) field.text = "1";	}		private function showBlind(bool:Boolean ):Void	{		// blende ein- / ausblenden		blind_mc._alpha = (bool ? 50 : 0);		// komplett als button behandeln		if (bool) {			blind_mc.onRelease = function() {};			blind_mc.useHandCursor = false;		} else {			delete(blind_mc.onRelease);			}	}	} /* end class QuizEditUI */