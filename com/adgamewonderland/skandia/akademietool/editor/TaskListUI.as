/*klasse:			TaskListUIautor: 			gerd jungbluth, adgamewonderlandemail:			gerd.jungbluth@adgamewonderland.dekunde:			skandiaerstellung: 		03.02.2005zuletzt bearbeitet:	05.04.2005durch			gjstatus:			final*/ import mx.rpc.ResultEvent;import mx.rpc.FaultEvent;import mx.remoting.RecordSet;import mx.utils.Iterator;import com.adgamewonderland.skandia.akademietool.editor.*;import com.adgamewonderland.skandia.akademietool.quiz.*;class com.adgamewonderland.skandia.akademietool.editor.TaskListUI extends MovieClip {		private static var LISTPOS:Object = {x : 198, y : 169};		private static var LISTDIMS:Object = {width : 580, height : 350};		private static var DROPDOWN_YDIFF:Number = 20;		private var _myTasks:RecordSet;		private var myTasksDisplay:RecordSet;		private var myEditorUI:EditorUI;		private var mySorters:Array;		private var myDropdowns:Array;		private var myTaskListItems:Array;		private var tasklist_mc:MovieClip;		private var mask_mc:MovieClip;		private var sorter1_mc:SorterUI;		private var sorter2_mc:SorterUI;		private var sorter3_mc:SorterUI;		private var sorter4_mc:SorterUI;		private var sorter5_mc:SorterUI;		private var scrollbar_mc:ScrollbarUI;		private var difficulty_mc:DropdownEditorUI;		private var topic_mc:DropdownEditorUI;		private var active_mc:DropdownEditorUI;		private var supplier_mc:DropdownEditorUI;		private var close_btn:Button;		private var reset_btn:Button;		private var numtasks_txt:TextField;		public function TaskListUI()	{		// alle aufgaben als recordset (READ ONLY)		_myTasks = new RecordSet();		// anzuzeigende aufgaben als recordset		myTasksDisplay = new RecordSet();		// editor		myEditorUI = EditorUI(_parent);		// alle sortierer		mySorters = [sorter1_mc, sorter2_mc, sorter3_mc, sorter4_mc, sorter5_mc];		// alle dropdowns		myDropdowns = [difficulty_mc, topic_mc, active_mc, supplier_mc];		// alle items in aktueller liste		myTaskListItems = [];		// abbrechen button		close_btn.onRelease = function() {			this._parent.myEditorUI.showWelcome();		};		// zurueck setzen button		reset_btn.onRelease = function() {			this._parent.resetList();		};		// scrollbar ausblenden		scrollbar_mc._visible = false;		// anzahl angezeigter aufgaben		numtasks_txt.autoSize = "left";	}		public function loadList():Void	{		// liste laden lassen		EditorConnector.loadTaskList(this, "onListLoaded");		// loader anzeigen		myEditorUI.showLoader(true, "Fragen werden geladen");	}		public function onListLoaded(re:ResultEvent ):Void	{		// loader ausblenden		myEditorUI.showLoader(false);		// alle aufgaben speichern		_myTasks = RecordSet(re.result);		// anzuzeigende aufgaben als recordset		myTasksDisplay = _myTasks;		// dropdowns inititialisieren		initDropdowns();		// depths inititialisieren		initDepths();		// liste nach anfaenglicher sortierung sortiert anzeigen		sortList("TID", "ASC");	}		public function onConnectorFault(fe:FaultEvent ):Void	{   		trace("There was a problem: " + fe.fault.faultstring);	   	trace("The faultcode is: " + fe.fault.faultcode);	 	trace("The detail: " + fe.fault.detail);	   	trace("The error class name is: " + fe.fault.type);	}		public function onSelectItem(tid:Number ):Void	{		// editieren		myEditorUI.showTaskEdit(tid);	}		public function sortList(item:String, order:String, dropdown:DropdownEditorUI ):Void	{		// sortierreihenfolge speichern		myEditorUI.listorder = {item : item, order : order};		// anzuzeigende aufgaben als recordset//		myTasksDisplay = _myTasks;		// optionen		var sortoptions:Number = Array.CASEINSENSITIVE | Array.NUMERIC;				// sortier-function		var sort:Function = function(item1:Object, item2:Object ):Number {			// spalte			var column:String = item.toUpperCase();			// numerisch / alphanumerisch			switch (!isNaN(Number(item1[column]))) {				// numerisch				case true :					// aufsteigend / absteigend					if (order == "ASC") {						return (Number(item1[column]) - Number(item2[column]));					} else {						return (Number(item2[column]) - Number(item1[column]));					}					break;				// alphanumerisch				case false :					// aufsteigend / absteigend					if (order == "ASC") {						return (item1[column] > item2[column] ? 1 : -1);					} else {						return (item2[column] > item1[column] ? 1 : -1);					}					break;			}		};		// sortieren		myTasksDisplay.sortItems(sort, sortoptions);				// anzeigen		showList(myTasksDisplay);	}		public function filterList(item:String, value, dropdown:DropdownEditorUI ):Void	{		// dropdowns resetten (bis auf das, nach dem gefiltert wird)		resetDropdowns(dropdown);		// filter-function		var filter:Function = function(record:Object, context):Boolean {			return (record[item.toUpperCase()] == context);		};		// filtern		myTasksDisplay = _myTasks.filter(filter, value);		// gespeicherte sortierreihenfolge		var listorder:Object = myEditorUI.listorder;		// liste sortiert anzeigen		sortList(listorder.item, listorder.order);	}		public function resetList():Void	{		// anzuzeigende aufgaben als recordset		myTasksDisplay = _myTasks;		// alle dropdowns resetten		resetDropdowns(null);		// liste nach anfaenglicher sortierung sortiert anzeigen		sortList("TID", "ASC");	}		private function showList(tasks:RecordSet ):Void	{		// bisherige liste loeschen		removeList();		// neue liste		this.createEmptyMovieClip("tasklist_mc", 1);		// positionieren		tasklist_mc._x = LISTPOS.x;		tasklist_mc._y = LISTPOS.y;		// iterator fuer alle items		var iterator:Iterator = tasks.getIterator();		// umschalter fuer wechselnden hintergrund		var back:Boolean = false;		// y-position des naechsten TaskListItems		var ypos:Number = 0;		// schleife ueber alle items		while (iterator.hasNext()) {			// tiefe fuer attachen			var depth:Number = tasklist_mc.getNextHighestDepth();			// aktuelles item aus record set			var item:Object = iterator.next();			// konstruktor fuer neues TaskListItem			var constructor:Object = {_y : ypos, _myItem : item, _myBack : back};			// attachen			var tasklistitem_mc:TaskListItemUI = TaskListItemUI(tasklist_mc.attachMovie("taskListItemUI", "tasklistitem" + depth + "_mc", depth, constructor));			// speichern			myTaskListItems[Number(item["TID"])] = tasklistitem_mc;			// hintergrund wechseln			back = !back;			// naechste y-position			ypos += tasklistitem_mc._height;		}		// scrollbar updaten		scrollbar_mc.setScrollTarget(tasklist_mc);		// maske anzeigen		showMask();		// anzahl angezeigter aufgaben		numtasks_txt.text = "Anzahl angezeigter Fragen: " + tasks.length;	}		private function removeList():Void	{		// alle items in aktueller liste loeschen		myTaskListItems.splice(0);		// liste von buehne loeschen		tasklist_mc.removeMovieClip();	}		private function showMask():Void	{		// neue maske		this.createEmptyMovieClip("mask_mc", 2);		// positionieren		mask_mc._x = LISTPOS.x;		mask_mc._y = LISTPOS.y;		// rechteck mit fuellung		mask_mc.beginFill(0xCCCCCC, 100);		// zeichnen		mask_mc.lineTo(LISTDIMS.width, 0);		mask_mc.lineTo(LISTDIMS.width, LISTDIMS.height);		mask_mc.lineTo(0, LISTDIMS.height);		mask_mc.lineTo(0, 0);		// als maske		tasklist_mc.setMask(mask_mc);	}		private function initDropdowns():Void	{		// inhalt fuer dropdowns		var content:DropdownContent = myEditorUI.dropdowncontent;		// themengebiet		topic_mc.initDropdownUI("Themengebiet", content.topics, content.topics, this, "filterList", DROPDOWN_YDIFF);		topic_mc.id = "topic";		// schwierigkeitsgrad		difficulty_mc.initDropdownUI("Schwierigkeit", content.difficulties, content.difficulties, this, "filterList", DROPDOWN_YDIFF);		difficulty_mc.id = "difficulty";		// aktivitaet		active_mc.initDropdownUI("Status", ["nicht aktiv", "aktiv"], content.activities, this, "filterList", DROPDOWN_YDIFF);		active_mc.id = "active";		// autor		supplier_mc.initDropdownUI("Autor", content.suppliers, content.suppliers, this, "filterList", DROPDOWN_YDIFF);		supplier_mc.id = "supplier";	}		private function resetDropdowns(exclude:DropdownEditorUI ):Void	{		// alle ausser uebergebenes resetten		for (var i:String in myDropdowns) if (myDropdowns[i] != exclude) myDropdowns[i].resetDropdownUI();		}		private function initDepths():Void	{		// tiefe		var depth:Number = 100;		// dropdowns nach vorne		for (var i:String in myDropdowns) myDropdowns[i].swapDepths(++depth);		// sortierer nach vorne		for (var j:String in mySorters) mySorters[j].swapDepths(++depth);	}	} /* end class TaskListUI */