/*klasse:			QuizUIautor: 			gerd jungbluth, adgamewonderlandemail:			gerd.jungbluth@adgamewonderland.dekunde:			skandiaerstellung: 		06.12.2004zuletzt bearbeitet:	01.03.2005durch			gjstatus:			final*/import com.adgamewonderland.skandia.akademietool.interfaces.*;import com.adgamewonderland.skandia.akademietool.loaders.*;import com.adgamewonderland.skandia.akademietool.quiz.*;class com.adgamewonderland.skandia.akademietool.quiz.QuizUI extends MovieClip implements IConfigConsumer, IContentConsumer, ITimeConsumer {	// Attributes		private static var LOADTIME:Number = 2000;		private var _myDataSource:String;		private var myConfigLoader:IConfigLoader;		private var myContentLoader:IContentLoader;		private var myQuizConfig:QuizConfig;		private var myTasks:Array;		private var myCurrentTask:Task;		private var myDifficulty:Difficulty;		private var myQuiztime:Quiztime;		private var mySummary:Summary;		private var myInterval:Number;		private var loader_mc:LoaderUI;	private var welcome_mc:WelcomeUI;		private var task_mc:TaskUI;		private var navigation_mc:NavigationUI;		private var metanavigation_mc:MetanavigationUI;		private var quiztime_mc:QuiztimeUI;		private var summary_mc:SummaryUI;		private var shutter_mc:ShutterUI;		// Operations		// konstruktor	public function QuizUI( )	{		// initialisieren		init();	}		public function init():Void	{		// hinspringen		gotoAndStop("frWelcome");		// je nach datenquelle loader instantiieren		switch (_myDataSource) {			// xml			case "XML" :				// loader fuer konfiguration				myConfigLoader = new XMLConfigLoader();				// loader fuer content				myContentLoader = new XMLContentLoader();							break;			// remoting			case "Remoting" :				// loader fuer konfiguration				myConfigLoader = new RemotingConfigLoader();				// loader fuer content				myContentLoader = new RemotingContentLoader();							break;			// swf studio			case "SWFStudio" :				// TODO: integration swfstudio (nur offline-version)							break;		}		// konfiguration		myQuizConfig = null;		// aufgaben		myTasks = [];		// aktuelle aufgabe		myCurrentTask = new Task(0, null);		// vom user gewaehlter schwierigkeitsgrad		myDifficulty = new Difficulty(0);		// dauer des quiz		myQuiztime = new Quiztime();		// zeitanzeige initialisieren		quiztime_mc.init();		// ergebnis zusammenfassung		mySummary = new Summary();				// blende ausblenden		shutter_mc.showShutter("hide", null, null, null);		// konfiguration laden		loadConfig();	}		private function loadConfig():Void	{		// ueber flashVars uebergebenes themengebiet nehmen		var topic = (_root.topic != undefined ? Number(_root.topic) : 1);		// beim loader fuer konfiguration registrieren		myConfigLoader.addConsumer(this);		// ladeparameter fuer konfiguration setzen		myConfigLoader.setLoadParams({topic : topic});		// konfiguration laden		myConfigLoader.loadConfig();		// loader einblenden		showLoader(true, "Aktuelle Einstellungen werden geladen");	}		public function setConfig(con:QuizConfig ):Void	{		// konfiguration speichern		myQuizConfig = con;				// schwierigkeitsstufen anzeigen		welcome_mc.showDifficulties(con.getDifficulties());		// zeit anzeigen		welcome_mc.showTime(con.getTime());				// loader fuer konfiguration loeschen		delete (myConfigLoader);		// loader ausblenden		showLoader(false);		// button beenden ausblenden		metanavigation_mc.showButton("finish", false);	}		public function initQuiz(againsttime:Boolean, difficulty:Number ):Void	{		// speichern, ob gegen die uhr gespielt wird		myQuiztime.status = againsttime;		// schwierigkeitsgrad speichern		myDifficulty.num = difficulty;		// content laden		loadContent(difficulty);	}		private function loadContent(difficulty:Number ):Void	{		// beim loader fuer content registrieren		myContentLoader.addConsumer(this);		// ladeparameter fuer content setzen		myContentLoader.setLoadParams({numtasks : myQuizConfig.getNumtasks(), difficulty : difficulty, topic : myQuizConfig.getTopic()});		// content laden		myContentLoader.loadContent();		// loader einblenden		showLoader(true, "Fragen werden geladen");	}		public function setContent(con:QuizContent ):Void	{		// aufgaben		var tasks:Array = con.getTasks();		// schleife ueber alle aufgaben		for (var i:String in tasks) {			// aktuelle aufgabenbschreibung			var task:QuizContentTask = tasks[i];			// neue aufgabe			myTasks.push(new Task(myTasks.length, task));		}				// loader fuer content loeschen		delete (myContentLoader);		// loader ausblenden		showLoader(false);				// quiz starten		startQuiz();	}		private function startQuiz():Void	{		// gegen die uhr?		if (myQuiztime.status == true) {			// bei uhr anmelden			myQuiztime.addConsumer(this);			// movieclip der uhr anmelden			myQuiztime.addUI(quiztime_mc);			// uhr starten (dauer in sekunden uebergeben)			myQuiztime.startTime(myQuizConfig.getTime() * 60);		}		// hinspringen		gotoAndStop("frQuiz");		// erste aufgabe anzeigen		changeTaskByDir(0);		// button beenden einblenden		metanavigation_mc.showButton("finish", true);	}		public function changeTaskByDir(dir:Number ):Void	{		// testen, ob grenzen erreicht		if (myCurrentTask.index + dir >= myQuizConfig.getNumtasks() || myCurrentTask.index + dir < 0) {			// regulaer beenden			finishQuiz(false);						return;		}		// entsprechende aufgabe		myCurrentTask = myTasks[myCurrentTask.index + dir];		// anzeigen		task_mc.showTask(myCurrentTask, myQuizConfig.getNumtasks());		// button zur naechsten frage einblenden		navigation_mc.showButton("next", true);		// navigation einblenden		showNavigation(true);		// uhr laufen lassen		myQuiztime.status = true;	}		public function finishTask():Void	{		// aufgabe loesen		var correct:Boolean = task_mc.solveTask();		// nicht korrekt		if (!correct) {			// navigation ausblenden			navigation_mc.showButton("next", false);			// uhr pausieren			myQuiztime.status = false;		}	}		public function showNavigation(bool:Boolean ):Void	{		// navigation ein- / ausblenden		navigation_mc._visible = bool;	}		public function onTimeEnded():Void	{		// regulaer beenden		finishQuiz(false);	}		public function finishQuiz(cancelled:Boolean ):Void	{		// aufgabe ausblenden		task_mc.hideTask();		// button zur naechsten frage ausblenden		navigation_mc.showButton("next", false);		// button beenden ausblenden		metanavigation_mc.showButton("finish", false);		// zeitmessung anhalten		myQuiztime.stopTime();		// ergebnis ausrechnen		mySummary.calculateResults(myTasks);		// hinspringen		gotoAndStop("frSummary");		// loader einblenden		showLoader(true, "Ihr Ergebnis wird berechnet");		// nach pause ergebnis anzeigen		myInterval = setInterval(this, "showSummary", LOADTIME);	}		private function showSummary():Void	{		// interval loeschen		clearInterval(myInterval);		// loader ausblenden		showLoader(false);		// blende ausblenden		shutter_mc.showShutter("hide", null, null, null);		// ergebnis anzeigen		summary_mc.showSummary(mySummary);	}		public function restartQuiz():Void	{		// blende einblenden, dann initialisieren		shutter_mc.showShutter("show", this, "init", null);	}		private function showLoader(bool:Boolean, tstr:String ):Void	{		// ein- / ausblenden		switch (bool) {			// einblenden			case true:				// einblenden				loader_mc._visible = true;				// als blind button behandeln				loader_mc.onRelease = function() {};				// ohne hand				loader_mc.useHandCursor = false;				// resetten				loader_mc.showProgress(0);				// text anzeigen				loader_mc.text = tstr;				// startzeit				var start:Number = getTimer();				// laden verfolgen				onEnterFrame = function() {					// prozent vergangene ladezeit					var percent:Number = Math.round((getTimer() - start) / LOADTIME * 100);					// anzeigen					loader_mc.showProgress(percent);					// resetten, wenn ende erreicht					if (percent >= 100) start = getTimer();				}								break;			// ausblenden			case false:				// ausblenden				loader_mc._visible = false;				// verfolgen beenden				delete(onEnterFrame);								break;		}	}	} /* end class QuizUI */