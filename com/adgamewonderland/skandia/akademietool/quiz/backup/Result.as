/*klasse:			Resultautor: 			gerd jungbluth, adgame-wonderlandemail:			gerd.jungbluth@adgame-wonderland.dekunde:			skandiaerstellung: 		08.12.2004zuletzt bearbeitet:	10.12.2004durch			gjstatus:			in bearbeitung*/import com.adgamewonderland.skandia.akademietool.quiz.*;class com.adgamewonderland.skandia.akademietool.quiz.Result {	// Attributes		private var myDifficulty:String;		private var myNumTasksTotal:Number;		private var myNumTasksCorrect:Number;		private var myNumTasksWrong:Number;		private var myRate:Number;		// Operations		// konstruktor	public function Result(dstr:String )	{		// schwierigkeitsgrad, zu der das ergebnis gehoert		myDifficulty = dstr;		// anzahl der aufgaben dieses schwierigkeitsgrads		myNumTasksTotal = 0;		// anzahl korrekt geloester aufgaben dieses schwierigkeitsgrads		myNumTasksCorrect = 0;		// anzahl falsch geloester aufgaben dieses schwierigkeitsgrads		myNumTasksWrong = 0;		// quote zwischen korrekt geloesten und gesamtzahl		myRate = 0;	}		public function get difficulty():String	{		// schwierigkeitsgrad, zu der das ergebnis gehoert		return (myDifficulty);	}		public function set numtaskstotal(num:Number ):Void	{		// anzahl der aufgaben dieses schwierigkeitsgrads		myNumTasksTotal = num;	}		public function get numtaskstotal():Number	{		// anzahl der aufgaben dieses schwierigkeitsgrads		return (myNumTasksTotal);	}		public function set numtaskscorrect(num:Number ):Void	{		// anzahl korrekt geloester aufgaben dieses schwierigkeitsgrads		myNumTasksCorrect = num;	}		public function get numtaskscorrect():Number	{		// anzahl korrekt geloester aufgaben dieses schwierigkeitsgrads		return (myNumTasksCorrect);	}		public function set numtaskswrong(num:Number ):Void	{		// anzahl falsch geloester aufgaben dieses schwierigkeitsgrads		myNumTasksWrong = num;	}		public function get numtaskswrong():Number	{		// anzahl falsch geloester aufgaben dieses schwierigkeitsgrads		return (myNumTasksWrong);	}		public function get rate():Number	{		// quote zwischen korrekt geloesten und gesamtzahl neu berechnen		return (myRate = calculateRate());	}		private function calculateRate():Number	{		// nur, wenn positive anzahl aufgaben		if (numtaskstotal <= 0) return null;		// quotient geloester zu gesamtzahl		return (numtaskscorrect / numtaskstotal);	}	} /* end class Result */