/*klasse:			ExplanationUIautor: 			gerd jungbluth, adgamewonderlandemail:			gerd.jungbluth@adgamewonderland.dekunde:			skandiaerstellung: 		08.12.2004zuletzt bearbeitet:	09.02.2005durch			gjstatus:			final*/import com.adgamewonderland.skandia.akademietool.quiz.*;class com.adgamewonderland.skandia.akademietool.quiz.ExplanationUI extends MovieClip {	// Attributes		private static var COLORS:Array = [0x000000, 0x0033AB];		private static var YDIFFS:Object = {question:20, answer:0, caption:8, explanation:25};		private static var HEIGHT:Number = 530;		private var myTaskUI:TaskUI;		private var question_txt:TextField;		private var checked1_txt:TextField;		private var checked2_txt:TextField;		private var checked3_txt:TextField;		private var checked4_txt:TextField;		private var letter1_txt:TextField;		private var letter2_txt:TextField;		private var letter3_txt:TextField;		private var letter4_txt:TextField;		private var answer1_txt:TextField;		private var answer2_txt:TextField;		private var answer3_txt:TextField;		private var answer4_txt:TextField;		private var explanation_txt:TextField;		private var caption_mc:MovieClip;		private var scrollbar_mc:ScrollbarUI;		private var mask_mc:MovieClip;		// Operations		// konstruktor	public function ExplanationUI()	{		// task		myTaskUI = TaskUI(_parent);		// frage linksbuendig		question_txt.autoSize = "left";		// vom user ausgewaehlt linksbuendig		checked1_txt.autoSize = checked2_txt.autoSize = checked3_txt.autoSize = checked4_txt.autoSize = "left";		// buchstabe der frage linksbuendig		letter1_txt.autoSize = letter2_txt.autoSize = letter3_txt.autoSize = letter4_txt.autoSize = "left";		// antwort linksbuendig		answer1_txt.autoSize = answer2_txt.autoSize = answer3_txt.autoSize = answer4_txt.autoSize = "left";		// erklaerung linksbuendig		explanation_txt.autoSize = "left";		// ausblenden		hideExplanation();	}		public function showExplanation(tobj:Task ):Void	{		// y-position des naechsten textfelds		var ypos:Number = question_txt._y;		// frage anzeigen		question_txt.text = tobj.question.text;		// y-position fuer erste antwort		ypos += (question_txt._height + YDIFFS["question"]);		// antworten		var answers:Array = tobj.answers;		// counter fuer antworten		var count:Number = -1;		// antworten anzeigen		while (answers[++count] instanceof Answer) {			// feld vom user ausgewaehlt			var checkedfield:TextField = this["checked" + (count + 1) + "_txt"];			// x, wenn vom user ausgewaehlt			checkedfield.text = "(" + (answers[count].checked ? "X" : "  ") + ")";			// feld buchstabe			var letterfield:TextField = this["letter" + (count + 1) + "_txt"];			// buchstabe			letterfield.text = String.fromCharCode(65 + count) + ".";			// feld antwort			var answerfield:TextField = this["answer" + (count + 1) + "_txt"];			// antwort			answerfield.text = answers[count].text;			// formatierung je nachdem, ob korrekte antwort oder nicht			var format:TextFormat = new TextFormat();			// farbe 			format.color = COLORS[answers[count].correct == false ? 0 : 1];			// bold			format.bold = answers[count].correct;			// formatieren			checkedfield.setTextFormat(0, format);			checkedfield.setTextFormat(checkedfield.length - 1, format);			letterfield.setTextFormat(format);			answerfield.setTextFormat(format);			// positionieren			checkedfield._y = letterfield._y = answerfield._y = ypos;			// y-position fuer naechste antwort			ypos += (answerfield._height + YDIFFS["answer"]);		}		// y-position fuer legende		ypos += YDIFFS["caption"];		// legende positionieren		caption_mc._y = ypos;		// y-position fuer erklaerung		ypos += YDIFFS["explanation"];		// erklaerung anzeigen, wenn nicht leer		if (tobj.explanation.text != null) explanation_txt.text = "Erklärung:\n" + tobj.explanation.text;		// begriff "Erklärung" bold		var format:TextFormat = new TextFormat();		format.bold = true;		explanation_txt.setTextFormat(0, 9, format);		// positionieren		explanation_txt._y = ypos;		// scrollbar fuer erklaerung ein- / ausblenden		showScrollbar(explanation_txt, HEIGHT - ypos);		// abbildung einblenden		myTaskUI.setImage(tobj.explanation.image);				// einblenden		this._visible = true;	}		public function hideExplanation():Void	{		// ausblenden		this._visible = false;	}		private function showScrollbar(field:TextField, height:Number ):Void	{		// position maske		mask_mc._x = field._x;		mask_mc._y = field._y;		// hoehe der maske		mask_mc._height = height;				// hoehe scrollbar		scrollbar_mc.setScrollerSize(height);		// ziel fuer scrollbar		scrollbar_mc.setScrollTarget(field);	}	} /* end class ExplanationUI */