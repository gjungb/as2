import com.adgamewonderland.ricola.sudoku.connectors.SudokuConnector;import com.adgamewonderland.aldi.sudoku.beans.Grid;import com.adgamewonderland.aldi.sudoku.beans.Solution;import com.adgamewonderland.ricola.sudoku.beans.DragController;import com.adgamewonderland.ricola.sudoku.ui.SupplyUI;import mx.rpc.ResultEvent;import com.adgamewonderland.aldi.sudoku.beans.Field;import com.adgamewonderland.aldi.sudoku.beans.Content;import com.adgamewonderland.agw.util.Timer;import com.adgamewonderland.aldi.sudoku.ui.ClockUI;/** * @author gerd */class com.adgamewonderland.ricola.sudoku.ui.GameUI extends com.adgamewonderland.aldi.sudoku.ui.GameUI {	private var penaltytime:Timer;	private var penalty_mc:ClockUI;	private var supply_mc:SupplyUI;	public function GameUI() {		super();		// container fuer draggen		DragController.getInstance().setContainer(this);	}	public function init():Void	{		super.init();		// strafzeit		penaltytime = new Timer();		// strafzeit resetten		penalty_mc.showTime(penaltytime);		// supply initialisieren		supply_mc.init();	}	public function startGame():Void	{		// initialisieren		init();		// als listener registrieren		Grid.getInstance().addListener(this);		// grid einblenden		grid_mc._visible = true;		// contentcounter einblenden		contentcounter_mc._visible = true;		// controller einblenden		controller_mc._visible = true;		// difficultychooser deaktivieren		difficultychooser_mc.showBlind(true);		// resultlist ausblenden		resultlist_mc._visible = false;		if (true) {			// solution laden			SudokuConnector.loadSudoku(difficultychooser_mc.getDifficulty(), this, "onSolutionLoaded");		} else {			// DEBUG: default solution ohne remoting			var solution:Solution = new Solution();			// grid			var grid:Grid = Grid.getInstance();			// grid initialisieren			if (grid.initGrid(solution)) {				// fields anzeigen lassen				grid_mc.initGridUI(grid);			} else {				// fehlgeschlagen				trace("konnte grid nicht initialisieren");			}			// zeit initialisieren			initTime();			// supply aktivieren			supply_mc.setEnabled(true);		}	}	public function onSolutionLoaded(re:ResultEvent ):Void	{		super.onSolutionLoaded(re);		// supply aktivieren		supply_mc.setEnabled(true);	}	public function pauseGame(bool:Boolean ):Void	{		super.pauseGame(bool);		// supply de- / aktivieren		supply_mc.setEnabled(!bool);	}	public function stopGame(bool:Boolean ):Void	{		// uhr stoppen		gametime.status = false;		// supply deaktivieren		supply_mc.setEnabled(false);		// je nach parameter		if (bool) {			// gesamtzeit aus spielzeit und strafzeit			var time:Number = gametime.getSeconds()["gone"] + penaltytime.getSeconds()["gone"];			// zur highscoreliste			_root.highscore_mc.showGameover(Grid.getInstance().getSolution().getDifficulty(), time);			// weiter auf hauptzeitleiste			_root.gotoAndStop("frGameover");		} else {			// zur anleitung			_root.gotoAndStop("frSplash");		}		// resetten		resetGame();	}	public function onError():Void	{		// strafzeit abziehen		penaltytime.addTime(TIMEERROR);	}	public function onGridChanged(field:Field ):Void	{		// testen, ob fehler		if (field.getContent().getId() != Content.CONTENT_EMPTY && !field.getSolved()) {			// zeitstrafe			onError();		}	}	private function initTime():Void	{		super.initTime();		// movieclip der strafzeit anmelden		penaltytime.addUI(penalty_mc);		// strafzeit in sekunden uebergeben		penaltytime.startTime(TIMEGAME);	}}