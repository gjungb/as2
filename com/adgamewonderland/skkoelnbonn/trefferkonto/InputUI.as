/*klasse:			InputUIautor: 			gerd jungbluth, adgame-wonderlandemail:			gerd.jungbluth@adgame-wonderland.dekunde:			sk koelnbonnerstellung: 		06.01.2005zuletzt bearbeitet:	18.04.2005durch			gjstatus:			in bearbeitung*/import com.adgamewonderland.agw.XMLConnectorimport com.adgamewonderland.skkoelnbonn.trefferkonto.*class com.adgamewonderland.skkoelnbonn.trefferkonto.InputUI extends MovieClip {	// Attributes		private static var INVESTMENTS:Array = [500, 2500, 5000, 7500, 10000, 15000, 20000];		private static var INVESTMENT:Number = 5000;		private static var SCORE_MAX:Number = 70;		private static var SCORE_MIN:Number = 26;		private static var AVERAGE_SOCCER:Number = 49;		private static var AVERAGE_BASKET:Number = 2998;		private var myInput:Input;		private var myInputHistoric:Array;		private var myMode:String;		private var myXMLConnector:XMLConnector;		private var myLso:SharedObject;		private var investment_mc:DropdownUI;	 	private var team1_mc:TeamSoccerUI;	 	private var team2_mc:TeamBasketUI;	 	private var hint_mc:MessageUI;	 	private var historic_mc:DropdownUI;		private var investment_txt:TextField;		private var calculate_btn:Button;		private var mode_txt:TextField;		private var headline1_txt:TextField;		private var headline2_txt:TextField;		// Operations		public function InputUI()	{		// eingabedaten		myInput = new Input();		// historische eingabedaten (je saison)		myInputHistoric = [];		// modus (edit / view)		setMode("edit");				// gespeicherte anlage		myLso = SharedObject.getLocal("trefferkonto");		// gespeichert / nicht gespeichert		if (myLso.data.investment) {			// gespiecherte anlage			setInvestment(myLso.data.investment);		} else {			// default anlage			setInvestment(INVESTMENT);		}		// eingabe auf ziffern beschraenken		investment_txt.restrict = "0-9";		// eingabe auf fuenf zeichen beschraenken		investment_txt.maxChars = 5;		// eingabe fuer anlage		investment_txt.onSetFocus = function() {			// umformatieren			this._parent.onEnterInvestment();			// auf enter reagieren			this.keyListener = {};			this.keyListener.onKeyDown = function () {				// textfeld verlassen				if (Key.isDown(Key.ENTER)) Selection.setFocus(_parent);			};			// taste beobachten			Key.addListener(this.keyListener);		};		investment_txt.onKillFocus = function() {			// wert uebergeben			this._parent.setInvestment(Number(this.text));			// nicht mehr auf enter reagieren			Key.removeListener(this.keyListener);		};		// button berechnen (18.04.2005)		calculate_btn.onRelease = function() {			// formatierter wert aus textfeld			var vstr:String = this._parent.investment_txt.text;			// "." loeschen			var vnum:Number = Number(vstr.split(".").join(""));			// wert uebergeben			this._parent.setInvestment(vnum);		};				// headlines linksbuendig		headline1_txt.autoSize = headline2_txt.autoSize = "left";				// xml connector		myXMLConnector = new XMLConnector(this, "skkoelnbonn_trefferkonto.xml");		// xml laden		myXMLConnector.loadXML("parseHistoric");	}		public function parseHistoric(xmlobj:XML ):Void	{		// infos ueber historische daten		var historyXML = xmlobj.firstChild;		// namen fuer dropdown		var names:Array = [];		// werte fuer dropdown		var values:Array = [];		// counter		var i:Number = -1;		// aktuelle saison		var seasonXML:XMLNode;		// schleife ueber alle saisons		while (seasonXML = historyXML.childNodes[++i]) {			// in object umformen			var season:Object = myXMLConnector.parseXMLNode(seasonXML);			// und speichern			myInputHistoric.push(season);			// fuer dropdown nur jahre bis 2002 nehmen			if (Number(season.year) <= 2002) {				// name fuer dropdown				names.push("Saison " + season.year + " / " + (Number(season.year) + 1));				// wert fuer dropdown				values.push(i);			}		}		// dropdown saisons befuellen		historic_mc.initDropdownUI("Bitte auswählen", names, values, this, "selectSeason", -15);		// aktuelle saison auswaehlen		selectSeason(1);		// dropdown investment befuellen		initInvestment();	}		public function selectSeason(num:Number ):Void	{		// ausgewaehlte saison und folgende saison		var seasons:Array = [myInputHistoric[num], myInputHistoric[num - 1]];		// schleife ueber beide saisons		for (var i:Number = 1; i <= 2; i ++) {			// aktuelle saison			var season:Object = seasons[i - 1];			// tore			myInput.setScore(i, Number(season.score1));			// koerbe			myInput.setScore(i + 2, Number(season.score2));			// aufstieg / klassenerhalt			myInput.setSpecial(i, Boolean(season.special1));			// finale			myInput.setSpecial(i + 2, Boolean(season.special2));			// headline			this["headline" + i + "_txt"].text = "Saison " + season.year + " / " + (Number(season.year) + 1);			// aktuelle saison abfangen			if (season == undefined) headline2_txt.text = "Saison 2005 / 2006";		}		// wenn nicht aktuelle saison, modus umschalten		if (num > 0) setMode("view");		// fussball anzeigen		team1_mc.showInput(myInput);		// baskteball anzeigen		team2_mc.showInput(myInput);	}		public function onEnterInvestment():Void	{		// unformatiert anzeigen		investment_txt.text = String(myInput.investment);	}		public function setInvestment(val:Number ):Void	{		// warnung		var warning:Number = null;		// testen, ob gueltig		if (isNaN(val)) val = myInput.investment;		// testen, ob zu wenig		if (val < INVESTMENTS[0]) {			// minimum			val = INVESTMENTS[0];			// meldung			warning = 1;		}		// testen, ob zu viel		if (val > INVESTMENTS[INVESTMENTS.length - 1]) {			// minimum			val = INVESTMENTS[INVESTMENTS.length - 1];			// meldung			warning = 2;		}		// speichern		myInput.investment = val;				// lokal speichern		myLso.data.investment = val;		myLso.flush();				// ergebnis berechnen		_parent.calculateResult(myInput);		// nicht im dropdown anzeigen//		investment_mc.showName(false);		// im textfeld anzeigen		investment_txt.text = getFormattedValue(val);		// ggf. warnung anzeigen		if (warning != null) showWarning(warning);	}		public function setMode(val:String ):Void	{		// abbrechen, wenn bereits in diesem modus//		if (myMode == val) return;		// modus speichern		myMode = val;		// je nach modus		switch (myMode) {			// editieren der daten			case "edit" :				// headlines				headline1_txt.text = "Saison 2004 / 2005";				headline2_txt.text = "Saison 2005 / 2006";				// modus anzeigen				mode_txt.text = "Ihre Prognose:";				// dropdown saisons resetten				historic_mc.resetDropdown();							break;			// ansehen historischer daten			case "view" :				// modus anzeigen				mode_txt.text = "Historie:";							break;		}	}		public function setScore(num:Number, val:Number, edit:Boolean ):Void	{		// modus aendern		if (edit == true) setMode("edit");		// 		// nachricht// 		var message:Number = null;// 		// warnung// 		var warning:Number = null;// 		// testen, ob in aktueller saison genuegend hohe werte// 		if (num == 1 && val < Number(myInputHistoric[0].score1)) {// 			// meldung// 			message = 5;// 			// minimum nehmen// 			myInput.setScore(num, myInputHistoric[0].score1);// 			// eingabe resetten// 			team1_mc.showInput(myInput);// 		}// 		// koerbe// 		if (num == 3 && val < Number(myInputHistoric[0].score2)) {// 			// meldung// 			message = 6;// 			// minimum nehmen// 			myInput.setScore(num, myInputHistoric[0].score2);// 			// eingabe resetten// 			team2_mc.showInput(myInput);// 		}// 		// meldung, wenn viele || wenige || durchschnitt tore// 		if (num == 1 || num == 2) {// 			// viele// 			if (val > SCORE_MAX) warning = 3;// 			// durchschnitt// 			if (val == AVERAGE_SOCCER) warning = 5;// 		}// 		// meldung, wenn wenige tore in 2005 / 2006// 		if (num == 2) {// 			// wenige// 			if (val > 0 && val < SCORE_MIN) warning = 4;// 		}// 		// meldung, wenn durchschnitt koerbe// 		if (num == 3 || num == 4) {// 			// durchschnitt// 			if (val == AVERAGE_BASKET) warning = 6;// 		}				// speichern		myInput.setScore(num, val);		// ergebnis berechnen		_parent.calculateResult(myInput);		// testen, ob alle werte mit aktueller saison uebereinstimmen		checkCurrentSeason();		// 		// ggf. nachricht anzeigen// 		if (message != null) _parent.message_mc.showMessage(message);// 		// ggf. warnung anzeigen// 		if (warning != null) showWarning(warning);	}		public function setSpecial(num:Number, val:Boolean, edit:Boolean ):Void	{		// modus aendern		if (edit == true) setMode("edit");		// speichern		myInput.setSpecial(num, val);		// ergebnis berechnen		_parent.calculateResult(myInput);		// testen, ob alle werte mit aktueller saison uebereinstimmen		checkCurrentSeason();	}		private function checkCurrentSeason():Void	{		// testen, ob alle angezeigten werte mit xml fuer aktuelle saisons uebereinstimmen		var identical:Boolean = true;		// schleife ueber zwei saisons		for (var i:Number = 1; i <= 2; i++) {			// schleife ueber alle historischen ergebnisse			for (var j:String in myInputHistoric) {				// ergebnisse				var season:Object = myInputHistoric[j];				// jahr				var year:Number = season.year;				// weiter, wenn nicht gesuchtes jahr				if (year != 2003 + i) continue;								// punktzahlen				if (season.score1 != myInput.getScore(i) || season.score2 != myInput.getScore(i + 2)) identical = false;				// specials				if (season.special1 != Number(myInput.getSpecial(i)) || season.special2 != Number(myInput.getSpecial(i + 2))) identical = false;			}		}		// uebereinstimmend / nicht uebereinstimmend		if (identical) {			// anzeigen			mode_txt.text = "Aktuell:";		} else {			// modus			setMode(myMode);		}	}		private function initInvestment():Void	{		// namen fuer dropdown		var names:Array = [];		// schleife ueber alle werte		for (var i:Number = 0; i < INVESTMENTS.length; i ++) {			// waehrung formatieren			names.push(getFormattedValue(INVESTMENTS[i]) + ",- EUR");		}		// dropdown investment befuellen//		investment_mc.initDropdownUI("", names, INVESTMENTS, this, "setInvestment", 20);	}		private function getFormattedValue(num:Number ):String	{		// in string umwandeln		var newval:String = String(num);		// vorkomma und nachkomma trennen		var values:Array = newval.split(".");		// formatieren		var formval:String = "";		// rueckwaertsschleife ueber vorkomma, um tausenderpunkte einuzfuegen		var dotcount:Number = 0;		for (var i:Number = values[0].length - 1; i >= 0; i --) {			// aktuelle ziffer anhaengen			formval = values[0].substr(i, 1) + formval;			// alle 3 ziffern ein punkt (ausser ganz links)			if (++dotcount % 3 == 0 && i > 0) formval = "." + formval;		}		// zurueck geben		return (formval);	}		private function showWarning(id:Number ):Void	{		// weiter reichen		_parent.message_mc.showWarning(id);	}} /* end class InputUI */