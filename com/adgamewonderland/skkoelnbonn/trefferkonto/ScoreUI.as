/*klasse:			ScoreUIautor: 			gerd jungbluth, adgame-wonderlandemail:			gerd.jungbluth@adgame-wonderland.dekunde:			sk koelnbonnerstellung: 		06.01.2005zuletzt bearbeitet:	10.01.2005durch			gjstatus:			in bearbeitung*/import com.adgamewonderland.skkoelnbonn.trefferkonto.*class com.adgamewonderland.skkoelnbonn.trefferkonto.ScoreUI extends MovieClip {	// Attributes		private var _myName:String;		private var myValue:Number;		private var name_txt:TextField;		private var value_txt:TextField;		private var arrowup_mc:ValueArrowUI;		private var arrowdown_mc:ValueArrowUI;		// Operations		public  function ScoreUI()	{		// namen anzeigen		name_txt.autoSize = "left";		name_txt.text = _myName;		// aktueller wert		myValue = 0;		// eingabe auf ziffern beschraenken		value_txt.restrict = "0-9";		// eingabe auf vier zeichen beschraenken		value_txt.maxChars = 4;		// eingabe ueberwachen		value_txt.onChanged = function () {this._parent.editValue()};		// eingabe betreten		value_txt.onSetFocus = function () {			// auf enter reagieren			this.keyListener = {};			this.keyListener.onKeyDown = function () {				// textfeld verlassen				if (Key.isDown(Key.ENTER)) Selection.setFocus(_parent);			};			// taste beobachten			Key.addListener(this.keyListener);		}		// eingabe verlassen		value_txt.onKillFocus = function () {			// wert uebergeben			this._parent.setValue(Number(this.text));			// nicht mehr auf enter reagieren			Key.removeListener(this.keyListener);		};				// wertaenderungen ueberwachen		this.watch("myValue", onValueChanged);	}		public function setDiff(val:Number ):Void	{		// an pfeile weiter geben		arrowup_mc.value = val;		arrowdown_mc.value = val;	}		public function editValue():Void	{		// modus aendern		this._parent._parent.setMode("edit");	}		public  function setValue(val:Number, edit:Boolean ):Void	{		// aktuellen wert setzen		myValue = val;		// neuen wert uebergeben		_parent.onUpdateScore(this, myValue, edit);	}		public  function changeValue(diff:Number, edit:Boolean ):Void	{		// aktuellen wert aendern		myValue += diff;		// neuen wert uebergeben		_parent.onUpdateScore(this, myValue, edit);	}		private function onValueChanged(prop:String, oldval:Number, newval:Number ):Number	{		// testen, ob wert ausserhalb erlaubter grenzen		if (newval < 0) newval = oldval;		// testen, ob gueltig		if (isNaN(newval)) newval = 0;		// anzeigen		value_txt.text = String(newval);		// neuen wert speichern		return (newval);	}} /* end class ScoreUI */