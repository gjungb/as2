/* 
 * Generated by ASDT 
*/ 

import mx.rpc.ResultEvent;
import mx.rpc.FaultEvent;

import com.meychi.*;

import com.adgamewonderland.agw.*;

import com.adgamewonderland.agw.net.*;

import com.adgamewonderland.digitalbanal.elfmeterduell.ui.InputUI;

import com.adgamewonderland.digitalbanal.elfmeterduell.beans.*;

import com.adgamewonderland.digitalbanal.elfmeterduell.connectors.*;

class com.adgamewonderland.digitalbanal.elfmeterduell.ui.LoginUI extends InputUI {
	
	private var lso:SharedObject;
	
	private var email_txt:TextField;
	
	private var password_txt:TextField;
	
	private var login_btn:Button;
	
	private var message_txt:TextField;
	
	public function LoginUI() {
		// lso zum speichern / laden der email
		lso = SharedObject.getLocal("elfmeterduell");
		// nachricht fehlerhaftes login ausblenden
		showMessage(false);
	}
	
	public function init():Void
	{
	 	// button login
	 	login_btn.onRelease = function () {
	 		this._parent.sendLogin();
	 	};
	 	// key login
	 	var klsnr:Object = {_parent : this};
	 	klsnr.onKeyUp = function () {
	 		if (Key.getCode() == Key.ENTER) this._parent.sendLogin();
	 	}
	 	Key.addListener(klsnr);
		// gespeicherte email laden
		email_txt.text = (lso.data.email != undefined ? lso.data.email : email_txt.text);
		// ggf. email aus herausforderungs- / siegerehrungs mail
		if (_root.email != "null" && _root.email != undefined) {
			// anzeigen
			email_txt.text = _root.email;
			// nicht auswaehlbar
			email_txt.selectable = false;
			// nicht aenderbar
			email_txt.type = "dynamic";
		}
		// tabsetter
		var index:Number = 0;
		email_txt.tabIndex = ++index;
		password_txt.tabIndex = ++index;
	}
	
	public function sendLogin():Void
	{
		// fehler ausblenden
		showErrors([]);
		// nachricht fehlerhaftes login ausblenden
		showMessage(false);
		// validieren, ob 1. korrekte email adresse, 2. nicht leeres passwort
		var errors:Array = (new Formprocessor()).checkForm([3, "email", email_txt.text, 1, "password", password_txt.text]);
		// testen, ob fehler gefunden
		if (errors.length != 0) {
			// fehler anzeigen
			showErrors(errors);
			// abbrechen
			return;
		}
		// meldung anzeigen
//		trace("Daten werden gesendet!");
		// button ausblenden
		login_btn._visible = false;
		// userdaten laden lassen
		ChallengeC.loginUser(email_txt.text.toLowerCase(), password_txt.text, this, "onUserLoaded");
	}
	
	public function onUserLoaded(re:ResultEvent ):Void
	{
		// testen, ob login erfolgreich
		if (re.result.status != 1) {
			// meldung anzeigen
//			trace("Login fehlgeschlagen!");
			// nachricht fehlerhaftes login einblenden
			showMessage(true);
			// button einblenden
			login_btn._visible = true;
			// abbrechen
			return;	
		}
		// meldung anzeigen
//		trace("Login erfolgreich!");
		// neuer user
		var user:User = User(RemotingBeanCaster.getCastedInstance(new User(), re.result));
		// email lokal speichern
		lso.data.email = user.getEmail();
		// speichern
		lso.flush();
		// email loeschen
		_root.email = null;
		// einloggen
		GameController.getInstance().loginUser(user, false);
	}
	
	private function showMessage(bool:Boolean ):Void
	{
		// nachricht fehlerhaftes login ein- / ausblenden
		message_txt._visible = bool;
	}
}