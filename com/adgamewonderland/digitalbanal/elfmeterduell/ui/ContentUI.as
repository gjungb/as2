/* 
 * Generated by ASDT 
*/ 

import mx.rpc.ResultEvent;
import mx.rpc.FaultEvent;

import com.adgamewonderland.digitalbanal.elfmeterduell.beans.*;

import com.adgamewonderland.digitalbanal.elfmeterduell.connectors.*;

import com.adgamewonderland.digitalbanal.elfmeterduell.ui.*;

class com.adgamewonderland.digitalbanal.elfmeterduell.ui.ContentUI extends MovieClip {
	
	private var mailid:String;
	
	private var email:String;
	
	public function ContentUI() {
		// testen, ob id und email uebergeben
		if (_root.id != null && _root.email != null) {
			// spiel laden
			loadGame(_root.id, _root.email);
		}
	}
	
	public static function getContentUI():ContentUI
	{
		return (_root.content_mc);
	}
	
	public function loadGame(mailid:String, email:String ):Void
	{
		// mailid speichern
		setMailid(mailid);
		// email speichern
		setEmail(email);
		// spiel laden
		ChallengeC.loadGame(mailid, this, "onGameLoaded");
	}
	
	public function onGameLoaded(re:ResultEvent ):Void
	{
		// spiel casten
		var game:GameImpl = GameController.getInstance().getCastedGame(re.result);
//		trace(game.getMailid());
//		trace(_root.id);
//		trace(game.getMailid() == _root.id);
		// abbrechen, wenn nicht korrektes game
//		if (game.getMailid() != _root.id) return;
//		trace("status: " + game.getStatus());
		// ja nach status
		switch (game.getStatus()) {
			// herausforderer fertig => gegner soll spielen
			case Game.STATUS_CHALLENGER_DONE :
				// details gegner
				var opponentdetails:GameDetail = game.getDetail(GameDetail.MODE_OPPONENT);
				// testen, ob uebergebene email zum gegner passt
				if (opponentdetails.getOpponent() == getEmail()) {
					// status updaten
					game.setStatus(Game.STATUS_OPPONENT_DONE);
					// navigation ausblenden
					NavigationUI.getNavigationUI().showNavi(false);
					// pruefen, ob user schon eingeloggt
					if (getEmail() == GameController.getInstance().getUser().getEmail()) {
						// soccer starten
						SoccerController.getInstance().startSoccer(SoccerController.MODE_OFFENSE);
					} else {
						// hinweis anzeigen
						NoticeUI.getNoticeUI().showNotice(NoticeUI.NOTICE_LOGIN, true);
						// login fuer gegner erzwingen
						CardUI.getCardUI().showLogin();
					}
					
				} else {
					// leeres game
					game = new GameImpl();
				}
				
				break;	
			// gegner fertig => herausforderer soll siegerehrung ansehen
			case Game.STATUS_OPPONENT_DONE :
				// details herausforderer
				var challengerdetails:GameDetail = game.getDetail(GameDetail.MODE_CHALLENGER);
				// testen, ob uebergebene email zum herausforderder passt
				if (challengerdetails.getUser().getEmail() == getEmail()) {
					// status updaten
					game.setStatus(Game.STATUS_CHALLENGER_AWARDED);
					// navigation ausblenden
					NavigationUI.getNavigationUI().showNavi(false);
					// pruefen, ob user schon eingeloggt
					if (getEmail() == GameController.getInstance().getUser().getEmail()) {
						// auswertung anzeigen
						CardUI.getCardUI().showScore();
					} else {
						// hinweis anzeigen
						NoticeUI.getNoticeUI().showNotice(NoticeUI.NOTICE_LOGIN, true);
						// login fuer herausforderer erzwingen
						CardUI.getCardUI().showLogin();
					}
					
				} else {
					// leeres game
					game = new GameImpl();
				}
			
				break;
			
			
		}
		// uebergebene loeschen
		_root.id = null;
//		_root.email = null;
		// spiel speichern
		GameController.getInstance().setGame(game);
	}
	
	public function getMailid():String {
		return mailid;
	}

	public function setMailid(mailid:String):Void {
		this.mailid = mailid;
	}

	public function getEmail():String {
		return email;
	}

	public function setEmail(email:String):Void {
		this.email = email;
	}

}