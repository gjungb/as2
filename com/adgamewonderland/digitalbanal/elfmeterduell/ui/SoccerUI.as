/* 
 * Generated by ASDT 
*/ 

import com.adgamewonderland.digitalbanal.elfmeterduell.beans.*;

import com.adgamewonderland.digitalbanal.elfmeterduell.ui.*;

class com.adgamewonderland.digitalbanal.elfmeterduell.ui.SoccerUI extends MovieClip implements ISoccerListener, ICardaniListener, IUserListener {
	
	private var ballani_mc:BallaniUI;
	
	private var displayani_mc:DisplayaniUI;
	
	private var keeper_mc:MovieClip;
	
	private var offensebuttons:Array;
	
	private var defensebuttons:Array;
	
	private var offense1_btn:MoveButton;
	
	private var offense2_btn:MoveButton;
	
	private var offense3_btn:MoveButton;
	
	private var offense4_btn:MoveButton;
	
	private var offense5_btn:MoveButton;
	
	private var offense6_btn:MoveButton;
	
	private var defense1_btn:MoveButton;
	
	private var defense2_btn:MoveButton;
	
	private var defense3_btn:MoveButton;
	
	private var defense4_btn:MoveButton;
	
	private var defense5_btn:MoveButton;
	
	private var defense6_btn:MoveButton;
	
	public function SoccerUI() {
		// offense buttons
		this.offensebuttons = new Array(offense1_btn, offense2_btn, offense3_btn, offense4_btn, offense5_btn, offense6_btn);
		// defense buttons
		this.defensebuttons = new Array(defense1_btn, defense2_btn, defense3_btn, defense4_btn, defense5_btn, defense6_btn);
		// initialisieren
		init();
		
		// als listener registrieren
		SoccerController.getInstance().addListener(this);
		
		// als listener registrieren
		GameController.getInstance().addListener(this);
	}
	
	public static function getSoccerUI():SoccerUI
	{
		return (_root.content_mc.soccer_mc);
	}
	
	public function init():Void
	{
		// ballani ausblenden
		ballani_mc._visible = false;
		// keeper ausblenden
		keeper_mc._visible = false;
		// buttons ausblenden
		hideButtons(SoccerController.MODE_OFFENSE);
		hideButtons(SoccerController.MODE_DEFENSE);
	}
	
	public function onSoccerStarted(mode:Number ):Void
	{
		// beim start
		if (mode == SoccerController.MODE_OFFENSE) {
			// als listener registrieren
			CardaniUI.getCardaniUI().addListener(this);
			// gelbe karte ausblenden
			CardaniUI.getCardaniUI().showCardani(false);
			// navigation ausblenden
			NavigationUI.getNavigationUI().showNavi(false);
		} else {
			// interstitial abspielen
			InterstitialsUI.getInterstitialsUI().showInterstitial(mode);
		}
	}
	
	public function onCardaniFinished():Void
	{
		// als listener deregistrieren
		CardaniUI.getCardaniUI().removeListener(this);
		// interstitial abspielen
		InterstitialsUI.getInterstitialsUI().showInterstitial(SoccerController.getInstance().getMode());
	}
	
	public function startSoccerUI():Void
	{
		// mode
		var mode:Number = SoccerController.getInstance().getMode();
		
		// ball ein- / ausblenden
		ballani_mc._visible = (mode == SoccerController.MODE_OFFENSE);
		// ball animieren
		ballani_mc.showBallani(true);
		// keeper ein- / ausblenden
		showKeeper(mode == SoccerController.MODE_DEFENSE);

		// buttons initialisieren
		initButtons(mode);
		
		// displayani animieren
		displayani_mc.showDisplayani(true, 200);
	}
	
	public function onSoccerStopped(mode:Number ):Void
	{
		// initialisieren
		init();
		// displayani animieren
		displayani_mc.showDisplayani(false, 500);
		// naechster mode
		switch (mode) {
			// offense
			case SoccerController.MODE_OFFENSE :
				// nach pause umschalten auf defense
				var interval:Number;
				// funktion
				var doStart:Function = function():Void {
					// defense starten
					SoccerController.getInstance().startSoccer(SoccerController.MODE_DEFENSE);
					// interval loeschen
					clearInterval(interval);
				};
				// umschalten
				interval = setInterval(doStart, 1000);
				
				break;	
				
			// defense
			case SoccerController.MODE_DEFENSE :
				// nach pause spiel beenden
				var interval:Number;
				// funktion
				var doStop:Function = function(mc:MovieClip ):Void {
					// spiel beenden
					SoccerController.getInstance().stopSoccer();
					// keeper ausblenden
					mc.showKeeper(false);
					// interval loeschen
					clearInterval(interval);
				};
				// umschalten
				interval = setInterval(doStop, 1000, this);
			
				break;	
		}
	}
	
	public function onSetMove(count:Number, move:Number ):Void
	{
	}
	
	public function showKeeper(bool:Boolean ):Void
	{
		// keeper ein- / ausblenden
		keeper_mc._visible = bool;
	}
	
	public function resetSoccerUI():Void
	{
		// displayani animieren
		displayani_mc.showDisplayani(false, 500);
		// initialisieren
		init();
	}
	
	public function onUserLogin(user:User ):Void
	{
	}
	
	public function onUserLogout(user:User ):Void
	{
		// resetten
		resetSoccerUI();
	}
	
	public function onUserUpdate(user:User ):Void
	{
	}
	
	private function hideButtons(mode:Number ):Void
	{
		// buttons
		var buttons:Array;
		// je nach mode
		switch (mode) {
			// offense
			case SoccerController.MODE_OFFENSE :
				// buttons angriff
				buttons = offensebuttons;
				
				break;	
			// defense
			case SoccerController.MODE_DEFENSE :
				// buttons verteidigung
				buttons = defensebuttons;
			
				break;	
		}
		// schleife ueber buttons
		for (var i : Number = 0; i < buttons.length; i++) {
			// ausblenden
			buttons[i]._visible = false;
		}
	}
	
	private function initButtons(mode:Number ):Void
	{
		// buttons ausblenden
		hideButtons(SoccerController.MODE_OFFENSE);
		hideButtons(SoccerController.MODE_DEFENSE);
		// buttons
		var buttons:Array;
		// je nach mode
		switch (mode) {
			// offense
			case SoccerController.MODE_OFFENSE :
				// buttons angriff
				buttons = offensebuttons;
				
				break;	
			// defense
			case SoccerController.MODE_DEFENSE :
				// buttons verteidigung
				buttons = defensebuttons;
			
				break;	
		}
		// schleife ueber buttons
		for (var i : Number = 0; i < buttons.length; i++) {
			// einblenden
			buttons[i]._visible = true;
			// id setzen
			buttons[i].setId(i + 1);
		}
	}
}