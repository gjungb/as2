/* 
 * Generated by ASDT 
*/ 
 
import mx.remoting.debug.NetDebug;
import mx.rpc.ResultEvent;
import mx.rpc.FaultEvent;

import com.adgamewonderland.digitalbanal.elfmeterduell.beans.*;

import com.adgamewonderland.digitalbanal.elfmeterduell.connectors.*;

class com.adgamewonderland.digitalbanal.elfmeterduell.ui.HighscoreUI extends MovieClip {
	
	private static var NUMUSERS:Number = 20;
	
	private var rankstart:Number;
	
	private var list_mc:MovieClip;
	
	private var rank_txt:TextField;
	
	private var prev_btn:Button;
	
	private var next_btn:Button;
	
	public function HighscoreUI() {
		// buttons ausblenden
		showButtons(false, false);
		// buttons initialisieren
		prev_btn.onRelease = function ():Void {
			this._parent.swapPage(-1);
		};
		next_btn.onRelease = function ():Void {
			this._parent.swapPage(1);
		};
		// platzierung linksbuendig
		rank_txt.autoSize = "left";
		// platzierung laden
		loadRank();
	}
	
	private function loadRank():Void
	{
		// eingeloggter user
		var user:User = GameController.getInstance().getUser();
		// testen, ob eingeloggt
		if (user.getUserID() != null) {
			// platzierung laden lassen
			ChallengeC.loadRank(user.getUserID(), this, "onRankLoaded");
		} else {
			// keine platzierung
			rank_txt.text = "-";
			// erste platzierung soll ganz oben angezeigt werden
			setRankstart(1);
			// highscoreliste laden
			loadHighscorelist();
		}
	}
	
	public function onRankLoaded(re:ResultEvent ):Void
	{
		// platzierung
		var rank:Number = Number(re.result);
		// anzeigen
		rank_txt.text = String(rank);
		// auf welche seite der highscoreliste steht der user mit dieser platzierung
		var page:Number = Math.ceil(rank / NUMUSERS);
		// welche platzierung soll ganz oben angezeigt werden
		setRankstart((page - 1) * NUMUSERS + 1);
		// highscoreliste laden
		loadHighscorelist();
	}
	
	private function loadHighscorelist():Void
	{
		// buttons ausblenden
		showButtons(false, false);
		// liste laden lassen
		ChallengeC.loadHighscorelist(getRankstart() - 1, NUMUSERS, this, "onHighscorelistLoaded");
	}
	
	public function onHighscorelistLoaded(re:ResultEvent ):Void
	{
		// anzeigen
		showHighscore(re.result);
	}
	
	private function showHighscore(highscore:Array ):Void
	{
		// dummy
		var dummy:MovieClip = list_mc.dummy_mc;
		// hoehe des dummy
		var ydiff = dummy._height - 2;
		
		// schleife ueber alle user
		for (var i = 1; i <= highscore.length; i ++) {
 			// server liefert einen datensatz zuviel, wenn naechste seite verfuegbar
 			if (i > NUMUSERS) break;
			// aktueller user
			var user:Object = highscore[i - 1];
			// constructor
			var constructor:Object = {};
			// position
			constructor._y = dummy._y + (i - 1) * ydiff;
			// score
			constructor._myScore = user.score;
			// rank
			constructor._myRank = getRankstart() + (i - 1) + ".";
			// nickname
			constructor._myNickname = user.nickname;
			// goals
			constructor._myGoals = user.goals;
			// email (fuer herausforderung)
			constructor._myEmail = user.email;
			// dummy duplizieren
			var pos_mc:MovieClip = dummy.duplicateMovieClip("pos" + i + "_mc", i + 1, constructor);
		}
		// dummy unsichtbar
		dummy._visible = false;
		// buttons einblenden
		showButtons(true, highscore.length > NUMUSERS);
	}
	
	private function clearList():Void
	{
		// zaehler
		var i = 0;
		// schleife ueber alle angezeigten user
		while (list_mc["pos" + (++i) + "_mc"] instanceof MovieClip) list_mc["pos" + i + "_mc"].removeMovieClip();
	}
	
	private function showButtons(inout:Boolean, nextpage:Boolean ):Void
	{
		// ein- / ausblenden
		switch (inout) {
			// einblenden
			case true :
				// vorherige seite
				prev_btn._visible = (getRankstart() > 1);
				// naechste seite
				next_btn._visible = nextpage;
			
				break;	
			// ausblenden
			case false :
				prev_btn._visible = false;
				next_btn._visible = false;
				break;
			
		}
	}
	
	private function swapPage(dir:Number ):Void
	{
		// liste loeschen
		clearList();
		// welche platzierung soll ganz oben angezeigt werden
		setRankstart(getRankstart() + dir * NUMUSERS);
		// highscoreliste laden
		loadHighscorelist();
	}
	
	public function getRankstart():Number {
		return rankstart;
	}

	public function setRankstart(rankstart:Number):Void {
		this.rankstart = rankstart;
	}

}