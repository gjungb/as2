/* 
 * Generated by ASDT 
*/ 

import com.adgamewonderland.agw.util.*;

import com.adgamewonderland.digitalbanal.elfmeterduell.beans.*;

import com.adgamewonderland.digitalbanal.elfmeterduell.ui.*;

class com.adgamewonderland.digitalbanal.elfmeterduell.ui.NoticeUI extends MovieClip implements ISoccerListener, IUserListener {
	
	public static var NOTICE_OFFENSE:String = "frOffense";
	
	public static var NOTICE_DEFENSE:String = "frDefense";
	
	public static var NOTICE_LOGIN:String = "frLogin";
	
	public static var NOTICE_CHALLENGE:String = "frChallenge";
	
	public static var NOTICE_RESULT:String = "frResult";
	
	private var reset_btn:Button;
	
	private var notice:String;
	
	private var active:Boolean;
	
	public function NoticeUI() {
		// aktiv oder nicht
		this.active = false;
		// als listener registrieren
		SoccerController.getInstance().addListener(this);
		
		// als listener registrieren
		GameController.getInstance().addListener(this);
	}
	
	public static function getNoticeUI():NoticeUI
	{
		return (_root.content_mc.notice_mc);
	}
	
	public function onSoccerStarted(mode:Number ):Void
	{
		// notice einblenden
		showNotice((mode == SoccerController.MODE_OFFENSE ? NOTICE_OFFENSE : NOTICE_DEFENSE), true);
	}
	
	public function onSoccerStopped(mode:Number ):Void
	{
		// notice ausblenden
		showNotice((mode == SoccerController.MODE_OFFENSE ? NOTICE_OFFENSE : NOTICE_DEFENSE), false);
	}
	
	public function onSetMove(count:Number, move:Number ):Void
	{
	}
	
	public function showNotice(notice:String, inout:Boolean ):Void
	{
		// speichern
		setNotice(notice);
		setActive(inout);
		// frame
		var frame:String = notice + (inout ? "In" : "Out");
		// abspielen verfolgen
		var follower:TimelineFollower = new TimelineFollower(this, "onNoticeFinished", notice);
		// abspielen verfolgen
		onEnterFrame = function() {
			follower.followTimeline();
		}
		// abspielen
		gotoAndPlay(frame);
	}
	
	public function onNoticeFinished(notice:String ):Void
	{
		// reset button
		if (reset_btn instanceof Button) {
			reset_btn.onRelease = function():Void {
				this._parent.onReset();
			};	
		}
	}
	
	public function onReset():Void
	{	
		// ausblenden
		showNotice(getNotice(), false);
		// je nach aktueller phase
		switch (getNotice()) {
			// soccer
			case NOTICE_OFFENSE :
			case NOTICE_DEFENSE :
				// soccer beenden
				SoccerUI.getSoccerUI().resetSoccerUI();
			// result
			case NOTICE_RESULT :
				// result beenden
				ResultUI.getResultUI().resetResultUI();
				
			// alle
			default :
				// game resetten
				GameController.getInstance().resetGame();
				// navigation einblenden
				NavigationUI.getNavigationUI().showNavi(true);
				// anleitung einblenden
				CardUI.getCardUI().showInstructions();
		}
	}
	
	public function onUserLogin(user:User ):Void
	{
	}
	
	public function onUserLogout(user:User ):Void
	{
		// ausblenden
		if (getActive()) showNotice(getNotice(), false);
	}
	
	public function onUserUpdate(user:User ):Void
	{
	}
	
	public function getNotice():String {
		return notice;
	}

	public function setNotice(notice:String):Void {
		this.notice = notice;
	}

	public function getActive():Boolean {
		return active;
	}

	public function setActive(active:Boolean):Void {
		this.active = active;
	}

}