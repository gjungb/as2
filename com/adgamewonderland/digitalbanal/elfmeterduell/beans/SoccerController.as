/* 
 * Generated by ASDT 
*/ 

import de.kruesch.event.*;

import com.adgamewonderland.digitalbanal.elfmeterduell.beans.*;

import com.adgamewonderland.digitalbanal.elfmeterduell.ui.*;

class com.adgamewonderland.digitalbanal.elfmeterduell.beans.SoccerController {
	
	public static var MODE_OFFENSE:Number = 1;
	
	public static var MODE_DEFENSE:Number = 2;
	
	public static var MOVES:Number = 5;
	
	private static var _instance:SoccerController;
	
	private static var EVENT_SOCCERSTARTED:String = "onSoccerStarted";
	
	private static var EVENT_SOCCERSTOPPED:String = "onSoccerStopped";
	
	private static var EVENT_MOVESET:String = "onSetMove";
	
	private var _event:EventBroadcaster;
	
	private var mode:Number;
	
	private var offense:Array;
	
	private var defense:Array;
	
	public static function getInstance():SoccerController {
		if (_instance == null)
			_instance = new SoccerController();
		return _instance;
	}
	
	public function startSoccer(mode:Number ):Void
	{
		// mode speichern
		setMode(mode);
		// je nach mode
		switch (mode) {
			// offense
			case MODE_OFFENSE :
				// spielzuege angriff
				setOffense(new Array());
			
				break;	
			// defense
			case MODE_DEFENSE :
				// spielzuege verteidigung
				setDefense(new Array());
			
				break;	
		}
		// listener informieren
		_event.send(EVENT_SOCCERSTARTED, mode);
	}
	
	public function setMove(move:Number ):Void
	{
		// je nach mode
		switch (getMode()) {
			// offense
			case MODE_OFFENSE :
				// spielzug angriff
				getOffense().push(move);
				// listener informieren
				_event.send(EVENT_MOVESET, getOffense().length, move);
				// testen, ob fertig
				if (getOffense().length == MOVES) {
					// listener informieren
					_event.send(EVENT_SOCCERSTOPPED, getMode());
				}
			
				break;	
			// defense
			case MODE_DEFENSE :
				// spielzuege verteidigung
				getDefense().push(move);
				// listener informieren
				_event.send(EVENT_MOVESET, getDefense().length, move);
				// testen, ob fertig
				if (getDefense().length == MOVES) {
					// listener informieren
					_event.send(EVENT_SOCCERSTOPPED, getMode());
				}
			
				break;	
		}
	}
	
	public function stopSoccer():Void
	{
		// game controller informieren
		GameController.getInstance().onSoccerFinished();
	}
	
	public function getMode():Number {
		return mode;
	}

	public function setMode(mode:Number):Void {
		this.mode = mode;
	}

	public function getDefense():Array {
		return defense;
	}

	public function setDefense(defense:Array):Void {
		this.defense = defense;
	}

	public function getOffense():Array {
		return offense;
	}

	public function setOffense(offense:Array):Void {
		this.offense = offense;
	}
	
	public function addListener(l ):Void
	{
		_event.addListener(l);
	}
	
	public function removeListener(l ):Void
	{
		_event.removeListener(l);
	}
	
	private function SoccerController() {
		_event = new EventBroadcaster();
		this.mode = MODE_OFFENSE;
		this.offense = new Array();
		this.defense = new Array();
	}

}