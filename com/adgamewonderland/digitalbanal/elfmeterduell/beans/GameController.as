/* 
 * Generated by ASDT 
*/ 

import mx.rpc.ResultEvent;
import mx.rpc.FaultEvent;

import de.kruesch.event.*;

import com.adgamewonderland.agw.net.*;

import com.adgamewonderland.digitalbanal.elfmeterduell.beans.*;

import com.adgamewonderland.digitalbanal.elfmeterduell.connectors.*;

import com.adgamewonderland.digitalbanal.elfmeterduell.ui.*;

class com.adgamewonderland.digitalbanal.elfmeterduell.beans.GameController {
	
	private static var _instance:GameController;
	
	private static var EVENT_USERLOGGEDIN:String = "onUserLogin";
	
	private static var EVENT_USERLOGGEDOUT:String = "onUserLogout";
	
	private static var EVENT_USERUPDATED:String = "onUserUpdate";
	
	private var _event:EventBroadcaster;
	
	private var user:User;
	
	private var opponent:User;
	
	private var game:GameImpl;
	
	public static function getInstance():GameController {
		if (_instance == null)
			_instance = new GameController();
		return _instance;
	}
	
	public function loginUser(user:User, registered:Boolean ):Void
	{
		// user speichern
		setUser(user);
		// testen, ob herausforderung vorhanden
		if (getGame() != null) {
			// notice ausblenden
			NoticeUI.getNoticeUI().showNotice(NoticeUI.NOTICE_LOGIN, false);
			// je nach status
			switch (getGame().getStatus()) {
				// herausforderer gespielt
				case Game.STATUS_CHALLENGER_DONE :
					// herausforderung senden
					sendChallenge();
				
					break;	
				// gegner soll spielen
				case Game.STATUS_OPPONENT_DONE :
					// soccer starten
					SoccerController.getInstance().startSoccer(SoccerController.MODE_OFFENSE);
				
					break;
				// herausforderer ergebnis
				case Game.STATUS_CHALLENGER_AWARDED :
					// auswertung anzeigen
					CardUI.getCardUI().showScore();
				
					break;
				// keine ahnung
				default :
					if (registered) {
						// begruessung anzeigen
						CardUI.getCardUI().showRegistered();
					} else {
						// userdata anzeigen
						CardUI.getCardUI().showUserdata();
					}
			}
		// keine herausforderung	
		} else {
			if (registered) {
				// begruessung anzeigen
				CardUI.getCardUI().showRegistered();
			} else {
				// userdata anzeigen
				CardUI.getCardUI().showUserdata();
			}
		}
		// listener informieren
		_event.send(EVENT_USERLOGGEDIN, getUser());
	}
	
	public function logoutUser():Void
	{
		// listener informieren
		_event.send(EVENT_USERLOGGEDOUT, getUser());
		// user resetten
		setUser(new User());
		// game resetten
		resetGame();
	}
	
	public function updateUser(user:User ):Void
	{
		// user speichern
		setUser(user);
		// listener informieren
		_event.send(EVENT_USERUPDATED, getUser());
	}
	
	public function resetGame():Void
	{
		// game loeschen
		setGame(null);
	}
	
	public function onSoccerFinished():Void
	{
		// testen, ob herausforderung noch nicht vorhanden
		if (getGame() == null) {
			// challenge einblenden
			CardUI.getCardUI().showChallenge();
		} else {
			// spiel updaten
			updateChallenge();
		}
	}
	
	public function startChallenge(email:String ):Void
	{
		// gegner speichern
		getOpponent().setEmail(email);
		// neues game
		setGame(new GameImpl());
		// status setzen
		getGame().setStatus(Game.STATUS_CHALLENGER_DONE);
		
		// testen, ob herausforderer eingeloggt
		switch (isUserLoggedIn()) {
			// eingeloggt
			case true :
				// herausforderung senden
				sendChallenge();
				
				break;
			// nicht eingeloggt
			case false :
				// login anzeigen
				CardUI.getCardUI().showLogin();
				// notice anzeigen
				NoticeUI.getNoticeUI().showNotice(NoticeUI.NOTICE_LOGIN, true);
				
				break;
		}
	}
	
	public function isUserLoggedIn():Boolean
	{
		// eingeloggt oder nicht
		return (getUser().getUserID() != null);
	}
	
	public function getCastedGame(res:Object ):GameImpl
	{
		// details
		var details:Array = res.gameDetails;
		// durchschleifen
		for (var k:Number = 0; k < details.length; k++) {
			// casten
			var detail:GameDetail = GameDetail(RemotingBeanCaster.getCastedInstance(new GameDetail(), details[k]));
			// user casten
			detail.setUser(User(RemotingBeanCaster.getCastedInstance(new User(), detail["user"])));
			// speichern
			details[k] = detail;
		}
		// casten
		var game:GameImpl = GameImpl(RemotingBeanCaster.getCastedInstance(new GameImpl(), res));
		// details speichern
		game.setGameDetails(details);
		// sortieren
		game.getGameDetails().sortOn("mode");
		// zurueck geben
		return game;
	}
	
	public function addListener(l ):Void
	{
		_event.addListener(l);
	}
	
	public function removeListener(l ):Void
	{
		_event.removeListener(l);
	}

	public function getUser():User {
		return user;
	}

	public function setUser(user:User):Void {
		this.user = user;
	}

	public function getOpponent():User {
		return opponent;
	}

	public function setOpponent(opponent:User):Void {
		this.opponent = opponent;
	}

	public function getGame():GameImpl {
		return game;
	}

	public function setGame(game:GameImpl):Void {
		this.game = game;
	}
	
	private function GameController() {
		user = new User();
		opponent = new User();
		game = null;
		_event = new EventBroadcaster();
	}
	
	private function sendChallenge():Void
	{
		// erfolg anzeigen
		CardUI.getCardUI().showChallenged();
		// navigation einblenden
		NavigationUI.getNavigationUI().showNavi(true);
		
		// spieldetails herausforderer
		var detail:GameDetail = new GameDetail(GameDetail.MODE_CHALLENGER);
		// herausforderer
		detail.setUser(getUser());
		// angriff mit zufallsschuss daneben
		var offense:Array = addRandomMiss(SoccerController.getInstance().getOffense());
		// als string
		detail.setOffense(offense.join(""));
		// verteidigung als string
		detail.setDefense(SoccerController.getInstance().getDefense().join(""));
		
		// ohne callback senden
		ChallengeC.saveGame(detail, getOpponent().getEmail(), this, null);
		// spiel loeschen
		setGame(null);
	}
	
	private function addRandomMiss(offense:Array ):Array
	{
		// ein schuss daneben
		var missed:Boolean = (Math.random() > 0.95);
		// austauschen
		if (missed) {
			// per zufall
			offense[Math.floor(Math.random() * offense.length)] = 0;	
		}
		// zurueck geben
		return offense;
	}
	
	private function updateChallenge():Void
	{
		// spieldetails gegner
		var detail:GameDetail = getGame().getDetail(GameDetail.MODE_OPPONENT);
		// gegner
		detail.setUser(getUser());
		// angriff mit zufallsschuss daneben
		var offense:Array = addRandomMiss(SoccerController.getInstance().getOffense());
		// als string
		detail.setOffense(offense.join(""));
		// verteidigung als string
		detail.setDefense(SoccerController.getInstance().getDefense().join(""));
		// senden
		ChallengeC.updateGame(getGame().getID(), detail, this, "onChallengeUpdated");
	}
	
	public function onChallengeUpdated(re:ResultEvent ):Void
	{
		// spiel casten
		var game:GameImpl = GameController.getInstance().getCastedGame(re.result);
		// spiel speichern
		setGame(game);
		// auswertung anzeigen
		CardUI.getCardUI().showScore();
	}

}