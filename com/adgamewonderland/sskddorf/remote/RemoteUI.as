/* 
 * Generated by ASDT 
*/ 

import com.adgamewonderland.agw.util.XMLConnector;

import com.adgamewonderland.sskddorf.remote.*;

class com.adgamewonderland.sskddorf.remote.RemoteUI extends MovieClip {
	
	private static var XML_FILE:String = "ssk_ddorf_fernbedienung.xml";
	
	private var myConfig:Config;
	
	private var myItems:Array;
	
	private var myItemUIs:Array;
	
	private var mySpecials:Array;
	
	private var mySpecialUIs:Array;
	
	private var myXMLConnector:XMLConnector;
	
	private var controller_mc:ControllerUI;
	
	private var display_mc:DisplayUI;
	
	public function RemoteUI()
	{
		// konfiguration
		myConfig = new Config();
		// informationen ueber anzuzeigende items (wird aus xml geladen)
		myItems = new Array();
		// anzeige der items
		myItemUIs = new Array();
		// informationen ueber anzuzeigende specials (wird aus xml geladen)
		mySpecials = new Array();
		// anzeige der specials
		mySpecialUIs = new Array();
		// xml connector
		myXMLConnector = new XMLConnector(this, XML_FILE);
		// XML laden
		loadXML();
	}
	
	public function registerItemUI(id:Number, mc:ItemUI ):Void
	{
		// speichern
		myItemUIs[id] = mc;
	}
	
	public function registerSpecialUI(id:Number, mc:SpecialUI ):Void
	{
		// speichern
		mySpecialUIs[id] = mc;
	}
	
	public function getConfig():Config
	{
		// konfiguration zurueck geben
		return myConfig;	
	}
	
	public function getDisplay():DisplayUI
	{
		// display zurueck geben
		return display_mc;	
	}
	
	public function openLink(path:String ):Void
	{
		// url
		var url:String = myConfig.url + path;
		// frame
		var frame:String = myConfig.frame;
		// oeffnen
		getURL(url, frame);
	}
	
	private function loadXML():Void
	{
		// konfiguration laden
		myXMLConnector.loadXML("onXMLLoaded");
	}
	
	private function onXMLLoaded(xmlobj:XML ):Void
	{
		// xml parsen
		parseXML(xmlobj);
		// items auf fernbedienung anzeigen
		initItemUIs();
		// specials auf fernbedienung anzeigen
		initSpecialUIs();
	}
	
	private function parseXML(xmlobj:XML ):Void
	{
		// root
		var rootXML:XMLNode = xmlobj.firstChild;
		
		// 1. konfiguration einlesen
		var configXML:XMLNode = rootXML.firstChild;
		// url
		myConfig.url = configXML.childNodes[0].firstChild.nodeValue;
		// frame
		myConfig.frame = configXML.childNodes[1].firstChild.nodeValue;
		// displaytime
		myConfig.displaytime = Number(configXML.childNodes[2].firstChild.nodeValue);
		// konfiguration loeschen
		configXML.removeNode();
		
		// 2. items einlesen
		var itemsXML:XMLNode = rootXML.firstChild;
		// aktuelles item als xml
		var itemXML:XMLNode;
		// item als object
		var item:Item;
		// schleife ueber items als xml
		for (var i:String in itemsXML.childNodes) {
			// aktuelles item als xml
			itemXML = itemsXML.childNodes[i];
			// item als object
			item = new Item();
			// id
			item.id = Number(itemXML.attributes["id"]);
			// label
			item.label = itemXML.childNodes[0].firstChild.nodeValue;
			// description
			item.description = itemXML.childNodes[1].firstChild.nodeValue;
			// path
			item.path = itemXML.childNodes[2].firstChild.nodeValue;
			// item speichern
			myItems[item.id] = item;
		}
		// items loeschen
		itemsXML.removeNode();
		
		// 3. specials einlesen
		var specialsXML:XMLNode = rootXML.firstChild;
		// aktuelles special als xml
		var specialXML:XMLNode;
		// special als object
		var special:Special;
		// schleife ueber specials als xml
		for (var i:String in specialsXML.childNodes) {
			// aktuelles special als xml
			specialXML = specialsXML.childNodes[i];
			// item als object
			special = new Special();
			// id
			special.id = Number(specialXML.attributes["id"]);
			// label
			special.label = specialXML.childNodes[0].firstChild.nodeValue;
			// align
			special.align = specialXML.childNodes[1].firstChild.nodeValue;
			// description
			special.description = specialXML.childNodes[2].firstChild.nodeValue;
			// path
			special.path = specialXML.childNodes[3].firstChild.nodeValue;
			// frame
			special.frame = specialXML.childNodes[4].firstChild.nodeValue;
			// special speichern
			mySpecials[special.id] = special;
		}
		// specials loeschen
		specialsXML.removeNode();
		
		// 4. controllers einlesen
		var controllersXML:XMLNode = rootXML.firstChild;
		// aktueller controller als xml
		var controllerXML:XMLNode;
		// descriptions als array
		var descriptions:Array = new Array();
		// schleife ueber controllers als xml
		for (var i:String in controllersXML.childNodes) {
			// aktuelles controller als xml
			controllerXML = controllersXML.childNodes[i];
			// id
			var id:Number = Number(controllerXML.attributes["id"]);
			// description
			var description:String = controllerXML.childNodes[0].firstChild.nodeValue;
			// description speichern
			descriptions[id] = description;
		}
		// an controller uebergeben
		controller_mc.descriptions = descriptions;
		// controllers loeschen
		controllersXML.removeNode();
	}
	
	private function initItemUIs():Void
	{
		// aktuelles item
		var item:Item;
		// anzeige des items
		var mc:ItemUI;
		// schleife ueber alle items
		for (var i:String in myItems) {
			// aktuelles item
			item = myItems[i];
			// anzeige des items
			mc = myItemUIs[item.id];
			// initialisieren
			mc.init(item);
		}
	}
	
	private function initSpecialUIs():Void
	{
		// aktuelles special
		var special:Special;
		// anzeige des specials
		var mc:SpecialUI;
		// schleife ueber alle specials
		for (var i:String in mySpecials) {
			// aktuelles special
			special = mySpecials[i];
			// anzeige des specials
			mc = mySpecialUIs[special.id];
			// initialisieren
			mc.init(special);
		}
	}
	
}