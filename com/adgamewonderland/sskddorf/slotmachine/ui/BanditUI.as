/* * Generated by ASDT*//*klasse:			BanditUIautor: 			gerd jungbluth, adgame-wonderlandemail:			gerd.jungbluth@adgame-wonderland.dekunde:			ssk ddorferstellung: 		09.09.2005zuletzt bearbeitet:	14.09.2005durch			gjstatus:			in bearbeitung*/import mx.rpc.ResultEvent;import mx.rpc.FaultEvent;import com.adgamewonderland.agw.net.RemotingBeanCaster;import com.adgamewonderland.sskddorf.slotmachine.beans.*;import com.adgamewonderland.sskddorf.slotmachine.connectors.*;import com.adgamewonderland.sskddorf.slotmachine.controllers.*;import com.adgamewonderland.sskddorf.slotmachine.ui.*;class com.adgamewonderland.sskddorf.slotmachine.ui.BanditUI extends MovieClip {	private static var TIME_MIN:Number = 5000;	private static var TIME_RAND:Number = 1500;	private var mySlotmachineUI:SlotmachineUI;	private var myBarrels:Array;	private var hasPrize:Boolean;	private var myTimeStart:Number;	private var myInterval:Number;	private var mySound:Sound;	private var barrel1_mc:BarrelUI;	private var barrel2_mc:BarrelUI;	private var barrel3_mc:BarrelUI;	private var send_btn:Button;	private var result_mc:ResultUI;	public function BanditUI()	{		// hauptzeitleiste		mySlotmachineUI = SlotmachineUI(_parent);		// rollen auf der buehne		myBarrels = [barrel1_mc, barrel2_mc, barrel3_mc];		// ist bekannt, welchen preis der user gewinnt		hasPrize = false;		// zeitpunkt, an dem die rollen starten		myTimeStart = 0;		// interval		myInterval = null;		// anzahlt verschiedener logos laden		loadNumLogos();		// sound		mySound = new Sound(this);		mySound.attachSound("slotmachine_walzen");	}	private function loadNumLogos():Void	{		// laden		GameConnector.getNumLogos(this, "onNumLogosLoaded");	}	public function onNumLogosLoaded(re:ResultEvent ):Void	{		// anzahl der sponsorenlogos		var numlogos:Number = Number(re.result);		// startfeld der rolle		var start:Number = 0;		// zufallsstartfeld		var rand:Number = 0;		// rollen initialisieren		for (var i:String in myBarrels) {			do {				// jede rolle soll an anderer position beginnen				rand = Math.ceil(Math.random() * BarrelUI.FIELDS_NUM);			} while (rand == start);			// startfeld der rolle			start = rand;			// rolle initialisieren			myBarrels[i].initFields(numlogos, start);		}	}//	private function loadNumLogos():Void//	{//		// receiver//		var receiver:LoadVars = new LoadVars();//		// referenz auf bandit//		receiver.parent = this;//		// callback//		receiver.onLoad = function() {//			this.parent.onNumLogosLoaded(this.numlogos);//		};//		// laden//		receiver.load("numlogos.txt");//	}////	public function onNumLogosLoaded(numlogos:Number ):Void//	{//		// startfeld der rolle//		var start:Number = 0;//		// zufallsstartfeld//		var rand:Number = 0;//		// rollen initialisieren//		for (var i:String in myBarrels) {//			do {//				// jede rolle soll an anderer position beginnen//				rand = Math.ceil(Math.random() * BarrelUI.FIELDS_NUM);//			} while (rand == start);//			// startfeld der rolle//			start = rand;//			// rolle initialisieren//			myBarrels[i].initFields(numlogos, start);//		}//	}	public function startBandit():Void	{	 	// button send	 	send_btn.onRelease = function () {	 		this._parent.startBandit();	 	};		// nicht bekannt, welchen preis der user gewinnt		hasPrize = false;		// 1. rollen starten		for (var i:String in myBarrels) {			myBarrels[i].startBarrel();		}		// zeitpunkt, an dem die rollen starten		myTimeStart = getTimer();		// sound abspielen		mySound.start(0, 1000);		// uid		var uid:Number = GameController.getInstance().getUid();		// phrase		var phrase:String = GameController.getInstance().getPhrase();		// 2. begriff zaehlen lassen		GameConnector.countPhrase(uid, phrase, this, null);		// 3. preis laden lassen		GameConnector.getPrize(uid, this, "onPrizeLoaded");	}	public function onPrizeLoaded(re:ResultEvent ):Void	{		// bekannt, welchen preis der user gewinnt		hasPrize = true;		// gewinn casten		var prize:Prize = Prize(RemotingBeanCaster.getCastedInstance(new Prize(), re.result));		// zeit seit start der rollen		var tdiff:Number = getTimer() - myTimeStart;		// nach pause (bis mindestzeit abgelaufen) stoppen		myInterval = setInterval(this, "stopBandit", TIME_MIN - tdiff, prize);	}	public function stopBandit(prize:Prize ):Void	{		// interval loeschen		clearInterval(myInterval);		// gewonnen oder nicht		var won:Boolean = (prize.getId() != 0);		// stopfeld der rolle		var stop:Number = 0;		// zufallsstopfeld		var rand:Number = 0;		// rollen stoppen		for (var i:String in myBarrels) {			// gewonnen oder nicht			switch (won) {				// gewonnen				case true :					// stopfeld fuer sponsor					stop = prize.getSponsorid();					// rolle stoppen					myBarrels[i].stopBarrelAtLogo(stop);					break;				// verloren				case false :					do {						// jede rolle soll an anderer position stoppen						rand = Math.ceil(Math.random() * BarrelUI.FIELDS_NUM);					} while (rand == stop);					// zufaelliges stopfeld					stop = rand;					// rolle stoppen					myBarrels[i].stopBarrelAtField(stop);					break;			}		}		// nach pause ergebnis anzeigen		myInterval = setInterval(this, "onBanditStopped", TIME_RAND, prize);	}	public function onBanditStopped(prize:Prize ):Void	{		// interval loeschen		clearInterval(myInterval);		// sound stoppen		mySound.stop();		// ergebnis anzeigen		result_mc.init(prize);	}	public function finishBandit():Void	{//		// zur phrase//		mySlotmachineUI.showPhrase();		// 22.05.2007: zum bandit		mySlotmachineUI.showBandit();	}}