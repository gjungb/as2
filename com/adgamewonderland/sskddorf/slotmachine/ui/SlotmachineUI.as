/*  * Generated by ASDT */ /*klasse:			SlotmachineUIautor: 			gerd jungbluth, adgame-wonderlandemail:			gerd.jungbluth@adgame-wonderland.dekunde:			ssk ddorferstellung: 		06.09.2005zuletzt bearbeitet:	14.09.2005durch			gjstatus:			in bearbeitung*/import mx.rpc.ResultEvent;import mx.rpc.FaultEvent;import com.adgamewonderland.sskddorf.slotmachine.beans.*;import com.adgamewonderland.sskddorf.slotmachine.connectors.*;import com.adgamewonderland.sskddorf.slotmachine.ui.*;class com.adgamewonderland.sskddorf.slotmachine.ui.SlotmachineUI extends MovieClip {		private static var TIME_NAVIGATE:Number = 50;		public static var NEXT_LOGIN:Number = 0;		public static var NEXT_REGISTER:Number = 1;		public static var NEXT_PHRASE:Number = 2;		public static var NEXT_SECURITY:Number = 3;		public static var NEXT_BANDIT:Number = 4;		public static var NEXT_RESULT:Number = 5;		public static var NEXT_AWARD:Number = 6;		private var myNext:Number;		private var mySound:Sound;		private var login_mc:LoginUI;		private var register_mc:RegisterUI;		private var sound_btn:Button;		public function SlotmachineUI()	{		// vererbung		super.constructor.apply(super, arguments);		// frame, der als naechster angezeigt werden soll		myNext = NEXT_PHRASE;		// sound		mySound = new Sound(this);		mySound.attachSound("slotmachine_back");		// abspielen		mySound.start(0, 1000);				// button sound		sound_btn.onRelease = function() {			// globaler sound			var snd:Sound = new Sound();			// lautstaerke umschalten			snd.setVolume(snd.getVolume() > 0 ? 0 : 100);		};	}		public function setNext(next:Number ):Void	{		// frame, der als naechster angezeigt werden soll		myNext = next;	}		public function getNext():Number	{		// frame, der als naechster angezeigt werden soll		return myNext;	}		public function logoutUser():Void	{		// nach dem login zur phrase		setNext(NEXT_PHRASE);		// zum login		showLogin();	}		public function showLogin():Void	{		// sound stoppen		_global.SoundCollection.stopCollection();		// login aufrufen		navigate("frLogin", TIME_NAVIGATE, "login_mc", "", []);	}		public function showRegister():Void	{		// registrierung aufrufen		navigate("frRegister", TIME_NAVIGATE, "register_mc", "", []);	}		public function showPhrase():Void	{		// phrase aufrufen		navigate("frPhrase", TIME_NAVIGATE, "phrase_mc", "", []);	}		public function showSecurity():Void	{		// security aufrufen		navigate("frSecurity", TIME_NAVIGATE, "security_mc", "", []);	}		public function showBandit():Void	{		// bandit aufrufen		navigate("frBandit", TIME_NAVIGATE, "bandit_mc", "startBandit", []);	}		private function navigate(frame:String, pause:Number, target:String, method:String, args:Array ):Void	{		// hinspringen		gotoAndStop(frame);		// funktion zur uebergabe der parameter an ziel		var invokeMethod = function(target:Object ) {			// uebergeben			target[method](args[0]);			// interval loeschen			clearInterval(interval);		};		// nach pause aufrufen		var interval:Number = setInterval(invokeMethod, pause, this[target]);	}	}