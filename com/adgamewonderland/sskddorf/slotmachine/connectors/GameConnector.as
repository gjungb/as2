/*
 * Generated by ASDT
*/

/*
klasse:			GameConnector
autor: 			gerd jungbluth, adgame-wonderland
email:			gerd.jungbluth@adgame-wonderland.de
kunde:			ssk ddorf
erstellung: 		07.09.2005
zuletzt bearbeitet:	14.09.2005
durch			gj
status:			in bearbeitung
*/

import mx.remoting.debug.NetDebug;
import mx.remoting.Service;
import mx.remoting.PendingCall;
import mx.rpc.RelayResponder;
import mx.rpc.FaultEvent;
import mx.rpc.ResultEvent;

import com.adgamewonderland.sskddorf.slotmachine.beans.*;

class com.adgamewonderland.sskddorf.slotmachine.connectors.GameConnector {

	private static var myGatewayURL:String = "http://webbox/flashservices/gateway.php";

//	private static var myGatewayURL:String = "http://agentur.sskduesseldorf.de/flashservices/gateway.php";

	private static var myRemoteObject:String = "com.adgamewonderland.sskddorf.slotmachine.connectors.GameConnector";

	private static var myService:Service;

	public static function checkPhrase(uid:Number, phrase:String, caller:Object, callback:String ):Void
	{
		// senden
		var pc:PendingCall = getService().checkPhrase(uid, phrase);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}

	public static function countPhrase(uid:Number, phrase:String, caller:Object, callback:String ):Void
	{
		// senden
		var pc:PendingCall = getService().countPhrase(uid, phrase);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}

	public static function getNumGames(uid:Number, caller:Object, callback:String ):Void
	{
		// senden
		var pc:PendingCall = getService().getNumGames(uid);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}

	public static function getPrize(uid:Number, caller:Object, callback:String ):Void
	{
		// senden
		var pc:PendingCall = getService().getPrize(uid);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}

	public static function getNumLogos(caller:Object, callback:String ):Void
	{
		// senden
		var pc:PendingCall = getService().getNumLogos();
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}

	public static function savePrize(uid:Number, pid:Number, caller:Object, callback:String ):Void
	{
		// senden
		var pc:PendingCall = getService().savePrize(uid, pid);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}

	public static function testSingleton(caller:Object, callback:String ):Void
	{
		// senden
		var pc:PendingCall = getService().testSingleton();
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}

	private static function getService():Service
	{
		// testen, ob service schon instantiiert
		if (myService instanceof Service == false) {
			// debugger
//			NetDebug.initialize();
			// offline / online
			if (_url.indexOf("http://") == -1) {
				// remoting service mit url
				myService = new Service(myGatewayURL, null, myRemoteObject, null, null);
			} else {
				// remoting service ohne url
				myService = new Service("", null, myRemoteObject, null, null);
			}
		}
		// zurueck geben
		return myService;
	}
}