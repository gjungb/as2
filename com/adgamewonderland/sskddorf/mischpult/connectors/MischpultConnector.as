/* 
 * Generated by ASDT 
*/ 
 
import mx.remoting.debug.NetDebug;
import mx.remoting.Service;
import mx.remoting.PendingCall;
import mx.rpc.RelayResponder;
import mx.rpc.FaultEvent;
import mx.rpc.ResultEvent;

import com.adgamewonderland.sskddorf.mischpult.beans.*;

class com.adgamewonderland.sskddorf.mischpult.connectors.MischpultConnector {
	
	private static var myGatewayURL:String = "http://192.168.0.2/flashservices/gateway.php";
	
	private static var myRemoteObject:String = "com.adgamewonderland.sskddorf.mischpult.connectors.MischpultConnector";
	
	private static var myService:Service;
	
	public static function loadFamilienstaende(caller:Object, callback:String ):Void
	{
		// laden
		var pc:PendingCall = getService().loadFamilienstaende();
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadLebensphasen(caller:Object, callback:String ):Void
	{
		// laden
		var pc:PendingCall = getService().loadLebensphasen();
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadPlanungssummen(caller:Object, callback:String ):Void
	{
		// laden
		var pc:PendingCall = getService().loadPlanungssummen();
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadProduktkategorien(caller:Object, callback:String ):Void
	{
		// laden
		var pc:PendingCall = getService().loadProduktkategorien();
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadWohnsituationen(caller:Object, callback:String ):Void
	{
		// laden
		var pc:PendingCall = getService().loadWohnsituationen();
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadGewichtungen(caller:Object, callback:String ):Void
	{
		// laden
		var pc:PendingCall = getService().loadGewichtungen();
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadProdukte(caller:Object, callback:String ):Void
	{
		// laden
		var pc:PendingCall = getService().loadProdukte();
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function loadProduktempfehlungen(caller:Object, callback:String ):Void
	{
		// laden
		var pc:PendingCall = getService().loadProduktempfehlungen();
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	public static function sendContact(contact:Contact, caller:Object, callback:String ):Void
	{
		// senden
		var pc:PendingCall = getService().sendContact(contact);
		// rueckgabe von rmi auswerten
		pc.responder = new RelayResponder(caller, callback, "onConnectorFault");
	}
	
	private static function getService():Service
	{
		// testen, ob service schon instantiiert
		if (myService instanceof Service == false) {
			// debugger
			NetDebug.initialize();
			// offline / online
			if (_url.indexOf("http://") == -1) {
				// remoting service mit url
				myService = new Service(myGatewayURL, null, myRemoteObject, null, null);
			} else {
				// remoting service ohne url
				myService = new Service("", null, myRemoteObject, null, null);
			}
		}
		// zurueck geben
		return myService;
	}
}