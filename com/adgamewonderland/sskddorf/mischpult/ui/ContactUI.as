 /*  * Generated by ASDT */ import mx.rpc.ResultEvent;import mx.rpc.FaultEvent;import com.adgamewonderland.agw.Formprocessor;import com.adgamewonderland.agw.util.TimelineFollower;import com.adgamewonderland.agw.util.RadiobuttonUI;import com.adgamewonderland.sskddorf.mischpult.beans.*; import com.adgamewonderland.sskddorf.mischpult.connectors.*;import com.adgamewonderland.sskddorf.mischpult.data.*;import com.adgamewonderland.sskddorf.mischpult.ui.*;class com.adgamewonderland.sskddorf.mischpult.ui.ContactUI extends MovieClip {		private var salutation1_mc:RadiobuttonUI;		private var salutation2_mc:RadiobuttonUI;		private var firstname_txt:TextField;		private var lastname_txt:TextField;		private var street_txt:TextField;		private var postcode_txt:TextField;		private var city_txt:TextField;		private var phone_txt:TextField;		private var email_txt:TextField;		private var channel1_mc:RadiobuttonUI;		private var channel2_mc:RadiobuttonUI;		private var dateday_txt:TextField;		private var datemonth_txt:TextField;		private var hourfrom_txt:TextField;		private var hourto_txt:TextField;		private var customer1_mc:RadiobuttonUI;		private var customer2_mc:RadiobuttonUI;		private var account_txt:TextField;		private var message_txt:TextField;		private var optin_mc:CheckboxUI;		private var products_txt:TextField;		private var open_btn:Button;		private var close_btn:Button;		private var send_btn:Button;		private var print_btn:Button;		private var blind_mc:Button;		private var errormcs:Array;		public function ContactUI() {		// auf der buehne angezeigte fehlerboxen		errormcs = new Array();	}		public function init():Void	{		// zum start	 	gotoAndStop(1);	 	// button oeffnen	 	open_btn.onRelease = function () {	 		this._parent.initContact();	 	};	}		public function initContact():Void	{		// abspielen verfolgen		var follower:TimelineFollower = new TimelineFollower(this, "showContact");		// abspielen verfolgen		onEnterFrame = function() {			follower.followTimeline();		};		// abspielen		gotoAndPlay("frOpen");	}		public function showContact():Void	{	 	// button zurueck	 	close_btn.onRelease = function () {	 		this._parent.stopContact();	 	};	 	// button senden	 	send_btn.onRelease = function () {	 		this._parent.sendContact();	 	};	 	// button drucken	 	print_btn.onRelease = function () {	 		this._parent.printContact();	 	};	 	// blind button	 	blind_mc.useHandCursor = false;		// tabsetter		var index:Number = 0;		firstname_txt.tabIndex = ++index;		lastname_txt.tabIndex = ++index;		street_txt.tabIndex = ++index;		postcode_txt.tabIndex = ++index;		city_txt.tabIndex = ++index;		phone_txt.tabIndex = ++index;		email_txt.tabIndex = ++index;		dateday_txt.tabIndex = ++index;		datemonth_txt.tabIndex = ++index;		hourfrom_txt.tabIndex = ++index;		hourto_txt.tabIndex = ++index;		account_txt.tabIndex = ++index;		message_txt.tabIndex = ++index;				// eingabebeschraenkungen		postcode_txt.restrict = "0-9";		postcode_txt.maxChars = 5;		phone_txt.restrict = "0-9\\-/";		phone_txt.maxChars = 16;		dateday_txt.restrict = "0-9";		dateday_txt.maxChars = 2;		datemonth_txt.restrict = "0-9";		datemonth_txt.maxChars = 2;		hourfrom_txt.restrict = "0-9";		hourfrom_txt.maxChars = 2;		hourto_txt.restrict = "0-9";		hourto_txt.maxChars = 2;		account_txt.restrict = "0-9";		account_txt.maxChars = 10;		message_txt.maxChars = 240;				// aktuelle kontaktdaten		var contact:Contact = DataProvider.getInstance().getContact();		// anzeigen		salutation1_mc.status = (contact.getSalutation() == Contact.SALUTATION1);		salutation2_mc.status = (contact.getSalutation() == Contact.SALUTATION2);		firstname_txt.text = contact.getFirstname();		lastname_txt.text = contact.getLastname();		street_txt.text = contact.getStreet();		postcode_txt.text = contact.getPostcode();		city_txt.text = contact.getCity();		phone_txt.text = contact.getPhone();		email_txt.text = contact.getEmail();		channel1_mc.status = (contact.getChannel() == Contact.CHANNEL1);		channel2_mc.status = (contact.getChannel() == Contact.CHANNEL2);		dateday_txt.text = contact.getDate() != null ? contact.getDate().getDate().toString() : "";		datemonth_txt.text = contact.getDate() != null ? String(contact.getDate().getMonth() + 1) : "";		hourfrom_txt.text = contact.getHourfrom() != null ? contact.getHourfrom().toString() : "";		hourto_txt.text = contact.getHourto() != null ? contact.getHourto().toString() : "";		customer1_mc.status = (contact.getCustomer() == true);		customer2_mc.status = (contact.getCustomer() == false);		account_txt.text = contact.getAccount();		message_txt.text = contact.getMessage();				// bei radiobuttons registrieren		salutation1_mc.addListener(this);		salutation2_mc.addListener(this);		channel1_mc.addListener(this);		channel2_mc.addListener(this);		customer1_mc.addListener(this);		customer2_mc.addListener(this);				// werte aus userinput und products		var products:String = "";		var userinput:UserInput = DataProvider.getInstance().getUserinput();		var weighting:Weighting = DataProvider.getInstance().getWeighting();		// produktkategorien, summen, counter		var i:Number;		var produktkategorie:Produktkategorie;		var summe:Number;				products += "<TEXTFORMAT TABSTOPS='200'>";		products += getValueAsHtml("Personen", userinput.getPersonen(), "");		products += getValueAsHtml("Alter", userinput.getAlter(), "Jahre");		products += "<P>&nbsp;</P>";		products += getValueAsHtml("Netto-Einkommen", userinput.getEinkommen(), "EUR");		products += getValueAsHtml("Wohnkosten (" + userinput.getWohnsituation().getName() + ")", userinput.getWohnkosten(), "EUR");		products += getValueAsHtml("Sonstige Kosten", userinput.getSonstigekosten(), "EUR");		products += "<P>&nbsp;</P>";		products += getValueAsHtml("Zur Verfügung", userinput.getVerfuegung(), "EUR");		products += "<P>&nbsp;</P>";		// auf produktkategorien verteilte summen		for (i = 1; i <= DataProvider.getInstance().getNumProduktkategorien(); i++) {			// aktuelle produktkategorie			produktkategorie = DataProvider.getInstance().getProduktkategorieByID(i);			// gewichtung aus datenbank			var gewichtung:Gewichtung = DataCalculator.getInstance().getGewichtung(userinput, produktkategorie);			// entsprechende summe			var empfehlung:Number = Math.round(userinput.getPlanungssumme().getSummeact() * gewichtung.getWert());			// summe			summe = weighting.getSummeByProduktkategorie(produktkategorie);			// text zusammen setzen			products += getValueAsHtml(produktkategorie.getName(), summe, "(" + empfehlung + ") " + "EUR");		}		products += "<P>&nbsp;</P>";		// auf produktkategorien verteilte produktvorschlaege		for (i = 1; i <= DataProvider.getInstance().getNumProduktkategorien(); i++) {			// aktuelle produktkategorie			produktkategorie = DataProvider.getInstance().getProduktkategorieByID(i);			// text zusammen setzen			products += "<P><B>Produktvorschläge " + produktkategorie.getName() + ":</B></P>";			// summe			summe = weighting.getSummeByProduktkategorie(produktkategorie);			// entsprechende produktempfehlungen			var suggestions:Array = DataCalculator.getInstance().getProduktemfehlungen(userinput, produktkategorie, summe);			// schleife ueber empfehlungen			products += "<P>";			for (var j:Number = 0; j < suggestions.length; j++) {				// aktuelles produkt				var suggestion:Produkt = suggestions[j];				// text zusammen setzen				products += suggestion.getNameempfehlung();				if (j < suggestions.length - 1) products += ", ";			}			products += "</P>";			products += "<P>&nbsp;</P>";		}		products += "</TEXTFORMAT>";		// anzeigen		products_txt.html = true;		products_txt.condenseWhite = true;		products_txt.htmlText = products;	}		public function stopContact():Void	{		// eingaben parsen		parseInput();		// fehler ausblenden		showErrors([]);		// bei radiobuttons deregistrieren		salutation1_mc.removeListener(this);		salutation2_mc.removeListener(this);		channel1_mc.removeListener(this);		channel2_mc.removeListener(this);		customer1_mc.removeListener(this);		customer2_mc.removeListener(this);		// abspielen verfolgen		var follower:TimelineFollower = new TimelineFollower(this, "init");		// abspielen verfolgen		onEnterFrame = function() {			follower.followTimeline();		};		// abspielen		gotoAndPlay("frClose");	}		public function sendContact():Void	{		// fehler ausblenden		showErrors([]);		// eingaben parsen		var errors:Array = parseInput();		// testen, ob fehler gefunden		if (errors.length != 0) {			// fehler anzeigen			showErrors(errors);			// abbrechen			return;		}		// button ausblenden		send_btn._visible = false;		// eingaben senden		MischpultConnector.sendContact(DataProvider.getInstance().getContact(), this, "onContactSent");	}		public function onContactSent(re:ResultEvent ):Void	{		// ausblenden		gotoAndPlay("frSent");		// button ausblenden		send_btn._visible = false;	 	// button zurueck	 	close_btn.onRelease = function () {	 		this._parent.init();	 	};	 	// button drucken	 	print_btn.onRelease = function () {	 		this._parent.printContact();	 	};	}		public function printContact():Void	{		// userinput		var userinput:UserInput = DataProvider.getInstance().getUserinput();		// weightung		var weighting:Weighting = DataProvider.getInstance().getWeighting();		// sender		var sender:LoadVars = new LoadVars();		// produktkategorien, summen, counter		var i:Number;		var produktkategorie:Produktkategorie;		var summe:Number;		// personen		sender["personen"] = userinput.getPersonen();		// alter		sender["alter"] = userinput.getAlter() + " Jahre";		// einkommen		sender["einkommen"] = userinput.getEinkommen() + " EUR";		// wohnkosten		sender["wohnkosten"] = userinput.getWohnkosten() + " EUR (" + userinput.getWohnsituation().getName() + ")";		// sonstigekosten		sender["sonstigekosten"] = userinput.getSonstigekosten() + " EUR";		// verfuegung		sender["verfuegung"] = userinput.getVerfuegung() + " EUR";		// auf produktkategorien verteilte summen		for (i = 1; i <= DataProvider.getInstance().getNumProduktkategorien(); i++) {			// aktuelle produktkategorie			produktkategorie = DataProvider.getInstance().getProduktkategorieByID(i);			// gewichtung aus datenbank			var gewichtung:Gewichtung = DataCalculator.getInstance().getGewichtung(userinput, produktkategorie);			// entsprechende summe			var empfehlung:Number = Math.round(userinput.getPlanungssumme().getSummeact() * gewichtung.getWert());			// summe			summe = weighting.getSummeByProduktkategorie(produktkategorie);			// text zusammen setzen			sender["s" + produktkategorie.getName().toLowerCase()] = summe + " (" + empfehlung + ") EUR";		}		// auf produktkategorien verteilte produktvorschlaege		for (i = 1; i <= DataProvider.getInstance().getNumProduktkategorien(); i++) {			// aktuelle produktkategorie			produktkategorie = DataProvider.getInstance().getProduktkategorieByID(i);			// text zusammen setzen			sender["e" + produktkategorie.getName().toLowerCase()] = "";			// summe			summe = weighting.getSummeByProduktkategorie(produktkategorie);			// entsprechende produktempfehlungen			var suggestions:Array = DataCalculator.getInstance().getProduktemfehlungen(userinput, produktkategorie, summe);			// schleife ueber empfehlungen			for (var j:Number = 0; j < suggestions.length; j++) {				// aktuelles produkt				var suggestion:Produkt = suggestions[j];				// text zusammen setzen				sender["e" + produktkategorie.getName().toLowerCase()] += suggestion.getNameempfehlung();				if (j < suggestions.length - 1) sender["e" + produktkategorie.getName().toLowerCase()] += ", ";			}		}		// senden		sender.send("ssk_ddorf_mischpult_drucken.php", "_blank", "POST");	}		public function onRadiobuttonChecked(mc:RadiobuttonUI, status:Boolean ):Void	{		// je nach radiobutton		switch (mc) {			case salutation1_mc :				salutation2_mc.status = false;				break;			case salutation2_mc :				salutation1_mc.status = false;				break;			case channel1_mc :				channel2_mc.status = false;				break;			case channel2_mc :				channel1_mc.status = false;				break;			case customer1_mc :				customer2_mc.status = false;				break;			case customer2_mc :				customer1_mc.status = false;				break;		}	}		private function parseInput():Array	{		// eingaben valide		var errors:Array = [];				// 1, eingaben parsen		// salutation		var salutation:String = "";		if (salutation1_mc.status) salutation = Contact.SALUTATION1;		if (salutation2_mc.status) salutation = Contact.SALUTATION2;		// firstname		var firstname:String = firstname_txt.text;		// lastname		var lastname:String = lastname_txt.text;		// street		var street:String = street_txt.text;		// postcode		var postcode:String = postcode_txt.text;		// city		var city:String = city_txt.text;		// phone		var phone:String = phone_txt.text;		// email		var email:String = email_txt.text.toLowerCase();		// channel		var channel:String = "";		if (channel1_mc.status) channel = Contact.CHANNEL1;		if (channel2_mc.status) channel = Contact.CHANNEL2;		// TODO: date		var date:Date = null;		var day:Number = Number(dateday_txt.text);		var month:Number = Number(datemonth_txt.text);		if (!isNaN(day) && !isNaN(month)) {			if (day >= 1 && day <= 31 && month >= 1 && month <= 12) {				date = new Date();				date.setDate(day);				date.setMonth(month - 1);			}		}		// hourfrom		var hourfrom:Number = Number(hourfrom_txt.text);		// hourto		var hourto:Number = Number(hourto_txt.text);		// customer		var customer:Boolean = false;		if (customer1_mc.status) customer = true;		if (customer2_mc.status) customer = false;		// account		var account:String = account_txt.text;		// message		var message:String = message_txt.text;		// optin		var optin:Boolean = optin_mc.status;		// products (tabs ersetzen durch leerzeichen)		var products:String = products_txt.text.split(String.fromCharCode(9)).join(" ");				// 2. eingaben speichern		// aktuelle kontaktdaten		var contact:Contact = DataProvider.getInstance().getContact();		// speichern		contact.setSalutation(salutation);		contact.setFirstname(firstname);		contact.setLastname(lastname);		contact.setStreet(street);		contact.setPostcode(postcode);		contact.setCity(city);		contact.setPhone(phone);		contact.setEmail(email);		contact.setOptin(optin);		contact.setChannel(channel);		contact.setDate(date);		contact.setHourfrom(hourfrom);		contact.setHourto(hourto);		contact.setCustomer(customer);		contact.setAccount(account);		contact.setMessage(message);		contact.setOptin(optin);		contact.setProducts(products);		// speichern		DataProvider.getInstance().setContact(contact);				// 3. eingaben validieren		// formprocessor zum valisieren		var fp:Formprocessor = new Formprocessor();		// zu validierende angaben		var validation:Array = [Formprocessor.TYPE_EMPTY, "firstname", firstname, Formprocessor.TYPE_EMPTY, "lastname", lastname, Formprocessor.TYPE_EMPTY, "street", street, Formprocessor.TYPE_PLZ, "postcode", postcode, Formprocessor.TYPE_EMPTY, "city", city, Formprocessor.TYPE_TRUE, "optin", optin];		// kontakt je nach channel		if (channel1_mc.status) validation.push(Formprocessor.TYPE_EMPTY, "phone", phone);		if (channel2_mc.status) validation.push(Formprocessor.TYPE_EMAIL, "email", email);		// validieren		var errors:Array = fp.checkForm(validation);				// fehler zurueck geben		return errors;		}		private function showErrors(errors:Array ):Void	{		// fehlerboxen loschen		if (errors.length == 0) {			// schleife ueber fehlerboxen			for (var j : String in errormcs) {				// aktueller fehlerpfeil				errormcs[j].removeMovieClip();			}			// array leeren			this.errormcs.splice(0);				// fehlerboxen anzeigen			} else {			// schleife ueber fehler			for (var i:String in errors) {				// fehler (name der variable)				var error:String = errors[i];				// textfeld oder movieclip				var target:Object;				if (this[error + "_txt"] instanceof TextField) {					target = this[error + "_txt"];				} else if (this[error + "_mc"] instanceof MovieClip) {					target = this[error + "_mc"];				}				// testen, ob gefunden				if (target == undefined) continue;				// mitte				var xpos:Number = target._x + target._width / 2;				var ypos:Number = target._y + target._height / 2;				// groesse				var width:Number = target._width * 1.02;				var height:Number = target._height * 1.1;				// constructor				var constructor:Object = {_x : xpos, _y : ypos, _width : width, _height : height};				// neue fehlerbox				var mc:MovieClip = this.attachMovie("ErrorUI", "error" + error + "_mc", getNextHighestDepth(), constructor);				// speichern				this.errormcs.push(mc);			}		}	}		private function getValueAsHtml(name:String, value:Number, unit:String ):String	{		// zusammen setzen		return "<P><B>" + name + ":</B><TAB>" + value + " " + unit + "</P>";	}	}