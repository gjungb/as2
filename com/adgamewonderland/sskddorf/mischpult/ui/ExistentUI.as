/* 
 * Generated by ASDT 
*/ 

import mx.remoting.RecordSet;
import mx.utils.Iterator;
import mx.remoting.debug.NetDebug;

import com.adgamewonderland.agw.math.*;

import com.adgamewonderland.agw.net.*;

import com.adgamewonderland.agw.util.ScrollbarUI;

import com.adgamewonderland.sskddorf.mischpult.beans.*;

import com.adgamewonderland.sskddorf.mischpult.data.*;

import com.adgamewonderland.sskddorf.mischpult.ui.*;

class com.adgamewonderland.sskddorf.mischpult.ui.ExistentUI extends MovieClip {
	
	private static var XPOS:Number = 616;
	
	private static var YPOS:Number = 92;
	
	private static var XDIFF:Number = 150;
	
	private static var YDIFF:Number = 17;
	
	private static var BWIDTH:Number = 305;
	
	private static var BHEIGHT:Number = 186;
	
	private static var TWIDTH:Number = 118;
	
	private static var THEIGHT:Number = 16;
	
	private static var TSIZE:Number = 11;
	
	private static var TFONT:String = "Arial";
	
	private static var SHADEALPHA:Number = 5;
	
	private var list_mc:MovieClip;
	
	private var mask_mc:MovieClip;
	
	private var scrollbar_mc:ScrollbarUI;
	
	public function ExistentUI() {
	}
	
	public function init():Void
	{
		// neue liste
		list_mc = this.createEmptyMovieClip("list_mc", getNextHighestDepth());
		list_mc._x = XPOS;
		list_mc._y = YPOS;
		// alle produkte aus datenbank
		var products:RecordSet = DataProvider.getInstance().getProdukte();
		// sortieren nach produktkategorie und fortlaufendem index
		products.sortItemsBy(["ProduktkategorieID", "ProduktkategorieIndex"], null, Array.ASCENDING | Array.NUMERIC);
		// zeile
		var row:Number = -1;
		// spalte
		var column:Number = -1;
		// produktkategorie
		var cat:Number = 0;
		// hintergrund je produktkategorie
		var shade_mc:MovieClip; 
		// iterator
		var i:Iterator = products.getIterator();
		// anzeigen
		while (i.hasNext()) {
			// aktuelles item aus datenbank
			var item:Object = i.next();
			// item als bean
			var bean:Produkt = Produkt(RemotingBeanCaster.getCastedInstance(new Produkt(), item));
			// produktkategorie
			bean.setProduktkategorie(DataProvider.getInstance().getProduktkategorieByID(item["ProduktkategorieID"]));
			// nicht vorhanden
			DataProvider.getInstance().setExistentByID(bean.getID(), false);
			// ueberspringen, wenn nicht abwaehlbar
			if (!bean.getAbwaehlbar()) continue;
			// testen, ob neue produktkategorie
			if (bean.getProduktkategorie().getID() != cat) {
				// neue produktkategorie
				cat = bean.getProduktkategorie().getID();
				// linke spalte
				column = 0;
				// neue zeile
				row ++;
				// neuer hintergrund
				shade_mc = list_mc.createEmptyMovieClip("shade" + cat + "_mc", list_mc.getNextHighestDepth());
				// positionieren
				shade_mc._x = 0;
				shade_mc._y = row * YDIFF;
				// rechteck mit fuellung
				shade_mc.beginFill(0x000000, 100);
				// zeichnen
				shade_mc.lineTo(BWIDTH, 0);
				shade_mc.lineTo(BWIDTH, YDIFF);
				shade_mc.lineTo(0, YDIFF);
				shade_mc.lineTo(0, 0);
				// alpha je nach produktkategorie
				shade_mc._alpha = cat * SHADEALPHA;
				
			} else {
				// linke / rechte spalte
				column = (column == 0 ? 1 : 0);
				// neue zeile
				if (column == 0) {
					// zeilen zaehlen
					row ++;
					// vorhandener hintergrund
					shade_mc = list_mc["shade" + cat + "_mc"];
					// vergroessern
					shade_mc._height += YDIFF;
				}
			}
			// position
			var pos:Point = new Point(Math.round(column * XDIFF), Math.round(row * YDIFF));
			
			// checkbox zum an- / abwaehlen
			var checkbox_mc:CheckboxUI = CheckboxUI(list_mc.attachMovie("CheckboxUI", "checkbox" + bean.getID() + "_mc", list_mc.getNextHighestDepth(), {_id : bean.getID()}));
			// positionieren
			checkbox_mc._x = pos.x;
			checkbox_mc._y = pos.y;
			// listener registrieren
			checkbox_mc.addListener(this);
			
			// name des produkts
			list_mc.createTextField("name" + bean.getID() + "_txt", list_mc.getNextHighestDepth(), checkbox_mc._x + checkbox_mc._width, checkbox_mc._y, TWIDTH, THEIGHT);
			var name_txt:TextField = list_mc["name" + bean.getID() + "_txt"];
			// nicht auswaehlbar
			name_txt.selectable = false;
			// schriften einbetten
			name_txt.embedFonts = true;
			// anzeigen
			name_txt.text = bean.getNamevorhanden();
			// formatierung
			var tf:TextFormat = new TextFormat();
			tf.size = TSIZE;
			tf.font = TFONT;
			name_txt.setTextFormat(tf);
		}
		// maskieren
		showMask();
		// scrollbar initialisieren
		scrollbar_mc.setScrollTarget(list_mc);
	}
	
	public function onCheckboxChecked(id:Number, status:Boolean ):Void
	{
		// speichern, ob vorhanden oder nicht
		DataProvider.getInstance().setExistentByID(id, status);

		// TODO: event handling
		var mc:ProductsUI = ProductsUI(_parent.products_mc);
		mc.onProductsChanged();
	}
	
	private function showMask():Void
	{
		// neue maske
		this.createEmptyMovieClip("mask_mc", getNextHighestDepth());
		// positionieren
		mask_mc._x = XPOS;
		mask_mc._y = YPOS;
		// rechteck mit fuellung
		mask_mc.beginFill(0xCCCCCC, 100);
		// zeichnen
		mask_mc.lineTo(BWIDTH, 0);
		mask_mc.lineTo(BWIDTH, BHEIGHT);
		mask_mc.lineTo(0, BHEIGHT);
		mask_mc.lineTo(0, 0);
		// als maske
		list_mc.setMask(mask_mc);
	}

}