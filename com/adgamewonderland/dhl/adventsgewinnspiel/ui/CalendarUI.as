/** * @author gerd */import mx.rpc.ResultEvent;import mx.rpc.FaultEvent;import com.adgamewonderland.agw.net.*;import com.adgamewonderland.dhl.adventsgewinnspiel.beans.*;import com.adgamewonderland.dhl.adventsgewinnspiel.connectors.*;import com.adgamewonderland.dhl.adventsgewinnspiel.ui.*;class com.adgamewonderland.dhl.adventsgewinnspiel.ui.CalendarUI extends MovieClip {	private var lso:SharedObject;	private var user:User;	private var today:Date;	private var lastgame:Number;	private var navigation_mc:NavigationUI;	private var win_mc:WinUI;	private var instructions_mc:InstructionsUI;	private var winnings_mc:WinningsUI;	private var requirements_mc:RequirementsUI;	private var tellafriend_mc:TellafriendUI;	private var played_mc:PlayedUI;	private var days_mc:DaysUI;	private var quiz_mc:QuizUI;	private var currentmc:MovieClip;	public function CalendarUI() {		// global bekannt machen		_global.CalendarUI = this;		// lso zum speichern / laden der userdaten		lso = SharedObject.getLocal("dhl_adventsgewinnspiel");		// user		user = new User();		// aktuelles datum		var now:Date = new Date();		// von aussen uebergebene timestamp		var timestamp:Number = _root.ts;		// neues datum		if (timestamp != undefined) {			// uebergebenes datum			now.setTime(timestamp * 1000);		} else {			// aktuelles datum, aber im dezember			now.setMonth(11);			// DEBUG: 1//			now.setDate(1);		}		// aktuelles datum		setToday(now);		// aktuell angezeigtes movieclip		currentmc = days_mc;	}	public function onLoad():Void	{		// user aus lso laden		if (!loadUserLocal()) {			// neu in lso speichern			saveUserLocal();		}	}	public function startGame(day:Number ):Void	{		// zum spiel		showGame();		// testen, ob heute schon gespielt		if (day == getToday().getDate() && day == getUser().getLastgame().getDate()) {			// meldung anzeigen			played_mc.showPlayed();		} else {			// quiz des uebergebenen tages anzeigen			quiz_mc.showQuiz(day);		}//		// DEBUG: quiz des uebergebenen tages anzeigen//		quiz_mc.showQuiz(day);	}	public function finishGame():Void	{		// speichern, dass heute gespielt		getUser().setLastgame(getToday());		// user in lso speichern		saveUserLocal();	}	public function updateUser(id:Number ):Void	{		// id aus datenbank speichern		getUser().setID(id);		// user in lso speichern		saveUserLocal();	}	public function showCalendar():Void	{		// aktuell angezeigtes movieclip		currentmc = days_mc;		// tuerchen aktivieren		days_mc.setDaysEnabled(true);		// navigation aktivieren		navigation_mc.showNavigation(true, null);		// zum kalender		gotoAndStop("frCalendar");	}	public function showGame():Void	{		// aktuell angezeigtes movieclip		currentmc = quiz_mc;		// tuerchen deaktivieren		days_mc.setDaysEnabled(false);		// navigation deaktivieren		// navigation_mc.showNavigation(false, null);		// zum spiel		gotoAndStop("frGame");	}	public function showWin():Void	{		// aktuell angezeigtes movieclip		currentmc = win_mc;		// tuerchen deaktivieren		days_mc.setDaysEnabled(false);		// navigation deaktivieren		navigation_mc.showNavigation(false, null);		// zum gewinnformular		gotoAndStop("frWin");	}	public function showInstructions():Void	{		// aktuell angezeigtes movieclip schliessen		closeCurrentmc();		// aktuell angezeigtes movieclip		currentmc = instructions_mc;		// tuerchen deaktivieren		days_mc.setDaysEnabled(false);		// anleitung anzeigen lassen		instructions_mc.showInstructions();	}	public function showWinnings():Void	{		// aktuell angezeigtes movieclip schliessen		closeCurrentmc();		// aktuell angezeigtes movieclip		currentmc = winnings_mc;		// tuerchen deaktivieren		days_mc.setDaysEnabled(false);		// anleitung anzeigen lassen		winnings_mc.showWinnings();	}	public function showRequirements():Void	{		// aktuell angezeigtes movieclip schliessen		closeCurrentmc();		// aktuell angezeigtes movieclip		currentmc = requirements_mc;		// tuerchen deaktivieren		days_mc.setDaysEnabled(false);		// teilnahmebedingungen anzeigen lassen		requirements_mc.showRequirements();	}	public function showTellafriend():Void	{		// aktuell angezeigtes movieclip schliessen		closeCurrentmc();		// aktuell angezeigtes movieclip		currentmc = tellafriend_mc;		// tuerchen deaktivieren		days_mc.setDaysEnabled(false);		// weiterempfehlen anzeigen lassen		tellafriend_mc.showTellafriend();	}	public function getDateLastgame():Date	{		// datum, an dem zuletzt gespielt wurde//		var datelastgame:Date = new Date();//		// tag setzen//		datelastgame.setDate(getLastgame());//		// DEBUG: dezember//		datelastgame.setMonth(11);		var datelastgame:Date = getUser().getLastgame();		// zurueck geben		return datelastgame;	}	public function saveUserLocal():Void	{		// user im lso speichern		this.lso.data.user = getUser();		// speichern		this.lso.flush();	}	private function loadUserLocal():Boolean	{		// bereits in lso gespeichert		var existent:Boolean = false;		// user aus lso laden		var userlocal:User = this.lso.data.user;		// testen, ob vorhanden		if (userlocal != null) {			// bereits gespeichert			existent = true;			// casten			userlocal = User(RemotingBeanCaster.getCastedInstance(new User(), userlocal));			// merken			setUser(userlocal);		}		// zurueck geben		return existent;	}	public function closeCurrentmc():Void	{		// anleitung schliessen		if (getCurrentmc() == instructions_mc) instructions_mc.closeInstructions();		// gewinne schliessen		if (getCurrentmc() == winnings_mc) winnings_mc.closeWinnings();		// teilnahmebedingungen schliessen		if (getCurrentmc() == requirements_mc) requirements_mc.closeRequirements();		// weiterempfehlen schliessen		if (getCurrentmc() == tellafriend_mc) tellafriend_mc.closeTellafriend();	}	public function getLastgame():Number {		return lastgame;	}	public function setLastgame(lastgame:Number):Void {		this.lastgame = lastgame;	}	public function getCurrentmc():MovieClip {		return currentmc;	}	public function setCurrentmc(currentmc:MovieClip):Void {		this.currentmc = currentmc;	}	public function getUser():User {		return user;	}	public function setUser(user:User):Void {		this.user = user;	}	public function getToday():Date {		return today;	}	public function setToday(today:Date):Void {		this.today = today;	}}