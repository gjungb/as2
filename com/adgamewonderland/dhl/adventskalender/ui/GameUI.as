/* 
 * Generated by ASDT 
*/ 

import com.adgamewonderland.agw.util.*;

import com.adgamewonderland.dhl.adventskalender.beans.Game;

import com.adgamewonderland.dhl.adventskalender.ui.CalendarUI;

class com.adgamewonderland.dhl.adventskalender.ui.GameUI extends MovieClip {
	
	public static var MODE_HIGHSCORE:Number = 1;
	
	public static var MODE_WIN:Number = 2;
	
	public static var MODE_CLOSE:Number = 3;
	
	private var myCalendarUI:CalendarUI;
	
	private var myGames:Array;
	
	private var game:Game;
	
	private var points:Number;
	
	private var loader_mc:MovieClip;
	
	private var mask_mc:MovieClip;
	
	private var close_btn:Button;
	
	public function GameUI() {
		myCalendarUI = CalendarUI(_parent);
		// spiele in reihenfolge der wochen
		myGames = [];
		myGames.push(new Game(1, "Santa in Eile!", "dhl_adventskalender_santaineile.swf", 75, 40, 258, 480, 217.5));
		myGames.push(new Game(2, "Geschenkefänger", "dhl_adventskalender_geschenkefaenger.swf", 75, 48, 213, 463.5, 307.5));
		myGames.push(new Game(3, "Snowmans Quiz", "dhl_adventskalender_snowmansquiz.swf", 100, 80, 194, 400, 332));
		myGames.push(new Game(4, "Crystal Drops", "dhl_adventskalender_diamonds.swf", 100, 150, 185, 260, 370));
		// aktuell gespieltes spiel
		this.game = null;
		// erzielte punktzahl
		this.points = 0;
	}
	
	public function showGame(week:Number ):Void
	{
		// aktuelles gespieltes spiel
		setGame(getGameById(week));
		// abspielen verfolgen
		var follower:TimelineFollower = new TimelineFollower(this, "loadGame");
		// abspielen verfolgen
		onEnterFrame = function() {
			follower.followTimeline();
		}
		// hinspringen
		gotoAndPlay("frGame" + getGame().getId());
	}
	
	public function loadGame():Void
	{
		// neuer loader
		var dummy_mc:MovieClip = loader_mc.createEmptyMovieClip("dummy_mc", 1);
		// positionieren
		dummy_mc._x = getGame().getPosition().x;
		dummy_mc._y = getGame().getPosition().y;
		// skalieren
		dummy_mc._xscale = dummy_mc._yscale = getGame().getScale();
		// spiel laden
		dummy_mc.loadMovie(getGame().getFile());
		// TODO: generischen loader anzeigen
		
		// spiel maskieren
		showMask(getGame());
	 	// button zurueck
	 	close_btn.onRelease = function () {
	 		this._parent.finishGame(MODE_CLOSE, 0);
	 	};
	}
	
	public function getGameById(id:Number ):Game
	{
		// entsprechendes spiel 
		var game:Game = myGames[id - 1];
		// zurueck geben
		return game;
	}
	
	public function finishGame(mode:Number, points:Number ):Void
	{
		// erzielte punktzahl
		setPoints(points);
		// abspielen verfolgen
		var follower:TimelineFollower = new TimelineFollower(this, "unloadGame", mode);
		// abspielen verfolgen
		onEnterFrame = function() {
			follower.followTimeline();
		}
		// hinspringen
		gotoAndPlay("frClose" + getGame().getId());
	}
	
	public function unloadGame(mode:Number ):Void
	{
		// spiel von buehne loeschen
		loader_mc.dummy_mc.removeMovieClip();
		// maske loeschen
		mask_mc.removeMovieClip();
		// je nach modus verzweigen
		if (mode == MODE_HIGHSCORE) {
			myCalendarUI.showHighscore(getGame(), getPoints());
		} else if (mode == MODE_WIN) {
			myCalendarUI.showWin();
		} else if (mode == MODE_CLOSE) {
			myCalendarUI.showCalendar();
		}
		// zum start
//		gotoAndStop(1);
	}
	
	private function showMask(game:Game ):Void
	{
		// neue maske
		mask_mc = loader_mc.createEmptyMovieClip("mask_mc", 2);
		// positionieren
		mask_mc._x = game.getPosition().x;
		mask_mc._y = game.getPosition().y;
		// rechteck mit fuellung
		mask_mc.beginFill(0xCCCCCC, 100);
		// zeichnen
		mask_mc.lineTo(game.getWidth(), 0);
		mask_mc.lineTo(game.getWidth(), game.getHeight());
		mask_mc.lineTo(0, game.getHeight());
		mask_mc.lineTo(0, 0);
		// als maske
		loader_mc.setMask(mask_mc);
	}
	
	public function getGame():Game {
		return game;
	}

	public function setGame(game:Game):Void {
		this.game = game;
	}

	public function getPoints():Number {
		return points;
	}

	public function setPoints(points:Number):Void {
		this.points = points;
	}

}