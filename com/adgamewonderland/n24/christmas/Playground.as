/* Playground** Generated from ArgoUML Model ** ActionScript 2 generator module provided by www.codealloy.com */ /*klasse:			Playgroundautor: 			gerd jungbluth, adgame-wonderlandemail:			gerd.jungbluth@adgame-wonderland.dekunde:			n24erstellung: 		24.07.2004zuletzt bearbeitet:	25.11.2005durch			gjstatus:			in bearbeitung*/import com.meychi.MD5;import com.adgamewonderland.agw.*;import com.adgamewonderland.n24.christmas.*;class com.adgamewonderland.n24.christmas.Playground extends MovieClip {	// Attributes		private var _myFile:String; // konfigurationsdatei		private var myXMLConnector:XMLConnector;		private var myUser:User;		private var myClock:Clock;		private var myCaller:MovieClip;		private var myHash:String;		private var login_mc:MovieClip;		private var blind_btn:Button, highscore_btn:Button, rules_btn:Button, win_btn:Button, agb_btn:Button;		// Operations		public function Playground()	{		// konfigurationsdatei		_myFile = "n24_christmas_xmlconnector.php";		// zum testen pfad angeben		if (_level0._url.indexOf("http://") == -1) _myFile = "http://192.168.0.27/kunden/n24/weihnachtsspiel/game/" +  _myFile;		// xml connector		myXMLConnector = new XMLConnector(this, _myFile);		// user (mit leerer email)		myUser = new User("");		// uhr und rundenanzeige		myClock = _level0.clock_mc;		// hashkey fuer sicherheit		myHash = "";		// login		login_mc = _level0.login_mc;		// blindbutton		blind_btn = _level0.blind_btn;		// highscorebutton		highscore_btn = _level0.highscore_btn;		// blindbutton ausschalten		showBlind(false);		// buttons initialisieren		initButtons();				// user einloggen// 		loginUser(myUser, {act : 2, max : 3, end : myUser.timestamp + 1000 * 3600});	}		public function set user(obj:User ):Void	{		myUser = obj;	}		public function get user():User	{		return (myUser);	}		// user einloggen	public function loginUser(uobj:User, round:Object, hash:String ):Void	{		// user speichern		user = uobj;		// zeitanzeige initialisieren		myClock.initClock(myUser.timestamp);		// rundenanzeige initialisieren		myClock.initRound(round.act, round.max, round.end);		// hashkey fuer sicherheit		setHash(hash);		// login aktualisieren		login_mc.initForm("loggedin", uobj);	}		// spiel starten	public function startGame():Void	{		// werbung neu laden		showAd("/start", "");		// snowmansquiz starten		openGame("snowmansquiz");	}		// spiel laden	public function openGame(game):Void	{		// blindbutton einschalten		showBlind(true);		// url des spiels		var url:String = "n24_" + game + ".swf";		// spiel laden		loadMovieNum(url, 1);	}		// spiel schliessen	public function closeGame():Void	{		// entladen		unloadMovieNum(1);		// blindbutton ausschalten		showBlind(false);		// login punktzahlen aktualisieren		login_mc.getUserScore(user.userid);	}		// erzielte punkte speichern	public function setScore(score:Number):Void	{		// punkte des users speichern		myUser.score = score;	}		// gespeicherte punkte zureuck geben	public function getScore():Number	{		// punkte		var score:Number = myUser.score		// zurueck geben		return(score);	}		// punkte in highscoreliste speichern	public function storeHighscore(caller:MovieClip, game:String, score:Number ):Void	{		// caller		myCaller = caller;		// aktueller tag		var day:String = myClock.date.getFullYear() + "-" + (myClock.date.getMonth() + 1) + "-" + myClock.date.getDate();		// in welcher runde wurde gespielt (act, max, end)		var round:Object = myClock.round; 		// sicherheitsschluessel		var key:String = MD5.calculate(String(user.userid) + getHash() + String(score));		// xml head		var head:XML = myXMLConnector.getXMLHead("n24_christmas", {obj:"scoreProcessor"});		// infos ueber user, runde, punktzahl		var node:XMLNode = myXMLConnector.getXMLNode("score", {unum : user.userid, day : day, round : round.act, score : score, key : key});		// einhaengen		head.firstChild.appendChild(node);		// senden und empfangen		myXMLConnector.sendXML(head, "onHighscoreStored");	}		public  function onHighscoreStored(xmlobj:XML ):Void	{		// infos ueber score		var scorenode:XMLNode = xmlobj.firstChild.firstChild;		// in object umformen		var info:Object = myXMLConnector.parseXMLNode(scorenode);		// erfolg an caller melden		myCaller.onScoreSent(Boolean(info["scorestatus"]));	}		// platzierung holen	public function loadRank(caller:MovieClip, score:Number ):Void	{		// caller		myCaller = caller;		// xml head		var head:XML = myXMLConnector.getXMLHead("n24_christmas", {obj:"rankProcessor"});		// infos ueber punktzahl		var node:XMLNode = myXMLConnector.getXMLNode("rank", {score : score});		// einhaengen		head.firstChild.appendChild(node);		// senden und empfangen		myXMLConnector.sendXML(head, "onRankLoaded");	}		public  function onRankLoaded(xmlobj:XML ):Void	{		// infos ueber rank		var ranknode:XMLNode = xmlobj.firstChild.firstChild;		// in object umformen		var info:Object = myXMLConnector.parseXMLNode(ranknode);		// platzierung an caller melden		myCaller.showRank(info["rank"]);	}		// zurueck geben, ob user eingeloggt	public function isLoggedIn():Boolean	{		// status		var loginstatus:Boolean = myUser.loginstatus;		// status zurueck geben		return (loginstatus);	}		// werbung neu laden	public function showAd(context:String, agof:String):Void	{		// abbrechen, wenn nicht online		if (_level0._url.indexOf("http://") == -1) return;		// banner an javascript uebergeben		getUrl("javascript:showContent('banner', '" + context + "', '" + agof + "');", "");		// skyscraper an javascript uebergeben// 		getUrl("javascript:showContent('skyscraper', '', '');", "");		// ivw zaehlen// 		getUrl("javascript:showContent('ivw', '" + context + "')", "");	}		// highscoreliste laden	public function showHighscore():Void	{		// highscoreliste an javascript uebergeben		getUrl("javascript:showContent('highscore', '', '')", "");	}		// registrierung laden	public function showRegister():Void	{		// externe registrierung aufrufen		getUrl("javascript:showContent('register', '', '');", "");	}		private function showBlind(bool:Boolean):Void	{		// keine hand		blind_btn.useHandCursor = false;		// ein- / ausschalten		blind_btn._visible = bool;	}		private function initButtons():Void	{		// highscorebutton		highscore_btn.onRelease = function () {			_global.myPlayground.showHighscore();		};	}	public function getHash():String {
		return myHash;
	}

	public function setHash(hash:String):Void {
		this.myHash = hash;
	}

}