/*
 * Generated by ASDT
*/

import com.adgamewonderland.duden.sudoku.game.beans.FieldImpl;
import com.adgamewonderland.duden.sudoku.game.beans.Grid;
import com.adgamewonderland.duden.sudoku.game.ui.FieldControllerUI;
import com.adgamewonderland.duden.sudoku.game.ui.FieldUI;

class com.adgamewonderland.duden.sudoku.game.ui.GridUI extends MovieClip {

	private var _posx:Number;

	private var _posy:Number;

	private var _diffx:Number;

	private var _diffy:Number;

	private var fielduis:Array;

	private var blind_mc:MovieClip;

	private var controller_mc:FieldControllerUI;

	public function GridUI() {
	}

	public function initGridUI(grid:Grid ):Boolean
	{
		// fields auf buehne
		this.fielduis = new Array();
		// erfolgreich
		var success:Boolean = true;
		// 1. fields initialisieren
		initFields(grid);
		// 2. blind button initialisieren
		initBlind();
		// 3. controller initialisieren
		initController();
		// zurueck geben
		return success;
	}

	public function onSelectField(mc:FieldUI ):Void
	{
		// controller positionieren
		controller_mc.setPosition(mc.getCenter());
		// field uebergeben
		controller_mc.setField(mc.getField());
		// controller einblenden
		showController(true);
		// blind button einblenden
		showBlind(true);

		// beim naechsten mausklick ausblenden
		onMouseUp = function() {
			// controller ausblenden
			showController(false);
			// blind button ausblenden
			showBlind(false);
			// callback loeschen
			delete(onMouseUp);
		};
	}

	public function showFields(bool:Boolean ):Void
	{
		// schleife ueber alle fields
		for (var i:String in this.fielduis) {
			// ein- / ausblenden
			this.fielduis[i]._visible = bool;
		}
		// controller ausblenden
		showController(false);
		// blind button ein- / ausblenden
		showBlind(!bool);
	}

	public function getFielduis():Array {
		return fielduis;
	}

	public function setFielduis(fielduis:Array):Void {
		this.fielduis = fielduis;
	}

	public function reset():Void
	{
		// schleife ueber alle fields
		for (var i:String in this.fielduis) {
			// loeschen
			this.fielduis[i].removeMovieClip();
		}
		// controller loeschen
		controller_mc.removeMovieClip();
	}

	private function initFields(grid:Grid ):Void
	{
		// alle fields
		var fields:Array = grid.getFields();
		// schleife, um fielduis auf buehne zu bringen
		for (var i:Number = 0; i < fields.length; i++) {
			// aktuelles field
			var field:FieldImpl = fields[i];
			// zeile
			var row:Number = grid.getRowNumber(field);
			// spalte
			var column:Number = grid.getColumnNumber(field);
			// kostruktor
			var constructor:Object = {_x : _posx + column * _diffx, _y : _posy + row * _diffy, field : field};
			// neues mc
			var mc:FieldUI = FieldUI(attachMovie("FieldUI", "field" + field.getId() + "_mc", getNextHighestDepth(), constructor));
			// speichern
			this.fielduis.push(mc);
		}
	}

	private function initBlind():Void
	{
		// movieclip fuer blind button
		blind_mc = createEmptyMovieClip("blind_mc", getNextHighestDepth());
		// positionieren
		blind_mc._x = _posx;
		blind_mc._y = _posy;
		// rechteck mit fuellung
		blind_mc.beginFill(0xCCCCCC, 0);
		// zeichnen
		blind_mc.lineTo(_diffx * 9, 0);
		blind_mc.lineTo(_diffx * 9, _diffy * 9);
		blind_mc.lineTo(0, _diffy * 9);
		blind_mc.lineTo(0, 0);
		// als button
		blind_mc.onRelease = function() {};
		// deaktivieren
		blind_mc._visible = false;
		// ohne mauszeiger
		blind_mc.useHandCursor = false;
	}

	private function initController():Void
	{
		// auf buehne
		controller_mc = FieldControllerUI(attachMovie("FieldControllerUI", "controller_mc", getNextHighestDepth()));
		// ausblenden
		controller_mc._visible = false;
	}

	private function showController(bool:Boolean ):Void
	{
		// controller ein- / ausblenden
		controller_mc._visible = bool;
	}

	private function showBlind(bool:Boolean ):Void
	{
		// blind button ein- / ausblenden
		blind_mc._visible = bool;
	}

}