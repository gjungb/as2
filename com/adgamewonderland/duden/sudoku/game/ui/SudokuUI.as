/*
 * Generated by ASDT
*/

import com.adgamewonderland.agw.interfaces.ITimeConsumer;
import com.adgamewonderland.agw.util.Timer;
import com.adgamewonderland.duden.sudoku.challenge.beans.Sudoku;
import com.adgamewonderland.duden.sudoku.challenge.beans.Term;
import com.adgamewonderland.duden.sudoku.game.beans.Field;
import com.adgamewonderland.duden.sudoku.game.beans.Grid;
import com.adgamewonderland.duden.sudoku.game.interfaces.IGridListener;
import com.adgamewonderland.duden.sudoku.game.ui.ClockUI;
import com.adgamewonderland.duden.sudoku.game.ui.ContentcounterUI;
import com.adgamewonderland.duden.sudoku.game.ui.GameControllerUI;
import com.adgamewonderland.duden.sudoku.game.ui.GridUI;
import com.adgamewonderland.duden.sudoku.game.ui.JokerUI;
import com.adgamewonderland.duden.sudoku.challenge.beans.GameController;
import com.adgamewonderland.duden.sudoku.challenge.interfaces.IUserListener;
import com.adgamewonderland.duden.sudoku.challenge.beans.User;
import com.adgamewonderland.agw.interfaces.ITimeUI;
import com.adgamewonderland.duden.sudoku.game.ui.BonusUI;

class com.adgamewonderland.duden.sudoku.game.ui.SudokuUI extends MovieClip implements ITimeUI, IGridListener {

	private static var TIMEGAME:Number = Number.MAX_VALUE;

	private static var TIMEERROR:Number = 10;

	private static var SCORE_EASY:Number = 15 * 60;

	private static var SCORE_MEDIUM:Number = 30 * 60;

	private static var SCORE_HARD:Number = 45 * 60;

	private var gametime:Timer;

	private var penaltytime:Timer;

	private var score:Number = 0;

	private var scoremax:Number = 0;

	private var errors:Number = 0;

	private var grid_mc:GridUI;

	private var clock_mc:ClockUI;

	private var penalty_mc:ClockUI;

	private var joker_mc:JokerUI;

	private var contentcounter_mc:ContentcounterUI;

	private var controller_mc:GameControllerUI;

	private var headline_txt:TextField;

	private var penalty_txt:TextField;

	private var bonus_mc:BonusUI;

	public function SudokuUI() {
//		// als listener registrieren
//		GameController.getInstance().addListener(this);
		// initialisieren
		init();
	}

	public function init():Void
	{
		// punktzahl
		score = 0;
		// maximale (anfangs-)punktzahl
		scoremax = 0;
		// fehlerzahl
		errors = 0;
		// dauer des spiels
		gametime = new Timer();
		// strafzeit
		penaltytime = new Timer();
		// contentcounter initialisieren
		contentcounter_mc.init();
		// clock resetten
		clock_mc.showTime(gametime);
		// strafzeit resetten
		penalty_mc.showTime(penaltytime);
		// joker initialisieren
		joker_mc.init();
		// headline initialisieren
//		headline_txt.autoSize = "left";
		headline_txt.text = "";
		// penaltyanzeige initialisieren
		penalty_txt.autoSize = "center";
		penalty_txt.text = "0";
	}

	public function startGame(headline:String ):Void
	{
		// initialisieren
		init();
		// grid
		var grid:Grid = Grid.getInstance();
		// als listener registrieren
		grid.addListener(this);
		// fields anzeigen lassen
		grid_mc.initGridUI(grid);
		// headline anzeigen
		headline_txt.text = headline;
		// zeit initialisieren
		initTime();
		// punktzahl initialisieren
		initScore();
	}

	public function pauseGame(bool:Boolean ):Void
	{
		// grid abdecken
		grid_mc.showFields(!bool);
		// zeit starten / stoppen
		gametime.status = !bool;
	}

	public function restartGame():Void
	{
		// spiel abbrechen
		stopGame(false);
	}

	public function stopGame(bool:Boolean ):Void
	{
		// uhr stoppen
		gametime.status = false;
		// spiel beenden
		switch (bool) {
			// regulaer beenden
			case true :
				// spiel beenden
				GameController.getInstance().finishSudoku(gametime.getSeconds()["gone"], errors, penaltytime.getSeconds()["gone"], getScore());

				break;
			// abbrechen
			case false :
				// spiel abbrechen
				GameController.getInstance().cancelSudoku();

				break;
		}
	}

	public function showTime(tobj:Timer ):Void
	{
		// differenz maximale (anfangs-)punktzahl zu bisher gespielter zeit plus strafzeit
		setScore(getScoremax() - tobj.getSeconds()["gone"] - this.penaltytime.getSeconds()["gone"]);
		// punktzahl anzeigen
		bonus_mc.showScore(getScore(), getScoremax());
	}

	public function onError():Void
	{
		// fehler zaehlen
		errors ++;
		// strafzeit abziehen
		penaltytime.addTime(TIMEERROR);
		// strafzeit anzeigen
		penalty_mc.showTime(penaltytime);
		// penaltyanzeige aktualisieren
		penalty_txt.text = String(Number(penalty_txt.text) + 1);
	}

	public function onGridChanged(field:Field ):Void
	{
	}

	public function onGridFinished():Void
	{
		// spiel beenden
		stopGame(true);
	}

//	public function onUserLogin(user:User):Void
//	{
//	}
//
//	public function onUserLogout(user:User):Void
//	{
//		// resetten
//		resetGame();
//	}
//
//	public function onUserUpdate(user:User):Void
//	{
//	}

	public function getScore():Number {
		return score;
	}

	public function setScore(score:Number):Void {
		this.score = Math.max(score, 0);
	}

	public function getScoremax():Number {
		return scoremax;
	}

	public function setScoremax(scoremax:Number):Void {
		this.scoremax = scoremax;
	}

	private function initTime():Void
	{
		// bei uhr anmelden
		gametime.addUI(this);
		// movieclip der uhr anmelden
		gametime.addUI(clock_mc);
		// dauer in sekunden uebergeben
		gametime.startTime(TIMEGAME);
		// uhr starten
		gametime.status = true;
		// movieclip der strafzeit anmelden
		penaltytime.addUI(penalty_mc);
		// strafzeit in sekunden uebergeben
		penaltytime.startTime(TIMEGAME);
	}

	private function initScore():Void
	{
		// je nach schwierigkeitsgrad
		if (Grid.getInstance().getSudoku().getDifficulty() == Sudoku.DIFFICULTY_EASY) {
			setScoremax(SCORE_EASY);
		}
		if (Grid.getInstance().getSudoku().getDifficulty() == Sudoku.DIFFICULTY_MEDIUM) {
			setScoremax(SCORE_MEDIUM);
		}
		if (Grid.getInstance().getSudoku().getDifficulty() == Sudoku.DIFFICULTY_HARD) {
			setScoremax(SCORE_HARD);
		}
	}

	private function resetGame():Void
	{
		// grid resetten
		Grid.getInstance().reset();
		// grid ui resetten
		grid_mc.reset();
		// initialisieren
		init();
	}

	private function onUnload():Void
	{
		// resetten
		resetGame();
//		// als listener deregistrieren
//		GameController.getInstance().removeListener(this);
	}

}