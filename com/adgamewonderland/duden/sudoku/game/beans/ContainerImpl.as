/*
 * Generated by ASDT
*/

import com.adgamewonderland.duden.sudoku.game.beans.Container;
import com.adgamewonderland.duden.sudoku.game.beans.Content;
import com.adgamewonderland.duden.sudoku.game.beans.Field;
import com.adgamewonderland.duden.sudoku.game.beans.FieldImpl;
import com.adgamewonderland.duden.sudoku.game.interfaces.IFieldListener;

class com.adgamewonderland.duden.sudoku.game.beans.ContainerImpl extends Container implements IFieldListener {

	private static var SOUND_CONTAINER:String = "snd_container";

	private var sounds:Object;

	public function ContainerImpl() {
		super.constructor.apply(super, arguments);
		// sounds
		sounds = new Object();
		sounds[SOUND_CONTAINER] = new Sound();
		sounds[SOUND_CONTAINER].attachSound(SOUND_CONTAINER);
	}

	public function addField(field:FieldImpl ):Number
	{
		// anfuegen
		var numfields:Number = this.fields.push(field);
		// als listener registrieren
		field.addListener(this);
		// anzahl der fields zurueck geben
		return numfields;
	}

	public function onContentChanged(field:Field, oldcontent:Content ):Void
	{
		// testen, ob alle fields korrekt ausgefuellt
		setEditable(getNumFieldsSolved() != 9);
		// wenn alle korrekt ausgefuellt
		if (!getEditable()) {
			// alle fields informieren
			for (var i:String in this.fields) {
				// aktuelles field
				var field:FieldImpl = this.fields[i];
				// informieren
				this.fields[i].setFinished(this);
			}
			// sound
			var snd:Sound = sounds[SOUND_CONTAINER];
			// abspielen
			snd.start(0, 1);
		}
	}

	public function onGuessChanged(field:Field, guess:Content, added:Boolean ):Void
	{

	}

	public function onContainerFinished(container:ContainerImpl ):Void
	{

	}

	public function toString():String
	{
		return ("ContainerImpl: " + this.fields.concat());
	}

	public function getNumFieldsSolved():Number
	{
		// anzahl vom spieler korrekt ausgefuellter fields
		var numfieldssolved:Number = 0;
		// schleife ueber alle fields
		for (var i:String in this.fields) {
			// aktuelles field
			var field:FieldImpl = this.fields[i];
			// zaehlen, wenn korrekt ausgefuellt
			numfieldssolved += (field.getSolved() ? 1 : 0);
		}
		// zurueck geben
		return numfieldssolved;
	}

	private function getNumFieldsEditable():Number
	{
		// anzahl editierbarer fields
		var numfieldseditable:Number = 0;
		// schleife ueber alle fields
		for (var i:String in this.fields) {
			// aktuelles field
			var field:FieldImpl = this.fields[i];
			// zaehlen, wenn editierbar
			numfieldseditable += (field.getEditable() ? 1 : 0);
		}
		// zurueck geben
		return numfieldseditable;
	}


}