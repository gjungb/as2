import com.adgamewonderland.duden.sudoku.challenge.beans.GameController;import com.adgamewonderland.agw.util.TimeFormater;import com.adgamewonderland.duden.sudoku.challenge.beans.Result;import com.adgamewonderland.duden.sudoku.challenge.beans.Term;import mx.utils.Delegate;import mx.rpc.ResultEvent;import com.adgamewonderland.duden.sudoku.challenge.interfaces.IGameListener;import com.adgamewonderland.duden.sudoku.challenge.beans.GameStatus;/** * @author gerd */class com.adgamewonderland.duden.sudoku.challenge.ui.GameoverUI extends MovieClip implements IGameListener {	private var headline_txt:TextField;	private var gametime_txt:TextField;	private var message_txt:TextField;	private var opponent_txt:TextField;	private var term_txt:TextField;	private var next_btn:Button;	private var search_btn:Button;	public function GameoverUI() {		// headline initialisieren		headline_txt.text = "";		// spielzeit initialisieren		gametime_txt.autoSize = "center";		// message initialisieren		message_txt.text = "";		// opponent initialisieren		opponent_txt.text = "";		// term initialisieren		term_txt.autoSize = "center";		// weiter		next_btn.onRelease = Delegate.create(this, doNext);		// suche		search_btn.onRelease = Delegate.create(this, doSearch);		// als listener registrieren		GameController.getInstance().addListener(this);	}	public function onLoad():Void	{		// ergebnis		var result:Result = GameController.getInstance().getResult();		// gesamtzeit (summe spielzeit und strafeit)		var gametime:String = TimeFormater.getHoursMinutesSeconds(result.getTime() + result.getPenaltytime(), ":");		// gesamtzeit anzeigen		gametime_txt.text = gametime;		// term		var term:Term = GameController.getInstance().getChallenge().getTerm();		// term anzeigen		term_txt.text = term.getText();		// headline		var headline:String = "";		// message		var message:String = "";		// opponent		var opponent:String = "";		// unterscheidung training oder herausforderung		if (GameController.getInstance().isTraining()) {			// headline			headline = "Training";			// message			message = "Sie haben Ihr Training erfolgreich absolviert. Fordern Sie nun jemanden zu einem Sudoku-Duell heraus!";		// herausforderung		} else {			// unterscheidung, ob herausforderung eroeffnet oder angenommen			switch (GameController.getInstance().isChallenge()) {				// herausforderung eroeffnet				case false :					// opponent					opponent = (GameController.getInstance().isOpponentRegistered() ? GameController.getInstance().getOpponent().getNickname():GameController.getInstance().getOpponentemail());					// headline 1					headline = GameController.getInstance().getUser().getNickname();					// headline 2					headline += " vs. ";					// headline 3					headline += opponent;					// message					message = "Sie haben Ihr Buchstaben Sudoku erfolgreich absolviert. Die Herausforderung geht an:";					// button ausblenden					next_btn._visible = false;					// herausforderung senden					GameController.getInstance().sendChallenge();					break;				// herausforderung angenommen				case true :					// keinen opponent anzeigen					opponent = "";					// headline 1					headline = GameController.getInstance().getUser().getNickname();					// headline 2					headline += " vs. ";					// headline 3					headline += GameController.getInstance().getOpponent().getNickname();					// message					message = "Sehen Sie in der Siegerehrung, ob Sie Ihren Herausforderer übertreffen konnten!";					// button ausblenden					next_btn._visible = false;					// herausforderung beenden					GameController.getInstance().finishChallenge();					break;			}		}		// headline anzeigen		headline_txt.text = headline;		// message anzeigen		message_txt.text = message;		// opponent anzeigen		opponent_txt.text = opponent;	}	public function onChangeStatus(oldstatus:GameStatus, newstatus:GameStatus):Void	{		// callback, wenn herausforderung gesendet		if (newstatus.getStatus() == GameStatus.STATUS_CHALLENGESENT) {			// button einblenden			next_btn._visible = true;		}		// callback, wenn herausforderung beendet		if (newstatus.getStatus() == GameStatus.STATUS_CHALLENGEFINISHED) {			// button einblenden			next_btn._visible = true;		}	}	private function doNext():Void	{		// unterscheidung training oder herausforderung		switch (GameController.getInstance().isTraining()) {			// training			case true :				// spiel abbrechen				GameController.getInstance().cancelSudoku();				break;			// herausforderung			case false :				// herausforderung wurde gesendet				if (GameController.getInstance().getGamestatus().getStatus() == GameStatus.STATUS_CHALLENGESENT) {					// spiel abbrechen					GameController.getInstance().cancelSudoku();				}				// herausforderung wurde beendet				if (GameController.getInstance().getGamestatus().getStatus() == GameStatus.STATUS_CHALLENGEFINISHED) {					// siegerehrung anzeigen					GameController.getInstance().loadAward();				}				break;		}	}	private function doSearch():Void	{		// suche oeffnen		this.getURL("javascript:openSearch('" + GameController.getInstance().getChallenge().getTerm().getText() + "')");	}	private function onUnload():Void	{		// als listener deregistrieren		GameController.getInstance().removeListener(this);	}}