/*
 * Generated by ASDT
*/

import mx.remoting.RecordSet;
import mx.rpc.ResultEvent;
import mx.utils.Delegate;
import mx.utils.Iterator;

import com.adgamewonderland.agw.math.Rectangle;
import com.adgamewonderland.agw.net.RemotingBeanCaster;
import com.adgamewonderland.agw.util.Mask;
import com.adgamewonderland.agw.util.ScrollbarUI;
import com.adgamewonderland.duden.sudoku.challenge.beans.ChallengeListItem;
import com.adgamewonderland.duden.sudoku.challenge.beans.GameController;
import com.adgamewonderland.duden.sudoku.challenge.beans.User;
import com.adgamewonderland.duden.sudoku.challenge.connectors.StatisticConnector;
import com.adgamewonderland.duden.sudoku.challenge.interfaces.IChallengeListListener;
import com.adgamewonderland.duden.sudoku.challenge.ui.ChallengeListItemUI;
import com.adgamewonderland.duden.sudoku.challenge.ui.ListUI;

class com.adgamewonderland.duden.sudoku.challenge.ui.ChallengeListUI extends ListUI implements IChallengeListListener {

	private static var LISTPOSX:Number = 13;

	private static var LISTPOSY:Number = 43;

	private static var LISTWIDTH:Number = 175;

	private static var LISTHEIGHT:Number = 94;

	private var _headline:String;

	private var _mode:Number;

	private var _status:Number;

	private var headline_txt:TextField;

	private var count_txt:TextField;

	private var reload_btn:Button;

	private var list_mc:MovieClip;

	private var scrollbar_mc:ScrollbarUI;

	private var mask:Mask;

	public function ChallengeListUI() {

		super();
		// headline linksbuendig
		headline_txt.autoSize = "left";
		// anzahl eintraege rechtsbuendig
		count_txt.autoSize = "right";
	}

	public function onLoad():Void
	{
		// headline
		headline_txt.text = _headline;
		// button
		reload_btn.onRelease = Delegate.create(this, loadChallengeList);
		// liste auf buehne
		list_mc = this.createEmptyMovieClip("list_mc", getNextHighestDepth());
		// liste positionieren
		list_mc._x = LISTPOSX;
		list_mc._y = LISTPOSY;
		// maske fuer liste
		this.mask = new Mask(this, list_mc, new Rectangle(LISTPOSX, LISTPOSY, LISTWIDTH, LISTHEIGHT));
		// maskieren
		this.mask.drawMask();

		// listeninhalte laden
		loadChallengeList();
	}

	public function onChallengeListLoaded(re:ResultEvent ):Void
	{
		// anzeigen
		showChallengeList(RecordSet(re.result));
	}

	public function onSelectItem(mc:ChallengeListItemUI ):Void
	{
		// item
		var item:ChallengeListItem = mc.getItem();
		// eingeloggter user
		var user:User = GameController.getInstance().getUser();
		// herausforderung / siegerehrung aufrufen
		GameController.getInstance().loadChallenge(user.getEmail(), item.getHashkey());
	}

	public function onRejectItem(mc:ChallengeListItemUI ):Void
	{
		// item
		var item:ChallengeListItem = mc.getItem();
		// herausforderung / siegerehrung deaktivieren
		StatisticConnector.setShowinlist(item.getDid(), item.getUid(), false, this, "onSetshowinlist");
	}

	public function onSetshowinlist(re:ResultEvent ):Void
	{
		// listeninhalte laden
		loadChallengeList();
	}

	private function loadChallengeList():Void
	{
		// liste leeren
		clearList();
		// eingeloggter user
		var user:User = GameController.getInstance().getUser();
		// liste laden lassen
		StatisticConnector.loadChallengeList(user.getID(), _mode, _status, this, "onChallengeListLoaded");
	}

	private function showChallengeList(challengelist:RecordSet ):Void
	{
		// anzahl eintraege
		count_txt.text = String(challengelist.getLength());

		// zaehler
		var counter:Number = 0;
		// y-position des naechsten items
		var ypos:Number = 0;
		// iterator ueber recordset
		var iterator:Iterator = challengelist.getIterator();
		// schleife ueber alle items
		while (iterator.hasNext()) {
			// aktuelles item
			var item:ChallengeListItem = ChallengeListItem(RemotingBeanCaster.getCastedInstance(new ChallengeListItem(),  iterator.next()));
			// constructor
			var constructor:Object = {};
			// position
			constructor._y = ypos;
			// item
			constructor._item = item;
			// item auf buehne
			var item_mc:ChallengeListItemUI = ChallengeListItemUI(list_mc.attachMovie("ChallengeListItemUI", "item" + counter + "_mc", counter + 1, constructor));
			// als listener registrieren
			item_mc.addListener(this);

			// zaehler
			counter ++;
			// y-position
			ypos += item_mc._height;
		}
		// scrollbar aktualisieren
		this.scrollbar_mc.setScrollTarget(list_mc);
	}

	private function clearList():Void
	{
		// zaehler
		var i = -1;
		// schleife ueber alle angezeigten item
		while (list_mc["item" + (++i) + "_mc"] instanceof ChallengeListItemUI) list_mc["item" + i + "_mc"].removeMovieClip();
		// liste positionieren
		list_mc._x = LISTPOSX;
		list_mc._y = LISTPOSY;
	}

}