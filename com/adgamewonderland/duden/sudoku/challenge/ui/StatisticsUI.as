/*
 * Generated by ASDT
*/

import mx.rpc.ResultEvent;

import com.adgamewonderland.agw.util.TimeFormater;
import com.adgamewonderland.duden.sudoku.challenge.beans.GameController;
import com.adgamewonderland.duden.sudoku.challenge.beans.Statistics;
import com.adgamewonderland.duden.sudoku.challenge.beans.Sudoku;
import com.adgamewonderland.duden.sudoku.challenge.connectors.UserConnector;
import com.adgamewonderland.duden.sudoku.challenge.beans.User;
import com.adgamewonderland.agw.net.RemotingBeanCaster;

class com.adgamewonderland.duden.sudoku.challenge.ui.StatisticsUI extends MovieClip {

	private static var MODE_USER:Number = 1;

	private static var MODE_OPPONENT:Number = 2;

	private var _mode:Number;

	private var nickname_txt:TextField;

	private var numgames_txt:TextField;

	private var gameswon_txt:TextField;

	private var gameslost_txt:TextField;

	private var gamesdrawn_txt:TextField;

	private var proportion_txt:TextField;

	private var toptime1_txt:TextField;

	private var toptime2_txt:TextField;

	private var toptime3_txt:TextField;

	public function StatisticsUI() {
		// alle textfelder linksbuendig
		for (var i:String in this) {
			if (this[i] instanceof TextField) {
				TextField(this[i]).autoSize = "left";
				TextField(this[i]).text = "-";
			}
		}
	}

	public function onLoad():Void
	{
		// unterscheidung user / opponent
		switch (_mode) {
			// user
			case MODE_USER :
				// statistics des eingeloggten users laden lassen
				UserConnector.loadStatistics(GameController.getInstance().getUser().getEmail(), this, "onStatisticsLoaded");

				break;
			// opponent
			case MODE_OPPONENT :
				// statistics des gegners laden lassen
				UserConnector.loadStatistics(GameController.getInstance().getOpponentemail(), this, "onStatisticsLoaded");

				break;
		}
	}

	public function onStatisticsLoaded(re:ResultEvent ):Void
	{
		// neue statistics
		var statistics:Statistics = Statistics(re.result);
		// unterscheidung user / opponent
		switch (_mode) {
			// user
			case MODE_USER :
				// nickname anzeigen
				nickname_txt.text = GameController.getInstance().getUser().getNickname();
				// statistics anzeigen
				showStatistics(statistics);

				break;
			// opponent
			case MODE_OPPONENT :
				// unterscheidung, ob opponent in db bekannt oder nicht
				switch (GameController.getInstance().isOpponentRegistered()) {
					// bekannt
					case true :
						// nickname anzeigen
						nickname_txt.text = GameController.getInstance().getOpponent().getNickname();
						// statistics anzeigen
						showStatistics(statistics);

						break;
					// nicht bekannt
					case false :
						// email anzeigen
						nickname_txt.text = GameController.getInstance().getOpponentemail();

						break;
				}

				break;
		}
	}

	private function showStatistics(statistics:Statistics ):Void
	{
		// alle werte anzeigen
		numgames_txt.text = String(statistics.getNumgames());
		gameswon_txt.text = String(statistics.getGameswon());
		gameslost_txt.text = String(statistics.getGameslost());
		gamesdrawn_txt.text = String(statistics.getGamesdrawn());
		proportion_txt.text = String(statistics.getPorportion());
		// toptimes anzeigen
		toptime1_txt.text = statistics.getToptime(Sudoku.DIFFICULTY_EASY).getTime() > 0 ? TimeFormater.getHoursMinutesSeconds(statistics.getToptime(Sudoku.DIFFICULTY_EASY).getTime(), ":") : "-";
		toptime2_txt.text = statistics.getToptime(Sudoku.DIFFICULTY_MEDIUM).getTime() > 0 ? TimeFormater.getHoursMinutesSeconds(statistics.getToptime(Sudoku.DIFFICULTY_MEDIUM).getTime(), ":") : "-";
		toptime3_txt.text = statistics.getToptime(Sudoku.DIFFICULTY_HARD).getTime() > 0 ? TimeFormater.getHoursMinutesSeconds(statistics.getToptime(Sudoku.DIFFICULTY_HARD).getTime(), ":") : "-";
		// label anzeigen
		gotoAndStop("frOn");
	}
}