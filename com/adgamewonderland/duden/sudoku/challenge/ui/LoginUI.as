/*
 * Generated by ASDT
*/

import mx.rpc.ResultEvent;
import mx.utils.Delegate;

import com.adgamewonderland.agw.Formprocessor;
import com.adgamewonderland.agw.net.RemotingBeanCaster;
import com.adgamewonderland.duden.sudoku.challenge.beans.GameController;
import com.adgamewonderland.duden.sudoku.challenge.beans.GameStatus;
import com.adgamewonderland.duden.sudoku.challenge.beans.User;
import com.adgamewonderland.duden.sudoku.challenge.connectors.UserConnector;
import com.adgamewonderland.duden.sudoku.challenge.ui.InputUI;
import com.adgamewonderland.duden.sudoku.challenge.beans.Statistics;
import com.adgamewonderland.duden.sudoku.challenge.beans.Login;
import com.adgamewonderland.duden.sudoku.challenge.beans.Preference;

class com.adgamewonderland.duden.sudoku.challenge.ui.LoginUI extends InputUI {

	private var lso:SharedObject;

	private var email_txt:TextField;

	private var password_txt:TextField;

	private var login_btn:Button;

	private var register_btn:Button;

	private var training_btn:Button;

	private var password_btn:Button;

	public function LoginUI() {
		// lso zum speichern / laden der email
		this.lso = SharedObject.getLocal("duden_sudoku");
	}

	public function onLoad():Void
	{
		// nachricht fehlerhaftes login ausblenden
		showMessage("");
	 	// button login
	 	login_btn.onRelease = Delegate.create(this, doLogin);
		// button registrieren
		register_btn.onRelease = Delegate.create(this, doRegister);
		// button trainieren
		training_btn.onRelease = Delegate.create(this, doTraining);
		// button password
		password_btn.onRelease = Delegate.create(this, doPassword);
	 	// key login
	 	var klsnr:Object = {_parent : this};
	 	klsnr.onKeyUp = function () {
	 		if (Key.getCode() == Key.ENTER) this._parent.doLogin();
	 	};
	 	Key.addListener(klsnr);

		// email aus uebergebenem parameter
		var email:String = _root.email != undefined ? _root.email : "";
		// hashkey fuer double optin aus uebergebenem parameter
		var hashkey:String = _root.hashkey != undefined ? _root.hashkey : "";
		// validieren, ob 1. korrekte email adresse
		var errors:Array = (new Formprocessor()).checkForm([Formprocessor.TYPE_EMAIL, "email", email]);
		// testen, ob fehler gefunden
		if (errors.length == 0) {
			// email anzeigen
			email_txt.text = email;
			// testen, ob korrekter hashkey
			if (hashkey.length == 32) {
				// registrierung abschliessen
				UserConnector.finishRegistration(email, hashkey, this, "onRegistrationFinished");
			}

		} else {
			// gespeicherte email anzeigen
			email_txt.text = (this.lso.data.email != undefined ? this.lso.data.email : email_txt.text);
		}
		// tabsetter
		var index:Number = 0;
		email_txt.tabIndex = ++index;
		password_txt.tabIndex = ++index;
	}

	public function doLogin():Void
	{
		// fehler ausblenden
		showErrors([]);
		// nachricht fehlerhaftes login ausblenden
		showMessage("");
		// validieren, ob 1. korrekte email adresse, 2. nicht leeres passwort
		var errors:Array = (new Formprocessor()).checkForm([Formprocessor.TYPE_EMAIL, "email", email_txt.text, Formprocessor.TYPE_EMPTY, "password", password_txt.text]);
		// testen, ob fehler gefunden
		if (errors.length != 0) {
			// fehler anzeigen
			showErrors(errors);
			// nachricht fehlerhafte angaben
			showMessage("Ihre Angaben sind nicht korrekt!");
			// abbrechen
			return;
		}
		// meldung anzeigen
		showMessage("Daten werden gesendet!");
		// button ausblenden
		login_btn._visible = false;
		// userdaten laden lassen
		UserConnector.loginUser(email_txt.text.toLowerCase(), password_txt.text, this, "onUserLoaded");
	}

	public function onUserLoaded(re:ResultEvent ):Void
	{
		// testen, ob login erfolgreich
		if (re.result["ID"] == 0) {
			// nachricht fehlerhaftes login einblenden
			showMessage("Login fehlgeschlagen!");
			// button einblenden
			login_btn._visible = true;
			// abbrechen
			return;
		}
		// neuer user
		var user:User = User(RemotingBeanCaster.getCastedInstance(new User(), re.result));
		// login
		var login:Login = Login(RemotingBeanCaster.getCastedInstance(new Login(), re.result["login"]));
		// in user speichern
		user.setLogin(login);
		// statistics
		var statistics:Statistics = Statistics(RemotingBeanCaster.getCastedInstance(new Statistics(), re.result["statistics"]));
		// im user speichern
		user.setStatistics(statistics);
		// preference
		var preference:Preference = Preference(RemotingBeanCaster.getCastedInstance(new Preference(), re.result["preference"]));
		// im user speichern
		user.setPreference(preference);
		// email lokal speichern
		this.lso.data.email = user.getEmail();
		// speichern
		this.lso.flush();
		// email loeschen
		_root.email = null;
		// einloggen
		GameController.getInstance().loginUser(user, false);
	}

	public function onRegistrationFinished(re:ResultEvent ):Void
	{
		// email loeschen
		_root.email = null;
		// hashkey loeschen
		_root.hashkey = null;
		// ergebnis
		var result:Number = Number(re.result);
		// button einblenden
		login_btn._visible = true;
		// testen, ob senden erfolgreich
		if (result < 1) {
			// nachricht fehlerhaftes senden einblenden
			showMessage("Update fehlgeschlagen!");
		} else {
			// nachricht erfolgreiches senden einblenden
			showMessage("Ihre Registrierung wurde erfolgreich abgeschlossen!");
		}
	}

	public function doPassword():Void
	{
		// fehler ausblenden
		showErrors([]);
		// nachricht fehlerhaftes login ausblenden
		showMessage("");
		// validieren, ob 1. korrekte email adresse
		var errors:Array = (new Formprocessor()).checkForm([Formprocessor.TYPE_EMAIL, "email", email_txt.text]);
		// testen, ob fehler gefunden
		if (errors.length != 0) {
			// fehler anzeigen
			showErrors(errors);
			// nachricht fehlerhafte angaben
			showMessage("Ihre Angaben sind nicht korrekt!");
			// abbrechen
			return;
		}
		// meldung anzeigen
		showMessage("Daten werden gesendet!");
		// button ausblenden
		password_btn._visible = false;
		// userdaten laden lassen
		UserConnector.sendPassword(email_txt.text.toLowerCase(), this, "onPasswordSent");
	}

	public function onPasswordSent(re:ResultEvent ):Void
	{
		// ergebnis
		var result:Number = Number(re.result);
		// button einblenden
		password_btn._visible = true;
		// testen, ob senden erfolgreich
		if (result < 1) {
			// nachricht fehlerhaftes senden einblenden
			showMessage("Senden fehlgeschlagen!");
		} else {
			// nachricht erfolgreiches senden einblenden
			showMessage("Ihr neues Passwort wurde an Ihre E-Mail-Adresse versendet!");
		}
	}

	private function doRegister():Void
	{
		// fehler ausblenden
		showErrors([]);
		// zur registrierung
		GameController.getInstance().changeStatus(new GameStatus(GameStatus.STATUS_REGISTER));
	}

	private function doTraining():Void
	{
		// leere email
		GameController.getInstance().setOpponentemail("");
		// fehler ausblenden
		showErrors([]);
		// sudoku starten lassen
		GameController.getInstance().startSudoku();
	}

}