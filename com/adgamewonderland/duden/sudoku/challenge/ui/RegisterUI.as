/** * @author gerd */import mx.rpc.ResultEvent;import mx.utils.Delegate;import com.adgamewonderland.agw.Formprocessor;import com.adgamewonderland.agw.net.RemotingBeanCaster;import com.adgamewonderland.agw.util.CheckboxUI;import com.adgamewonderland.duden.sudoku.challenge.beans.Address;import com.adgamewonderland.duden.sudoku.challenge.beans.GameController;import com.adgamewonderland.duden.sudoku.challenge.beans.GameStatus;import com.adgamewonderland.duden.sudoku.challenge.beans.Login;import com.adgamewonderland.duden.sudoku.challenge.beans.Preference;import com.adgamewonderland.duden.sudoku.challenge.beans.User;import com.adgamewonderland.duden.sudoku.challenge.connectors.UserConnector;import com.adgamewonderland.duden.sudoku.challenge.ui.InputUI;import com.meychi.ascrypt.MD5;class com.adgamewonderland.duden.sudoku.challenge.ui.RegisterUI extends InputUI {	private var lso:SharedObject;	private var email_txt:TextField;	private var nickname_txt:TextField;	private var password1_txt:TextField;	private var password2_txt:TextField;	private var register_btn:Button;	private var login_btn:Button;	private var cancel_btn:Button;	private var newsletter_mc:CheckboxUI;	private var optin_mc:CheckboxUI;	private var receiveemail_mc:CheckboxUI;	private var showemail_mc:CheckboxUI;	public function RegisterUI() {		// lso zum speichern / laden der email		this.lso = SharedObject.getLocal("duden_sudoku");	}	public function onLoad():Void	{		// nachricht fehlerhaftes registrieren ausblenden		showMessage("");		// ggf. email aus herausforderungs- / siegerehrungs mail		if (_root.email != "null" && _root.email != undefined) {			// anzeigen			email_txt.text = _root.email;			// nicht auswaehlbar			email_txt.selectable = false;			// nicht aenderbar			email_txt.type = "dynamic";		}	 	// button register	 	register_btn.onRelease = Delegate.create(this, doRegister);	 	// button abbrechen	 	cancel_btn.onRelease = Delegate.create(this, doCancel);	 	// button anmelden (wird nach erfolgreichem registrieren eingeblendet	 	login_btn.onRelease = Delegate.create(this, doCancel);	 	login_btn._visible = false;		// tabsetter		var index:Number = 1;		email_txt.tabIndex = ++index;		nickname_txt.tabIndex = ++index;		password1_txt.tabIndex = ++index;		password2_txt.tabIndex = ++index;		// newsletter angehakt		newsletter_mc.status = true;		// receiveemail angehakt		receiveemail_mc.status = true;	}	public function doRegister():Void	{		// nickname		var nickname:String = nickname_txt.text;		// email		var email:String = email_txt.text.toLowerCase();		// password		var password:String = password1_txt.text;		// newsletter		var newsletter:Boolean = newsletter_mc.status;		// optin		var optin:Boolean = optin_mc.status;		// receiveemail		var receiveemail:Boolean = receiveemail_mc.status;		// showemail		var showemail:Boolean = showemail_mc.status;		// fehler ausblenden		showErrors([]);		// nachricht fehlerhaftes login ausblenden		showMessage("");		// validieren		var errors:Array = (new Formprocessor()).checkForm([Formprocessor.TYPE_EMPTY, "nickname", nickname, Formprocessor.TYPE_EMAIL, "email", email, Formprocessor.TYPE_EMPTY, "password1", password, Formprocessor.TYPE_EMPTY, "password2", password]);		// passwoerter nicht identisch		if (password1_txt.text != password2_txt.text) errors.push("password2");		// testen, ob fehler gefunden		if (errors.length != 0) {			// fehler anzeigen			showErrors(errors);			// nachricht fehlerhafte angaben			showMessage("Ihre Angaben sind nicht korrekt!");			// abbrechen			return;		}		// button ausblenden		register_btn._visible = false;		// neuer user		var user:User = new User();		// login		var login:Login = new Login();		// adresse		var address:Address = new Address();		// preference		var preference:Preference = new Preference();		// email		user.setEmail(email);		// nickname		user.setNickname(nickname);		// password		login.setPassword(MD5.calculate(password));		// login		user.setLogin(login);		// newsletter		preference.setNewsletter(newsletter);		// optin		preference.setOptin(optin);		// receiveemail		preference.setReceiveemail(receiveemail);		// showemail		preference.setShowemail(showemail);		// preference		user.setPreference(preference);		// user registrieren lassen		UserConnector.registerUser(user, this, "onUserRegistered");	}	public function onUserRegistered(re:ResultEvent ):Void	{		// ergebnis		var result:Number = Number(re.result);		// testen, ob register erfolgreich		switch (result) {			// email vorhanden			case -1 :				// nachricht fehlerhaftes registrieren einblenden				showMessage("E-Mail Adresse bereits vorhanden!");				// button einblenden				register_btn._visible = true;				break;			// allgemeiner fehler			case -2 :				// nachricht fehlerhaftes registrieren einblenden				showMessage("Registrierung fehlgeschlagen!");				// button einblenden				register_btn._visible = true;				break;			// registrierung erfolgreich			default :				// nachricht erfolgreiches registrieren einblenden				showMessage("Klicken Sie den Link, der an Ihre E-Mail-Adresse gesendet wurde!");				// button einblenden				login_btn._visible = true;				// email lokal speichern				this.lso.data.email = email_txt.text;				// speichern				this.lso.flush();		}	}//	public function onUserLoaded(re:ResultEvent ):Void//	{//		// testen, ob login erfolgreich//		if (re.result.status != 1) {//			// abbrechen//			return;//		}//		// neuer user//		var user:User = User(RemotingBeanCaster.getCastedInstance(new User(), re.result));//		// email lokal speichern//		lso.data.email = user.getEmail();//		// speichern//		lso.flush();//		// einloggen////		GameController.getInstance().loginUser(user, true);//	}	private function doCancel():Void	{		// fehler ausblenden		showErrors([]);		// zum login		GameController.getInstance().changeStatus(new GameStatus(GameStatus.STATUS_LOGIN));	}} 