/** * @author gerd */import mx.rpc.ResultEvent;import mx.utils.Delegate;import com.adgamewonderland.agw.Formprocessor;import com.adgamewonderland.agw.net.RemotingBeanCaster;import com.adgamewonderland.agw.util.CheckboxUI;import com.adgamewonderland.duden.sudoku.challenge.beans.Address;import com.adgamewonderland.duden.sudoku.challenge.beans.GameController;import com.adgamewonderland.duden.sudoku.challenge.beans.GameStatus;import com.adgamewonderland.duden.sudoku.challenge.beans.Login;import com.adgamewonderland.duden.sudoku.challenge.beans.Preference;import com.adgamewonderland.duden.sudoku.challenge.beans.User;import com.adgamewonderland.duden.sudoku.challenge.connectors.UserConnector;import com.adgamewonderland.duden.sudoku.challenge.ui.InputUI;import com.meychi.MD5;import com.adgamewonderland.duden.sudoku.challenge.ui.GameUI;class com.adgamewonderland.duden.sudoku.challenge.ui.PreferenceUI extends InputUI {	private var email_txt:TextField;	private var nickname_txt:TextField;	private var password1_txt:TextField;	private var password2_txt:TextField;	private var send_btn:Button;	private var cancel_btn:Button;	private var receiveemail_mc:CheckboxUI;	private var showemail_mc:CheckboxUI;	public function PreferenceUI() {	}	public function onLoad():Void	{		// eingeloggter user		var user:User = GameController.getInstance().getUser();		// preference		var preference:Preference = user.getPreference();		// email anzeigen		email_txt.text = user.getEmail();		// nickname anzeigen		nickname_txt.text = user.getNickname();		// receiveemail		receiveemail_mc.status = preference.isReceiveemail();		// showemail		showemail_mc.status = preference.isShowemail();	 	// button send	 	send_btn.onRelease = Delegate.create(this, doUpdate);	 	// button abbrechen	 	cancel_btn.onRelease = Delegate.create(this, doCancel);		// tabsetter		var index:Number = 1;		nickname_txt.tabIndex = ++index;		password1_txt.tabIndex = ++index;		password2_txt.tabIndex = ++index;		// fehler ausblenden		showErrors([]);		// nachricht fehlerhaftes update ausblenden		showMessage("");	}	public function doUpdate():Void	{		// nickname		var nickname:String = nickname_txt.text;		// password		var password:String = password1_txt.text;		// receiveemail		var receiveemail:Boolean = receiveemail_mc.status;		// showemail		var showemail:Boolean = showemail_mc.status;		// fehler ausblenden		showErrors([]);		// nachricht fehlerhaftes update ausblenden		showMessage("");		// validieren		var errors:Array = (new Formprocessor()).checkForm([Formprocessor.TYPE_EMPTY, "nickname", nickname]);  // , Formprocessor.TYPE_EMPTY, "password1", password, Formprocessor.TYPE_EMPTY, "password2", password		// passwoerter nicht identisch		if (password1_txt.text != password2_txt.text) errors.push("password2");		// testen, ob fehler gefunden		if (errors.length != 0) {			// fehler anzeigen			showErrors(errors);			// nachricht fehlerhafte angaben			showMessage("Ihre Angaben sind nicht korrekt!");			// abbrechen			return;		}		// eingeloggter user		var user:User = GameController.getInstance().getUser();		// preference		var preference:Preference = user.getPreference();		// wurden eingaben geaendert		var updated:Boolean = false;		// leeres password abfangen		if (password == "") {			// altes password			password = user.getLogin().getPassword();		} else {			// verschluesseltes neues password			password = MD5.calculate(password);		}		// preference updaten, wenn geaendert		if (receiveemail != preference.isReceiveemail() || showemail != preference.isShowemail()) {			// receiveemail			preference.setReceiveemail(receiveemail);			// showemail			preference.setShowemail(showemail);			// updaten			UserConnector.updatePreference(preference, this, "onPreferenceUpdated");			// eingaben wurden geaendert			updated = true;		}		// user updaten, wenn geaendert		if (nickname != user.getNickname() || password != user.getLogin().getPassword()) {			// updaten			UserConnector.updateUser(nickname, password, user.getID(), user.getLogin().getPassword(), this, "onUserUpdated");			// nickname			user.setNickname(nickname);			// password			user.getLogin().setPassword(password);			// eingaben wurden geaendert			updated = true;		}		// testen, ob geaendert		if (updated) {			// button ausblenden			send_btn._visible = false;		} else {			// nachricht unveraenderte angaben			showMessage("Sie haben Ihre Angaben nicht geändert!");		}	}	public function onPreferenceUpdated(re:ResultEvent ):Void	{		// ergebnis		var result:Number = Number(re.result);		// button einblenden		send_btn._visible = true;		// testen, ob register erfolgreich		if (result < 1) {			// meldung anzeigen//			trace("Update fehlgeschlagen!");			// nachricht fehlerhaftes update einblenden			showMessage("Update fehlgeschlagen!");		} else {			// nachricht erfolgreiches update einblenden			showMessage("Update erfolgreich!");		}	}	public function onUserUpdated(re:ResultEvent ):Void	{		// ergebnis		var result:Number = Number(re.result);		// button einblenden		send_btn._visible = true;		// testen, ob register erfolgreich		if (result < 1) {			// nachricht fehlerhaftes update einblenden			showMessage("Update fehlgeschlagen!");		} else {			// nachricht erfolgreiches update einblenden			showMessage("Update erfolgreich!");		}	}	private function doCancel():Void	{		// fehler ausblenden		showErrors([]);		// preference schliessen		GameUI.getMovieClip().hidePreference();	}} 