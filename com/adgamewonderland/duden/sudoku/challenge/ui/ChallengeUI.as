/*
 * Generated by ASDT
*/

import mx.utils.Delegate;

import com.adgamewonderland.agw.Formprocessor;
import com.adgamewonderland.agw.util.RadiobuttonUI;
import com.adgamewonderland.duden.sudoku.challenge.beans.GameController;
import com.adgamewonderland.duden.sudoku.challenge.beans.Sudoku;
import com.adgamewonderland.duden.sudoku.challenge.ui.InputUI;
import com.adgamewonderland.agw.interfaces.IRadiobuttonListener;
import com.adgamewonderland.duden.sudoku.challenge.ui.ListUI;
import com.adgamewonderland.duden.sudoku.challenge.ui.GameUI;
import com.adgamewonderland.duden.sudoku.challenge.beans.GameStatus;
import com.adgamewonderland.duden.sudoku.challenge.connectors.UserConnector;
import mx.rpc.ResultEvent;
import com.adgamewonderland.duden.sudoku.challenge.beans.User;
import com.adgamewonderland.agw.net.RemotingBeanCaster;
import com.adgamewonderland.duden.sudoku.challenge.beans.Statistics;

class com.adgamewonderland.duden.sudoku.challenge.ui.ChallengeUI extends InputUI {

	private var opponentemail_txt:TextField;

	private var challenge_btn:Button;

	private var training_btn:Button;

	public function ChallengeUI() {
	}

	public function onLoad():Void
	{
		// email anzeigen
		opponentemail_txt.text = GameController.getInstance().getOpponentemail();
		// callback zur ueberwachung, dass eingeloggter user sich nicht selbst herausfordert
		opponentemail_txt.onChanged = Delegate.create(this, onEmailChanged);
		// herausforderung
		challenge_btn.onRelease = Delegate.create(this, doChallenge);
		// trainieren
		training_btn.onRelease = Delegate.create(this, doTraining);
	}

	private function doChallenge():Void
	{
		// fehler ausblenden
		showErrors([]);
		// validieren, ob 1. korrekte email adresse
		var errors:Array = (new Formprocessor()).checkForm([3, "opponentemail", opponentemail_txt.text]);
		// testen, ob fehler gefunden
		if (errors.length != 0) {
			// fehler anzeigen
			showErrors(errors);
			// abbrechen
			return;
		}
		// gegner laden lassen
		GameController.getInstance().loadOpponent(opponentemail_txt.text);
	}

	private function doTraining():Void
	{
		// fehler ausblenden
		showErrors([]);
		// kein gegner
		GameController.getInstance().setOpponentemail("");
		// difficulty formular
		GameController.getInstance().changeStatus(new GameStatus(GameStatus.STATUS_DIFFICULTY));
	}

	private function onEmailChanged():Void
	{
		// fehler ausblenden
		showErrors([]);
		// testen, ob email-adresse des eingeloggten users eingegegeben
		var identical:Boolean = (opponentemail_txt.text.toLowerCase() == GameController.getInstance().getUser().getEmail().toLowerCase());
		// herausfordern button de- / aktivieren
		challenge_btn.enabled = !identical;
		challenge_btn._alpha = !identical ? 100 : 30;
	}

}