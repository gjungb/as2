/* Shelf** Generated from ArgoUML Model ** ActionScript 2 generator module provided by www.codealloy.com */ /*klasse:			Shelfautor: 			gerd jungbluth, adgame-wonderlandemail:			gerd.jungbluth@adgame-wonderland.dekunde:			zdferstellung: 		14.06.2004zuletzt bearbeitet:	28.06.2004durch			gjstatus:			in bearbeitung*/import com.adgamewonderland.zdf.buchstapler.*import com.adgamewonderland.agw.*class com.adgamewonderland.zdf.buchstapler.Shelf extends MovieClip {	// Attributes		private var _myStartBoards:Object // min, max, level		private var _myStartBooks:Object // min, max, level		private var myStartBoards:Object		private var myStartBooks:Object		private var myBoards:Array;		// Operations		public  function Shelf()	{		// minimale, maximale befuellte boards am anfang, anzahl der level, bis minimum erreicht wird (aus komponentenparameter)		myStartBoards = _myStartBoards;		// minimale, maximale prozent buecher am anfang, anzahl der level, bis minimum erreicht wird (aus komponentenparameter)		myStartBooks = _myStartBooks;		// regalbretter		myBoards = [];	}		public  function registerBoard(board:Board ):Void	{		// in array schreiben		myBoards.push(board);	}		public  function initShelf():Void	{		// alle boards initialisieren		for (var i in myBoards) {			// initialisieren			myBoards[i].initBoard();		}	}		public  function getBoardByPos(pos:Point ):Board	{		// gesucht wird das board, das den geringsten positiven y-abstand zum uebergebenen punkt hat		var found:Board = null; // = myBoards[0];		// schleife ueber alle boards		for (var i in myBoards) {			// aktuelles board			var board:Board = myBoards[i];			// y-abstand zwischen board und uebergebener position			var ydiff:Number = pos.y - board.position.y;			// bei negativem abstand, naechstes board			if (ydiff < 0) continue;			// falls board voll, naechstes board			if (!board.available) continue;			// dieses board war gesucht			found = board;			// abbrechen			break;		}		// keins gefunden		if (found == null) {			// ganz unten anfangen			found = getBoardByPos(new Point(0, Stage.height));		}		// gefundenes zurueck geben		return found;	}		public function getDropPos(pos:Point ):Point	{		// regalbrett an dieser position		var board:Board = getBoardByPos(pos);		// index im array der buecher in diesem regalbrett		var index:Number = board.getIndexByPos(pos);		// position, an der das buch landen wuerde		var droppos:Point = board.getPosByIndex(index);		// zurueck geben		return (droppos);	}		public function showRandomBooks():Number	{		// aktuelles level des spiels		var level:Number = _global.Room.level;				// anzahl der boards, die befuellt werden sollen		var numboards:Number = Math.round(myStartBoards.max - (level - 1) * (myStartBoards.max - myStartBoards.min) / myStartBoards.level);		// deckeln		if (level > myStartBoards.level) numboards = myStartBoards.min;				// maximale anzahl der buecher je board		var maxbooks:Number = Math.round(myStartBooks.max - (level - 1) * (myStartBooks.max - myStartBooks.min) / myStartBooks.level);		// durchschnittliche tatsaechliche anzahl buecher je board		var average:Number;				// boards, die mit buechern befuellt werden		var boards:Array = [];		// array mit zufallszahlen, um die boards auszuwaehlen		var rand:Array = _global.Room.getRandomNumArray(numboards, 0, 4, 1);		// boards auswaehlen		for (var i in rand) boards.push(myBoards[rand[i]]);		// schleife ueber die ausgewaehlten boards		for (var j = 0; j < numboards; j ++) {			// aktuelles board			var board:Board = boards[j];			// anzahl buecher per zufall verringern			var numbooks:Number = maxbooks - Math.round(Math.random() / 2 * maxbooks);			// deckeln			if (numbooks < myStartBooks.min) numbooks = myStartBooks.min;			// zur berechnung des durchschnitts summieren			average += numbooks;			// buch ganz links erhaelt zufaelligen buchstaben			var leftchar:Number = 97 + Math.round(Math.random() * (26 - numbooks));						// schleife ueber anzahl buecher			for (var k:Number = 0; k < numbooks; k++) {				// buchstabe				var character:String = String.fromCharCode(leftchar + k);				// buch einfuegen				board.addStartBook(k, character);			}		}		// durchschnitt berechnen		average /= numboards;		// und zurueckgeben		return (Math.round(average));	}		public function getBookCount():Number	{		// anzahl buecher im regal		var count:Number = 0;		// schleife ueber alle boards		for (var i in myBoards) count += myBoards[i].count.act;		// zurueck geben		return (count);	}		public function getFreeBoards():Number	{		// anzahl boards, in die noch buecher passen		var count:Number = 0;		// schleife ueber alle boards		for (var i in myBoards) count += Number(myBoards[i].available == true);		// zurueck geben		return (count);	}} /* end class Shelf */