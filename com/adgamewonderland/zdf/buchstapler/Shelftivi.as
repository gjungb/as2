/* Shelftivi** Generated from ArgoUML Model ** ActionScript 2 generator module provided by www.codealloy.com */ /*klasse:			Shelftiviautor: 			gerd jungbluth, adgame-wonderlandemail:			gerd.jungbluth@adgame-wonderland.dekunde:			zdf / tivierstellung: 		14.06.2004zuletzt bearbeitet:	08.07.2004durch			gjstatus:			in bearbeitung*/import com.adgamewonderland.zdf.buchstapler.*import com.adgamewonderland.agw.*class com.adgamewonderland.zdf.buchstapler.Shelftivi extends MovieClip {	// Attributes		private var _myStartBoards:Object // min, max, level		private var _myStartWords:Object // min, max, level		private var _myStartMissing:Object // min, max, level		private var _myStartShuffle:Object // min, max, level		private var myStartBoards:Object		private var myStartWords:Object		private var myStartMissing:Object		private var myStartShuffle:Object		private var myBoards:Array;		// Operations		public  function Shelftivi()	{		// minimale, maximale befuellte boards am anfang, anzahl der level, bis maximum erreicht wird (aus komponentenparameter)		myStartBoards = _myStartBoards;		// minimale, maximale anzahl loesungsbegriffe am anfang, anzahl der level, bis maximum erreicht wird (aus komponentenparameter)		myStartWords = _myStartWords;		// minimale, maximale prozent fehlender buchstaben am anfang, anzahl der level, bis maximum erreicht wird (aus komponentenparameter)		myStartMissing = _myStartMissing;		// minimale, maximale prozent zu mischender buchstaben am anfang, anzahl der level, bis maximum erreicht wird (aus komponentenparameter)		myStartShuffle = _myStartShuffle;		// regalbretter		myBoards = [];	}		public  function registerBoard(board:Board ):Void	{		// in array schreiben		myBoards.push(board);	}		public  function initShelf():Void	{		// alle boards initialisieren		for (var i in myBoards) {			// initialisieren			myBoards[i].initBoard();		}	}		public  function getBoardByPos(pos:Point ):Board	{		// gesucht wird das board, das den geringsten positiven y-abstand zum uebergebenen punkt hat		var found:Board = null; // = myBoards[0];		// schleife ueber alle boards		for (var i in myBoards) {			// aktuelles board			var board:Board = myBoards[i];			// y-abstand zwischen board und uebergebener position			var ydiff:Number = pos.y - board.position.y;			// bei negativem abstand, naechstes board			if (ydiff < 0) continue;			// falls board voll, naechstes board			if (!board.available) continue;			// dieses board war gesucht			found = board;			// abbrechen			break;		}		// keins gefunden		if (found == null) {			// ganz unten anfangen			found = getBoardByPos(new Point(0, Stage.height));		}		// gefundenes zurueck geben		return found;	}		public function getDropPos(pos:Point ):Point	{		// regalbrett an dieser position		var board:Board = getBoardByPos(pos);		// index im array der buecher in diesem regalbrett		var index:Number = board.getIndexByPos(pos);		// position, an der das buch landen wuerde		var droppos:Point = board.getPosByIndex(index);		// zurueck geben		return (droppos);	}		public function showRandomBooks(solutions:Array ):Void	{		// aktuelles level des spiels		var level:Number = _global.Room.level;				// anzahl der boards, die befuellt werden sollen		var numboards:Number = Math.round(myStartBoards.min + (level - 1) * (myStartBoards.max - myStartBoards.min) / myStartBoards.level);		// deckeln		if (level > myStartBoards.level) numboards = myStartBoards.max;				// anzahl der loesungsbegriffe je board		var numwords:Number = Math.round(myStartWords.min + (level - 1) * (myStartWords.max - myStartWords.min) / myStartWords.level);		// deckeln		if (level > myStartWords.level) numwords = myStartWords.max;				// prozent der fehlenden buchstaben je loesungsbegriff		var percentmissing:Number = Math.round(myStartMissing.min + (level - 1) * (myStartMissing.max - myStartMissing.min) / myStartMissing.level);		// deckeln		if (level > myStartMissing.level) percentmissing = myStartMissing.max;				// prozent der zu mischenden buchstaben		var percentshuffle:Number = Math.round(myStartShuffle.min + (level - 1) * (myStartShuffle.max - myStartShuffle.min) / myStartShuffle.level);		// deckeln		if (level > myStartShuffle.level) percentshuffle = myStartShuffle.max;				// boards, die mit buechern befuellt werden		var boards:Array = [];		// array mit zufallszahlen, um die boards auszuwaehlen		var rand:Array = _global.Room.getRandomNumArray(numboards, 0, myBoards.length - 1, 1);		// boards auswaehlen		for (var i in rand) boards.push(myBoards[rand[i]]);				// schleife ueber die ausgewaehlten boards		for (var j = 0; j < numboards; j ++) {			// aktuelles board			var board:Board = boards[j];						// loesungswoerter, die in das board gestellt werden			var words:Array = [];			// array mit zufallszahlen, um die loesungswoerter auszuwaehlen			var rand:Array = _global.Room.getRandomNumArray(numwords, 0, solutions.length - 1, 1);			// loesungswoerter auswaehlen			for (var k in rand) words.push(solutions[rand[k]]);						// schleife ueber loesungswoerter			for (var l in words) {				// aktuelles wort				var word:String = words[l];				// anzahl fehlender buchstaben				var nummissing:Number = Math.round(percentmissing * word.length / 100);				// mindestens eins, damit keine loesungswoerter am anfang				if (nummissing < 1) nummissing = 1;								// array mit zufallszahlen, um die zu loeschenden buchstaben auszuwaehlen				var rand:Array = _global.Room.getRandomNumArray(nummissing, 0, word.length - 1, 1);				// wort als array, um einzelne buchstaben loeschen zu koennen				var wordarr:Array = word.split("");				// buchstaben loeschen				for (var m in rand) wordarr[rand[m]] = "";				// wieder zusammen bauen				word = wordarr.join("");				// und wieder in array schreiben				words[l] = word;			}			// loesungswoerter zu einem string verbinden			var wordstr:String = words.join("");						// anzahl der buchstaben, die vertauscht werden			var numshuffle:Number = Math.round(percentshuffle * wordstr.length / 100);			// array mit zufallszahlen, um die zu loeschenden buchstaben auszuwaehlen			var rand:Array = _global.Room.getRandomNumArray(numshuffle, 0, wordstr.length - 1, 1);			// wort als array, um einzelne buchstaben verschieben zu koennen			var shufflearr:Array = wordstr.split("");			// buchstaben verschieben			for (var n in rand) {				// hinten anhaengen				shufflearr[shufflearr.length] = shufflearr[rand[n]];				// an bisheriger stelle loeschen				shufflearr[rand[n]] = "";			}			// wieder zusammen bauen			wordstr = shufflearr.join("");						// schleife ueber einzelne buchstaben			for (var o=0; o < wordstr.length; o++) {				// buchstabe				var character:String = wordstr.substr(o, 1);				// buch einfuegen				board.addStartBook(o, character);			}		}	}		public function getBookCount():Number	{		// anzahl buecher im regal		var count:Number = 0;		// schleife ueber alle boards		for (var i in myBoards) count += myBoards[i].count.act;		// zurueck geben		return (count);	}		public function getFreeBoards():Number	{		// anzahl boards, in die noch buecher passen		var count:Number = 0;		// schleife ueber alle boards		for (var i in myBoards) count += Number(myBoards[i].available == true);		// zurueck geben		return (count);	}} /* end class Shelftivi */