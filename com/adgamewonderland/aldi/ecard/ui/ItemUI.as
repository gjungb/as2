/* 
 * Generated by ASDT 
*/ 

import com.adgamewonderland.agw.math.Rectangle;
import com.adgamewonderland.aldi.ecard.beans.Item;
import com.adgamewonderland.aldi.ecard.ui.PaletteUI;
import com.adgamewonderland.aldi.ecard.ui.StageUI;

class com.adgamewonderland.aldi.ecard.ui.ItemUI extends MovieClip {
	
	private static var SCALE_MIN:Number = 20;
	
	private static var SCALE_MAX:Number = 200;
	
	private static var SCALE_DIFF:Number = 20;
	
	private var myStageUI:StageUI;
	
	private var canvas:Rectangle;
	
	private var editable:Boolean;
	
	private var moving:Boolean;
	
	private var palette_mc:PaletteUI;
	
	public function ItemUI() {
		myStageUI = StageUI(_parent);
		canvas = new Rectangle(0, 0, _width, _height);
		moving = false;
		watch("editable", onSetEditable, null);
		editable = false;
	}

	public function getCanvas():Rectangle {
		return canvas;
	}

	public function getEditable():Boolean {
		return editable;
	}

	public function setEditable(editable:Boolean):Void {
		this.editable = editable;
	}

	public function setMoving(moving:Boolean):Void
	{
		this.moving = moving;
	}
	
	public function getMoving():Boolean
	{
		return moving;
	}
	
	public function scaleItem(dir:Number ):Void
	{
		// neue skalierung
		var scale:Number = _xscale + dir * SCALE_DIFF;
		// skalieren, wenn erlaubt
		if (scale >= SCALE_MIN && scale <= SCALE_MAX) {
			// skalieren
			_xscale = _yscale = scale;
			// palette invers skalieren
			palette_mc._xscale = palette_mc._yscale = 100 / scale * 100;
		}
	}
	
	public function removeItem():Void
	{
		// nicht mehr editierbar
		setEditable(false);
		// loschen
		myStageUI.removeItem(this);
	}
	
	public function isMouseOverPalette():Boolean
	{
		// zuruck geben, ob maus ueber palette
		return palette_mc.hitTest(_root._xmouse, _root._ymouse, true);
	}
	
	public function getAsBean():Item
	{
		// neues item
		var item:Item = new Item();
		// x
		item.setX(_x);
		// y
		item.setY(_y);
		// scale
		item.setScale(_xscale);
		
		// zurueck geben
		return item;
	}
	
	private function onSetEditable(prop:String, oldval:Boolean, newval:Boolean):Boolean
	{
		// palette umschalten
		showPalette(newval);
		// neuen wert setzen
		return newval;
	}
	
	private function showPalette(bool:Boolean ):Void
	{
		// ein- / ausblenden
		switch (bool) {
			// einblenden
			case true :
				// attachen
				palette_mc = attachPalette();
				// positionieren
				palette_mc._x = 0;
				palette_mc._y = 0;
				// skalieren
				scaleItem(0);
				
				break;	
			// ausblenden
			case false :
				// loeschen
				palette_mc.removeMovieClip();
				
				break;
		}
	}
	
	private function attachPalette():PaletteUI
	{
		// attachen
		var mc:PaletteUI = PaletteUI(attachMovie("PaletteUI", "palette_mc", 1));
		// zurueck geben
		return mc;
	}

}