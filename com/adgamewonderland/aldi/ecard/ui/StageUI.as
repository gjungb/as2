/* 
 * Generated by ASDT 
*/ 

import com.adgamewonderland.agw.math.Rectangle;
import com.adgamewonderland.aldi.ecard.beans.Item;
import com.adgamewonderland.aldi.ecard.beans.ItemGraphics;
import com.adgamewonderland.aldi.ecard.beans.ItemText;
import com.adgamewonderland.aldi.ecard.ui.ItemGraphicsUI;
import com.adgamewonderland.aldi.ecard.ui.ItemTextUI;
import com.adgamewonderland.aldi.ecard.ui.ItemUI;

class com.adgamewonderland.aldi.ecard.ui.StageUI extends MovieClip {
	
	private var _myXpos:Number;
	
	private var _myYpos:Number;
	
	private var _myWidth:Number;
	
	private var _myHeight:Number;
	
	private var editable:Boolean;
	
	private var myCanvas:Rectangle;
	
	private var items:Array;
	
	public function StageUI() {
		items = [];
		editable = false;
	}

	public function getEditable():Boolean {
		return editable;
	}

	public function setEditable(editable:Boolean):Void {
		this.editable = editable;
	}
	
	public function getItems():Array {
		return items;
	}

	public function setItems(items:Array):Void {
		this.items = items;
	}
	
	public function addItem(item:Item ):Void
	{
		// id
		var id:Number = item.getId();
		// x
		var xpos:Number = item.getX();
		// y
		var ypos:Number = item.getY();
		// scale
		var scale:Number = item.getScale();
		// type
		var type:String = item.getType();
		
		// neues item?
		var newitem:Boolean = (id == null);
		// wenn neu, default-werte
		if (newitem) {
			// naechste id
			id = getItems().length;
		}
		
		// attachtes movieclip
		var mc;
		
		// type
		switch (type) {
			// graphics	
			case "graphics" :
				// attachen
				mc = ItemGraphicsUI(this.attachMovie("ItemGraphicsUI", "item" + id + "_mc", id));
				// motif anzeigen
				mc.setMotif(ItemGraphics(item).getMotif());
			
				break;
			// text	
			case "text" :
				// attachen
				mc = ItemTextUI(this.attachMovie("ItemTextUI", "item" + id + "_mc", id));
				// text setzen
				mc.setText(ItemText(item).getText());
				// color setzen
				mc.setColor(ItemText(item).getColor());
				// font setzen
				mc.setFont(ItemText(item).getFont());
				// wenn nicht neu, nicht selektierbar
				if (!newitem) mc.setSelectable(false);
			
				break;
			// unbekannt
			default :
				trace("addItem: " + type);
		}
		// speichern
		getItems().push(mc);
		
		// wenn neu, zentriert und 100 prozent
		if (newitem) {
			// zentriert
			xpos = _myXpos + _myWidth / 2 - mc._width / 2;
			ypos = _myYpos + _myHeight / 2 - mc._height / 2;
			// nicht skaliert
			scale = 100;		
		}
		
		// positionieren
		mc._x = xpos;
		mc._y = ypos;
		// skalieren
		mc._xscale = mc._yscale = scale;
		// editierbar
		mc.setEditable(getEditable());
	}
	
	public function removeItem(mc:ItemUI ):Void
	{
		// schleife ueber alle items
		for (var i:String in getItems()) {
			// aktuelles item
			var item:ItemUI = getItems()[i];
			// testen, ob uebergebenes item
			if (mc == item) {
				// von buehne loeschen
				item.removeMovieClip();
				// aus array loeschen
				getItems().splice(Number(i), 1);
				// abbrechen
				break;
			}
		}
		// name und depth aller items auf index setzen
		for (var j:Number = 0; j < getItems().length; j++) {
			// name
			getItems()[j]._name = "item" + j + "_mc";
			// depth
			getItems()[j].swapDepths(j);
		}
	}
	
	public function getItemsAsBeans():Array
	{
		// items als beans
		var beans:Array = [];
		// schleife ueber alle items
		for (var i:Number = 0; i < getItems().length; i++) {
			// als bean
			var item:Item = getItems()[i].getAsBean();
			// id
			item.setId(i);
			// als bean speichern
			beans.push(item);
		}
		// zurueck geben
		return beans;
	}
	
	public function showItems(items:Array ):Void
	{
		// schleife ueber alle items
		for (var i : Number = 0; i < items.length; i++) {
			// anzeigen
			addItem(items[i]);
		}
	}
	
	public function resetItems():Void
	{
		// schleife ueber alle items
		for (var i:String in getItems()) {
			// loeschen
			getItems()[i].removeMovieClip();
		}
		// array leeren
		getItems().splice(0);
	}
	
	public function onMouseDown():Void
	{
		// abbrechen, wenn nicht editierbar
		if (!getEditable()) return;
		
		// schleife ueber alle items
		for (var i:String in items) {
			// aktuelles item
			var item:ItemUI = items[i];
			
			// hit test
			var inside:Boolean = item.hitTest(_xmouse, _ymouse, true);
			// wenn innerhalb
			if (inside) {
				// abbrechen, wenn ueber palette
				if (item.isMouseOverPalette()) return;
				// item auswaehlen
				item.setMoving(true);
				// ganz nach vorne
				item.swapDepths(Math.pow(2, 20) - 1);
				// draggen
//				item.startDrag(false, _myXpos, _myYpos, _myXpos + _myWidth - item._width, _myYpos + _myHeight - item._height);
				item.startDrag(false, _myXpos, _myYpos, _myXpos + _myWidth, _myYpos + _myHeight);
				// abbrechen
				break;	
			}
		}
		// alle items nicht editierbar
		for (var i:String in items) items[i].setEditable(false);
	}
	
	public function onMouseUp():Void
	{
		// abbrechen, wenn nicht editierbar
		if (!getEditable()) return;
		
		// schleife ueber alle items
		for (var i:String in items) {
			// aktuelles item
			var item:ItemUI = items[i];
			// testen, ob ausgewaehlt
			if (item.getMoving()) {
				// draggen beenden
				item.stopDrag();
				// nach hinten
				item.swapDepths(Number(i));
				// item abwaehlen
				item.setMoving(false);
				// item editierbar
				item.setEditable(true);
			}
		}
	}

}