/* 
 * Generated by ASDT 
*/ 

import com.adgamewonderland.aldi.pipeman.beans.Exit;

class com.adgamewonderland.aldi.pipeman.beans.Pipe {
	
	public static var TYPE_PIPE:Number = 1;
	
	public static var TYPE_BOMB:Number = 2;
	
	public static var TYPE_MUST:Number = 3;
	
	public static var ID_BLOCKED:Number = 9;
	
	private var id:Number;
	
	private var type:Number;
	
	private var exits:Array;
	
	private var entry:Exit;
	
	public function Pipe(id:Number, type:Number ) {
		this.id = id;
		this.type = type;
		this.exits = [];
		this.entry = null;
	}
	
	public function hasExit(type:Number ):Boolean
	{
		// hat die pipe einen exit des uebergebenen typs
		var hasexit:Boolean = false;
		// aktueller exit
		var exit:Exit;
		// schleife ueber exits
		for (var i:Number = 0; i < exits.length; i++) {
			// aktueller exit
			exit = exits[i];
			// testen, ob vorhanden
			if (exit.getType() == type) {
				// gefunden
				hasexit = true;
				// abbrechen
				break;	
			}
		}
		// zurueck geben
		return hasexit;
	}
	
	public function getExit():Exit
	{
		// ermittelt exit je nach entry
		var exit:Exit = null;
		// wie viele moegliche ausgaenge
		var numexits:Number = getExits().length - 1;
		// algorithmus verschieden je nach anzahl
		switch (numexits) {
			// einer => eindeutig
			case 1 :
				// exit finden, der nicht entry entspricht
				for (var i:String in exits) {
					if (exits[i].getType() != getEntry().getType()) exit = exits[i];
				}
			
				break;
			// drei => kreuzung
			case 3 :
				// exit gegenueber entry
				exit = Exit.getOppositeExit(getEntry());
				
				break;
				
			default :
			
				trace(numexits + " exits moeglich");
			
		}
		// zurueck geben
		return exit;
	}
	
	public function getType():Number {
		return type;
	}

	public function setType(type:Number):Void {
		this.type = type;
	}

	public function getExits():Array {
		return exits;
	}

	public function setExits(exits:Array):Void {
		this.exits = exits;
	}

	public function getId():Number {
		return id;
	}

	public function setId(id:Number):Void {
		this.id = id;
	}

	public function getEntry():Exit {
		return entry;
	}

	public function setEntry(entry:Exit):Void {
		this.entry = entry;
	}
	
	public function toString():String {
		return "Pipe: id=" + getId() + ", type=" + getType();
	}

}