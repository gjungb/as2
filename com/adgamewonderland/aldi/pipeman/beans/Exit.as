/* 
 * Generated by ASDT 
*/ 

class com.adgamewonderland.aldi.pipeman.beans.Exit {
	
	public static var TYPE_UP:Number = 0;
	
	public static var TYPE_RIGHT:Number = 1;
	
	public static var TYPE_DOWN:Number = 2;
	
	public static var TYPE_LEFT:Number = 3;
	
	public static var TYPE_NONE:Number = 4;
	
	private var row:Number;
	
	private var column:Number;
	
	private var type:Number;
	
	public function Exit(row:Number, column:Number, type:Number ) {
		this.row = row;
		this.column = column;
		this.type = type;
	}
	
	public static function getExit(type:Number ):Exit
	{
		// neuer exit
		var exit:Exit = new Exit(0, 0, type);
		// zeile und spalte je nach type
		switch (type) {
			case TYPE_UP :
				exit.setRow(-1);
				exit.setColumn(0);
				break;
			case TYPE_RIGHT :
				exit.setRow(0);
				exit.setColumn(1);
				break;
			case TYPE_DOWN :
				exit.setRow(1);
				exit.setColumn(0);
				break;
			case TYPE_LEFT :
				exit.setRow(0);
				exit.setColumn(-1);
				break;
			case TYPE_NONE :
				exit.setRow(0);
				exit.setColumn(0);
				break;
		}
		// zurueck geben
		return exit;	
	}
	
	public static function getOppositeExit(exit:Exit ):Exit
	{
		// typ des entgegengesetzten exit
		var opposite:Number = TYPE_NONE;
		// entgegengesetzter type je nach type
		switch (exit.getType()) {
			case TYPE_UP :
				opposite = TYPE_DOWN;
				break;
			case TYPE_RIGHT :
				opposite = TYPE_LEFT;
				break;
			case TYPE_DOWN :
				opposite = TYPE_UP;
				break;
			case TYPE_LEFT :
				opposite = TYPE_RIGHT;
				break;
			case TYPE_NONE :
				opposite = TYPE_NONE;
				break;
		}
		// zurueck geben
		return Exit.getExit(opposite);
	}
	
	public function getColumn():Number {
		return column;
	}

	public function setColumn(column:Number):Void {
		this.column = column;
	}

	public function getRow():Number {
		return row;
	}

	public function setRow(row:Number):Void {
		this.row = row;
	}

	public function getType():Number {
		return type;
	}

	public function setType(type:Number):Void {
		this.type = type;
	}
	
	public function toString():String {
		return "Exit: row=" + getRow() + ", column=" + getColumn() + ", type=" + getType();
	}

}