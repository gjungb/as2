/* 
 * Generated by ASDT 
*/ 

import mx.utils.Delegate;

import com.adgamewonderland.aldi.pipeman.beans.Cell;
import com.adgamewonderland.aldi.pipeman.beans.Grid;
import com.adgamewonderland.aldi.pipeman.beans.Pipe;
import com.adgamewonderland.aldi.pipeman.beans.Supply;
import com.adgamewonderland.aldi.pipeman.ui.CellUI;

class com.adgamewonderland.aldi.pipeman.ui.GridUI extends MovieClip {
	
	private var celluis:Array;
	
	private var go_btn:Button;
	
	public function GridUI() {
		// registrieren
		Grid.getInstance().addListener(this);
	}
	
	public function onLoad():Void
	{
		// celluis
		this.celluis = new Array();
		// button initialisieren
		go_btn.onRelease = Delegate.create(this, onPressGo);
		// button deaktivieren
		go_btn.enabled = false;
		go_btn._alpha = 50;
	}
	
	public function onInitGrid(grid:Grid ):Void
	{
		// zelle
		var cell:Cell;
		// zelle movieclip
		var cellui:CellUI;
		// position
		var xpos:Number;
		var ypos:Number;
		// schleife ueber zeilen
		for (var i:Number = 0; i < grid.getRows(); i++) {
			// schleife ueber spalten
			for (var j:Number = 0; j < grid.getColumns(); j++) {
				// zelle
				cell = grid.getCell(i, j);
				// position
				xpos = j * CellUI.WIDTH;
				ypos = i * CellUI.HEIGHT;
				// attachen
				cellui = CellUI(this.attachMovie("CellUI", "cell_" + cell.getId() + "_mc", getNextHighestDepth(), {_x : xpos, _y : ypos, _cell : cell}));
				// speichern
				this.celluis[cell.getId()] = cellui;
				// registrieren
				cellui.addListener(this);
			}
		}
		// button aktivieren
		go_btn.enabled = true;
		go_btn._alpha = 100;
	}
	
	public function onCellUIOver(cellui:CellUI ):Void
	{
		// cell
		var cell:Cell = cellui.getCell();
		// abbrechen, wenn blockiert
		if (cell.getBlocked() == true) return;
		
		// aktuell zur verfuegung stehende pipe
		var pipe:Pipe = Supply.getInstance().getFirst();
		// pipe oder bomb
		if (pipe.getType() != Pipe.TYPE_BOMB) {
			// abbrechen, wenn nicht editierbar
			if (cell.getEditable() == false) return;
		}
		// pipe oder bomb mit transparenz anzeigen lassen
		cellui.addPipe(pipe, true);
	}
	
	public function onCellUIOut(cellui:CellUI ):Void
	{
		// cell
		var cell:Cell = cellui.getCell();
		// abbrechen, wenn blockiert
		if (cell.getBlocked() == true) return;
		
		// aktuell zur verfuegung stehende pipe
		var pipe:Pipe = Supply.getInstance().getFirst();
		// pipe oder bomb
		if (pipe.getType() != Pipe.TYPE_BOMB) {
			// abbrechen, wenn nicht editierbar
			if (cell.getEditable() == false) return;
			// pipe loeschen lassen
			cellui.removePipe();
			
		} else {	
			// bomb loeschen lassen
			cellui.removeBomb();
		}
	}
	
	public function onCellUIPress(cellui:CellUI ):Void
	{
		// cell
		var cell:Cell = cellui.getCell();
		// abbrechen, wenn blockiert
		if (cell.getBlocked() == true) return;
		
		// aktuell zur verfuegung stehende pipe
		var pipe:Pipe = Supply.getInstance().getFirst();
		// pipe oder bomb
		if (pipe.getType() != Pipe.TYPE_BOMB) {
			// abbrechen, wenn nicht editierbar
			if (cell.getEditable() == false) return;
		}
		// grid updaten
		Grid.getInstance().addPipeToCell(cellui.getCell());
	}
	
	public function onUpdateGrid(cell:Cell ):Void
	{
		// entprechendes movieclip
		var cellui:CellUI = getCellUI(cell);
		// pipe oder bomb
		if (cell.hasPipe()) {
			// pipe ohne transparenz anzeigen lassen
			cellui.addPipe(cell.getPipe(), false);
		} else {
			// pipe loeschen lassen
			cellui.removePipe();	
			// bomb loeschen lassen
			cellui.removeBomb();	
		}
	}
	
	public function onPressGo():Void
	{
		// fluessigkeit starten
		Grid.getInstance().startFlow();
	}
	
	public function onFlowStarted():Void
	{
		// button deaktivieren
		go_btn.enabled = false;
		go_btn._alpha = 50;
	}
	
	public function onFlowUpdated(cell:Cell ):Void
	{
		// entprechendes movieclip
		var cellui:CellUI = getCellUI(cell);
		// flow anzeigen
		cellui.getPipeUI().showFlow();
		// deaktivieren
		cellui.enabled = false;
	}
	
	public function onFlowStopped(success:Boolean ):Void
	{
		// aktuelles movieclip
		var cellui:CellUI;
		// alle deaktivieren
		for (var i:String in this.celluis) {
			// aktuelles movieclip
			cellui = this.celluis[i];
			// deaktivieren
			cellui.enabled = false;
		}
	}
	
	public function onResetGrid():Void
	{
		// aktuelles movieclip
		var cellui:CellUI;
		// alle loeschen
		for (var i:String in this.celluis) {
			// aktuelles movieclip
			cellui = this.celluis[i];
			// loeschen
			cellui.removeMovieClip();
		}
	}
	
	public function getCellUI(cell:Cell ):CellUI
	{
		// zurueck geben
		return this.celluis[cell.getId()];
	}
}