/* 
 * Generated by ASDT 
*/ 

import com.adgamewonderland.agw.interfaces.ITimeConsumer;
import com.adgamewonderland.agw.util.Timer;
import com.adgamewonderland.aldi.torwandschiessen.beans.Config;
import com.adgamewonderland.aldi.torwandschiessen.ui.ClockUI;
import com.adgamewonderland.aldi.torwandschiessen.ui.DisplayUI;

import de.kruesch.torwandschiessen.logic.TorwandGame;
import de.kruesch.torwandschiessen.ui.Ball;
import de.kruesch.torwandschiessen.ui.BallGiver;
import de.kruesch.torwandschiessen.ui.BallReserve;
import de.kruesch.torwandschiessen.ui.DirectionPointer;
import de.kruesch.torwandschiessen.ui.Torwand;

class com.adgamewonderland.aldi.torwandschiessen.ui.GameUI extends MovieClip implements ITimeConsumer {
	
	private var game:TorwandGame;
	
	private var ball:Ball;
	
	private var torwand:Torwand;
	
	private var pfeil:DirectionPointer;
	
	private var ballgiver:BallGiver;
	
	private var reserve:BallReserve;
	
	private var configs:Array;
	
	private var level:Number;
	
	private var goals:Number;
	
	private var score:Number;
	
	private var leveltime:Timer;
	
	private var clock_mc:ClockUI;
	
	private var display_mc:DisplayUI;
	
	private var nextlevel_mc:MovieClip;
	
	public function GameUI() {
		// ausblenden
		_visible = false;
		// konfigurationen der runden
		configs = new Array();
		configs.push(new Config(1, 60, false));
		configs.push(new Config(2, 50, false));
		configs.push(new Config(3, 40, true));
		// aktuelle runde
		level = 0;
		// summe tore
		goals = 0;
		// punktzahl
		score = 0;
		// dauer des spiels
		leveltime = new Timer();
		// trailer ausblenden
		nextlevel_mc._visible = false;
	}
	
	public function startGame():Void
	{
		// einblenden
		_visible = true;
		// aktuelle runde
		level = 0;
		// summe tore
		goals = 0;
		// punktzahl
		score = 0;
		// dauer des spiels
		leveltime = new Timer();
		// clock
		clock_mc = display_mc.getClock();
		// display resetten
		display_mc.showScore(0);
		display_mc.showLevel(1);
		display_mc.showGoals(0);
		// Spiel
		game = new TorwandGame(ball, torwand, pfeil, ballgiver, reserve);
		game.addListener(this);
		// neue runde
		nextLevel();
	}
	
	private function nextLevel():Void
	{
		// runde zaehlen
		setLevel(getLevel() + 1);
		// anzeigen
		display_mc.showLevel(getLevel());
		// trailer ausblenden
		nextlevel_mc._visible = false;
		
		// konfiguration laden
		var config:Config = getConfig(getLevel());
		// spiel resetten
		this.game.reset();
		// neue runde spielen
		this.game.startRound(config.getSeconds(), config.getChangeHoles());
		// zeit initialisieren
		initTime(config.getSeconds());
	}
	
	private function getConfig(level:Number ):Config
	{
		// konfiguration der runde
		var config:Config = this.configs[level - 1];
		// wenn leer, letzte runde nehmen
		if (config == undefined) config = this.configs[this.configs.length - 1];
		// zurueck geben
		return config;
	}
	
	public function onGoal(n):Void
	{
		// sound abspielen
		_root.mcSound.setSound("getroffen", 1);
		// summieren
		setGoals(getGoals() + 1);
		// anzeigen
		display_mc.showGoals(getGoals());
		
		// punkte zaehlen
		setScore(getScore() + 20);
		// anzeigen
		display_mc.showScore(getScore());
	}
	
	public function onMiss():Void 
	{ 
		// sound abspielen
		_root.mcSound.setSound("daneben", 1);
	}
	
	public function onOut():Void
	{ 
		onMiss();
	}
	
	public function onLatte():Void
	{ 
		onMiss();
	}
	
	public function onFinishRound(t:Number):Void 
	{ 
		// timer anhalten
		leveltime.status = false;
		// punkte zaehlen
		setScore(getScore() + t * 2);
		// anzeigen
		display_mc.showScore(getScore());
		
		// trailer einblenden
		nextlevel_mc._visible = true;
		// nach pause neue runde
		var interval:Number;
		// refrenz
		var target:GameUI = this;
		// funktion
		var doLevel:Function = function():Void {
			// neue runde
			target.nextLevel();
			// interval loeschen
			clearInterval(interval);
		};
		// umschalten
		interval = setInterval(doLevel, 5000);
	}
	
	public function onTimeout():Void
	{
		// highscoreliste anzeigen
		_root.mcHighscore.showGameover(getScore());
		// weiter auf hauptzeitleiste
		_root.gotoAndStop("frGameover");				
	}
	
	private function initTime(seconds:Number ):Void
	{
		// bei uhr anmelden
		leveltime.addConsumer(this);
		// movieclip der uhr anmelden
		leveltime.addUI(clock_mc);
		// dauer in sekunden uebergeben
		leveltime.startTime(seconds);
		// uhr starten
		leveltime.status = true;
	}
	
	public function onTimeEnded():Void {
	}
	
	public function getLevel():Number {
		return level;
	}

	public function setLevel(level:Number):Void {
		this.level = level;
	}

	public function getGoals():Number {
		return goals;
	}

	public function setGoals(goals:Number):Void {
		this.goals = goals;
	}

	public function getScore():Number {
		return score;
	}

	public function setScore(score:Number):Void {
		this.score = score;
	}

}