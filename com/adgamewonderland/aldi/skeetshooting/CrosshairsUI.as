/* 
 * Generated by ASDT 
*/ 

/*
klasse:			Crosshairs
autor: 			gerd jungbluth, adgame-wonderland
email:			gerd.jungbluth@adgame-wonderland.de
kunde:			aldi
erstellung: 		18.03.2005
zuletzt bearbeitet:	29.03.2005
durch			gj
status:			in bearbeitung
*/

import com.adgamewonderland.aldi.interfaces.Movable;
import com.adgamewonderland.collision.Point;

class com.adgamewonderland.aldi.skeetshooting.CrosshairsUI extends MovieClip implements Movable {
	
	private var DIFF:Number = 0.04;
	
	private var myMover:com.adgamewonderland.aldi.ui.Mover;
	
	private var myKiteRotationMax:Number;
	
	private var isActive:Boolean;
	
	private var myInterval:Number;
	
	private var kite_mc:MovieClip;
	
	private var connection_mc:MovieClip;
	
	public function CrosshairsUI()
	{
		// mover,der das fadenkreuz bewegt
		myMover = new com.adgamewonderland.aldi.ui.Mover(this);
		// maximale drehung des kite
		myKiteRotationMax = 90;
		// aktivitaet
		isActive = false;
		// auto position
		autoPosition(true);
	}
	
	public function set active(bool:Boolean ):Void
	{
		// aktivitaet
		isActive = bool;
	}
	
	public function get active():Boolean
	{
		// aktivitaet
		return isActive;
	}
	
	public function onEnterFrame():Void
	{
		// abbrechen, wenn nicht aktiv
		if (active == false) return;
		// startposition
		var pstart:Object = {x : _x , y : _y};
		// zielposition
		var pend:Object = {x : _root._xmouse, y : _root._ymouse};
		// bewegung in x- und y-richtung
		var diff:Object = {x : (pend.x - pstart.x) * DIFF, y : (pend.y - pstart.y) * DIFF};
		// positionieren
		setPosition(pstart.x + diff.x, pstart.y + diff.y);
		// updaten
		onMove();
	}
	
	public function onMove():Void
	{
		// figur ausrichten
		_root.mcFigure.setAngle(_x);
		// linie updaten
		_root.mcLine.updateLine(this, _root.mcFigure);
		// linie animieren
		_root.mcLine.animateLine(true);
		// parallax
		_root.mcParallax.showParallax(_x);
		// drachen drehen
		setKiteRotation();
	}
	
	public function onStopMove():Void
	{
		// linie stoppen
//		_root.mcLine.animateLine(false);
	}
	
	public function setPosition(xpos:Number, ypos:Number ):Void
	{
		// positionieren
		_x = xpos;
		_y = ypos;
	}
	
	public function followMouse(xpos:Number, ypos:Number ):Void
	{
		// an position bewegen
		moveToPosition(xpos, ypos, 1000);
	}
	
	public function moveToPosition(xpos:Number, ypos:Number, time:Number ):Void
	{
		// startposition
		var pstart:Object = {x : _x , y : _y};
		// zielposition
		var pend:Object = {x : xpos, y : ypos};
		// bewegung starten (linear)
		myMover.startMove(0, new Point(pstart.x, pstart.y), new Point(pend.x, pend.y), time, {});	
	}
	
	public function showKiteAnimation():Void
	{
		// abspielen
		kite_mc.gotoAndPlay("frClick");
	}
	
	public function autoPosition(bool:Boolean ):Void
	{
		// interval loeschen
		clearInterval(myInterval);
		// starten / stoppen
		switch (bool) {
			// starten
			case true :
			
				// zufaellige position fuer drachen
				var xpos = 50 + Math.round(Math.random() * 300);
				var ypos = 150 + Math.round(Math.random() * 200);
				// zeit fuer bewegung
				var time = 10 * Math.round(Math.sqrt(Math.pow((xpos - _x), 2) + Math.pow((ypos - _y), 2)));
				// hinfliegen lassen
				moveToPosition(xpos, ypos, time);
				// nach pause wieder
				myInterval = setInterval(this, "autoPosition", time, true);
				
				break;
			// stoppen
			case false :
				// bewegung stoppen
				myMover.stopMove();
				
				break;
		}
	}
	
	private function setKiteRotation():Void
	{
		// x-abstand zur maus
		var xdiff:Number = _root._xmouse - _x;
		// drehwinkel
		var angle:Number = (xdiff / 400) * myKiteRotationMax;
		// drachen drehen
		kite_mc._rotation = angle;
	}
	
}