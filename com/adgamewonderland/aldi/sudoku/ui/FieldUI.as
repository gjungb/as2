/* 
 * Generated by ASDT 
*/ 

import com.adgamewonderland.agw.math.Point;
import com.adgamewonderland.aldi.sudoku.beans.ContainerImpl;
import com.adgamewonderland.aldi.sudoku.beans.Content;
import com.adgamewonderland.aldi.sudoku.beans.Field;
import com.adgamewonderland.aldi.sudoku.beans.FieldImpl;
import com.adgamewonderland.aldi.sudoku.interfaces.IFieldListener;

class com.adgamewonderland.aldi.sudoku.ui.FieldUI extends MovieClip implements IFieldListener {
	
	private static var COLOR_FIXED:Number = 0x6A634E;
	
	private static var COLOR_SOLVED:Number = 0x000000;
	
	private static var COLOR_ERROR:Number = 0xFF0000;
	
	private static var SOUND_SOLVED:String = "snd_richtig";
	
	private static var SOUND_ERROR:String = "snd_falsch";
	
	private var field:FieldImpl;
	
	private var content_txt:TextField;
	
	private var effect_mc:MovieClip;
	
	private var guesses:Array;
	
	private var sounds:Object;
	
	public function FieldUI() {
		// anzuzeigende ziffer
		this.content_txt.autoSize = "center";
		// hinweise des spielers
		this.guesses = new Array();
		
		// wenn zu beginn des spiels besetzt
		if (this.field.getEditable() == false) {
			// ziffer anzeigen
			showContent(field.getContent(), COLOR_FIXED);
			// button deaktivieren
			this.enabled = false;
		}
		// als listener registrieren
		this.field.addListener(this);
		// sounds
		sounds = new Object();
		sounds[SOUND_SOLVED] = new Sound(this);
		sounds[SOUND_SOLVED].attachSound(SOUND_SOLVED);
		sounds[SOUND_ERROR] = new Sound(this);
		sounds[SOUND_ERROR].attachSound(SOUND_ERROR);
	}
	
	public function onRelease():Void
	{
		_parent.onSelectField(this);
	}
	
	public function onContentChanged(field:Field, oldcontent:Content ):Void
	{
		// ziffer in entsprechender farbe anzeigen
		showContent(field.getContent(), field.getSolved() ? COLOR_SOLVED : COLOR_ERROR);
		// passenden sound abspielen
		if (field.getContent().getId() != Content.CONTENT_EMPTY) {
			// richtig / falsch
			var snd:Sound = (field.getSolved() ? sounds[SOUND_SOLVED] : sounds[SOUND_ERROR]);
			// abspielen
			snd.start(0, 1);
		}
	}
	
	public function onGuessChanged(field:Field, guess:Content, added:Boolean ):Void
	{
	
	}
	
	public function onContainerFinished(container:ContainerImpl ):Void
	{
		// effekt abspielen
		effect_mc.gotoAndPlay("frFinished");
	}
	
	public function getCenter():Point
	{
		// mittelpunkt
		var center:Object = {x : _width / 2, y : _height / 2};
		// in globale koordinaten
		this.localToGlobal(center);
		// als punkt zurueck geben
		return new Point(center["x"], center["y"]);
	}
	
	public function getField():FieldImpl {
		return field;
	}

	public function setField(field:FieldImpl):Void {
		this.field = field;
	}
	
	private function showContent(content:Content, color:Number ):Void
	{
		// ziffer anzeigen
		this.content_txt.text = String(content.getId() != Content.CONTENT_EMPTY ? content.getId() : "");
		// einfarben
		this.content_txt.textColor = color;
	}

}