import com.meychi.MD5;
/* 
 * Generated by ASDT 
*/ 

/*
klasse:			SpeedcheckUI
autor: 			gerd jungbluth, adgame-wonderland
email:			gerd.jungbluth@adgame-wonderland.de
kunde:			adON
erstellung: 		04.08.2005
zuletzt bearbeitet:	04.08.2005
durch			gj
status:			in bearbeitung
*/

class com.adgamewonderland.adon.aol.speedcheck.SpeedcheckUI extends MovieClip {
	
	private static var SCRIPT_DOWNLOAD:String = "aol_speedcheck_download.php";
	
	private static var SCRIPT_UPLOAD:String = "aol_speedcheck_upload.php";
	
	private static var SCRIPT_URL:String = "http://www.adgame-wonderland.de/kunden/adon/aol-speedcheck/";
	
	private var myTimeStart:Number;
	
	private var myRandomString:String;
	
	private var start_btn:Button;
	
	private var message_txt:TextField;
	
	private var download_txt:TextField;
	
	private var upload_txt:TextField;
	
	public function SpeedcheckUI()
	{
		// zeit bei start der messung
		myTimeStart = getTimer();
		// zufaelliger string (vom server gesendet)
		myRandomString = "";
		// button
		start_btn.onRelease = function () {
			this._parent.checkDownload();
		};
	}
	
	public function checkDownload():Void
	{
		// cachekiller
		var cachekiller:String = MD5.calculate(Math.random().toString());
		// script
		var script:String = (_url.indexOf("http://") == -1 ? SCRIPT_URL + SCRIPT_DOWNLOAD : SCRIPT_DOWNLOAD) + "?cachekiller=" + cachekiller;
		// loader
		var loader:LoadVars = new LoadVars();
		// referenz auf speedcheck
		loader["speedcheck"] = this;
		// callback, wenn geladen (nicht onLoad, da flash zu lange braucht, um die daten einzulesen)
		loader.onData = function (src:String ) {
			// callback
			this["speedcheck"].onDownloadData(this.getBytesTotal());
			// parsen
			this.decode(src);
			// fertig geladen
			this.loaded = true;
			// callback
			this.onLoad(true);
		};
		loader.onLoad = function () {
			// download abgeschlossen
			this["speedcheck"].onDownloadComplete(this.r);
		};
		// nachricht anzeigen
		message_txt.text = "Messe Download";
		// startzeit
		myTimeStart = getTimer();
		// laden
		loader.load(script);
	}
	
	public function onDownloadData(bytes:Number ):Void
	{
		// nachricht anzeigen
		message_txt.text = "Download beendet";
		// bandbreite anzeigen
		download_txt.text = calculateBandwidth(bytes) + " kbit / s";
	}
	
	public function onDownloadComplete(str:String ):Void
	{
		// zufaelliger string (vom server gesendet)
		setRandomString(str);
		// upload testen
		checkUpload();
	}
	
	public function checkUpload():Void
	{
		// cachekiller
		var cachekiller:String = MD5.calculate(Math.random().toString());
		// script
		var script:String = (_url.indexOf("http://") == -1 ? SCRIPT_URL + SCRIPT_UPLOAD : SCRIPT_UPLOAD) + "?cachekiller=" + cachekiller;
		// loader
		var loader:LoadVars = new LoadVars();
		// zufaellliger string
		loader["r"] = getRandomString();
		// receiver
		var receiver:LoadVars = new LoadVars();
		// referenz auf speedcheck
		receiver["speedcheck"] = this;
		// laden fertig
		receiver.onLoad = function () {
			// callback
			this["speedcheck"].onUploadComplete(this.b);
		};
		// nachricht anzeigen
		message_txt.text = "Messe Upload";
		// startzeit
		myTimeStart = getTimer();
		// senden
		loader.sendAndLoad(script, receiver, "POST");
	}
	
	public function onUploadComplete(bytes:Number ):Void
	{
		// nachricht anzeigen
		message_txt.text = "Upload beendet";
		// bandbreite anzeigen
		upload_txt.text = calculateBandwidth(bytes) + " kbit / s";
	}
	
	private function calculateBandwidth(bytes:Number ):Number
	{
		// datenmenge, die geladen wurde [kbit]
		var kbits:Number = bytes * 8 / 1000;
		// zeit, die zum laden benoetigt wurde [s]
		var seconds:Number = (getTimer() - myTimeStart) / 1000;
		// bandbreite [kbit / s]
		var bandwidth:Number = Math.round(kbits / seconds);
		// zurueck geben
		return bandwidth;
	}
	
	private function setRandomString(str:String ):Void
	{
		// zufaelliger string (vom server gesendet)
		myRandomString = str;
	}
	
	private function getRandomString(kB:Number ):String
	{
		// zufaelliger string (vom server gesendet)
		return myRandomString;
	}
	
}