import com.adgamewonderland.ea.nextlevel.controllers.RepositoryController;import com.adgamewonderland.ea.nextlevel.interfaces.IRepositoryControllerListener;import com.adgamewonderland.ea.nextlevel.model.beans.impl.RepositoryImpl;import com.adgamewonderland.agw.util.EventBroadcaster;import com.adgamewonderland.agw.interfaces.IEventBroadcaster;/** * @author gerd */class com.adgamewonderland.ea.nextlevel.controllers.ApplicationController implements IEventBroadcaster, IRepositoryControllerListener{	private static var INIFILE:String = "xcap.ini";	public static var STATE_INIT:String = "frInit";	public static var STATE_STARTMENU:String = "frStartmenu";	public static var STATE_EDITOR:String = "frEditor";	public static var STATE_PRESENTATION:String = "frPresentation";	private static var _instance:ApplicationController;	private var _event:EventBroadcaster;	private var debug:Boolean;	private var state:String;	private var ui:MovieClip;	/**	 * startet die applikation	 * @param ui movieclip, das die einzelnen states anzeigt	 */	public function startApplication(ui:MovieClip ):Void	{		// swf-studio initialisieren		ssCore.init();		// synchrone operationen muessen erlaubt sein, damit die i/o-opertaionen funktionieren		ssDefaults.synchronousCommands = true;		// debug modus ein / aus		this.debug = ssDebug.showTrace = ("true" == getIniVal("Configuration", "debug"));		// movieclip, das die einzelnen states anzeigt		this.ui = ui;		// als listener fuer repository registrieren		RepositoryController.getInstance().addListener(this);		// repository laden lassen		RepositoryController.getInstance().loadRepository();	}	public function onRepositoryLoaded(repository:RepositoryImpl ):Void	{		// setze neue caption ins fenster		ssCore.Win.setCaption(			{text:repository.getMetainfo().getTitle()}		);		// neuer state: startmenu		changeState(STATE_STARTMENU);	}	/**	 * aendert den aktuellen state und springt zum entsprechenden frame im ui	 * @param state neuer state (s. STATE_)	 */	public function changeState(state:String ):Void	{		// neuer state		var newstate:String = getState();		// je nach gewuenschtem state		switch (state) {			case STATE_INIT :			case STATE_STARTMENU :			case STATE_EDITOR :			case STATE_PRESENTATION :				newstate = state;		}		// testen, ob state geaendert		if (newstate != getState()) {			// listener informieren			_event.send("onStateChanged", getState(), newstate);			// neuer state			setState(newstate);			// hinspringen			ui.gotoAndStop(newstate);		}	}	/**	 * beendet die anwendung	 */	public function stopApplication():Void	{		// beenden		ssCore.App.quit();	}	/**	 * liest einen wert aus der ini-datei aus	 * @param section section in der ini-datei	 * @param key schluessel der werts in der ini-datei	 */	public function getIniVal(section:String, key:String ):String	{		// gesuchter wert		var value:String = "";		// einlesen		var return_obj:Object = ssCore.INIFile.getVal(		{			path:"startdir://" + INIFILE,			section:section,			key:key,			defaultValue:""		});		// eingelesener wert		value = return_obj.result;		// zurueck geben		return value;	}	public static function getInstance():ApplicationController {		if (_instance == null)			_instance = new ApplicationController();		return _instance;	}	public function addListener(l:Object):Void	{		this._event.addListener(l);	}	public function removeListener(l:Object):Void	{		this._event.removeListener(l);	}	public function setState(state:String ):Void	{		this.state = state;	}	public function getState():String	{		return this.state;	}	public function setUi(ui:MovieClip ):Void	{		this.ui = ui;	}	public function getUi():MovieClip	{		return this.ui;	}	public function isDebug():Boolean	{		return this.debug;	}	private function ApplicationController()	{		this._event = new EventBroadcaster();		// debug ein / aus		this.debug = false;		// aktuller state		this.state = STATE_INIT;		// movieclip, das die einzelnen states anzeigt		this.ui = null;	}}