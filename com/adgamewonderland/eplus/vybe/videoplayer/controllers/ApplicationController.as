import com.adgamewonderland.agw.interfaces.IEventBroadcaster;import com.adgamewonderland.eplus.vybe.videoplayer.beans.impl.VideoassetsImpl;import com.adgamewonderland.eplus.vybe.videoplayer.controllers.DefaultController;import com.adgamewonderland.eplus.vybe.videoplayer.controllers.VideoassetsController;import com.adgamewonderland.eplus.vybe.videoplayer.interfaces.IVideoassetsListener;import com.adgamewonderland.eplus.vybe.videoplayer.beans.impl.MinitvlistImpl;/** * @author gerd */class com.adgamewonderland.eplus.vybe.videoplayer.controllers.ApplicationController extends DefaultController implements IEventBroadcaster, IVideoassetsListener{	public static var STATE_INIT:String = "frInit";	public static var STATE_PLAYER:String = "frPlayer";	private static var _instance:ApplicationController;	private static var ASSETS_URL:String = "http://globals.universal-music.de/export/xml/vybemobile/vybemobile-videostreaming.xml";	private var debug:Boolean;	private var state:String;	private var ui:MovieClip;	/**	 * startet die applikation	 * @param ui movieclip, das die einzelnen states anzeigt	 */	public function startApplication(ui:MovieClip, url:String ):Void	{		// movieclip, das die einzelnen states anzeigt		this.ui = ui;		// url, unter der die videoassets-xml zu finden ist		if (url == null) url = ASSETS_URL;		// als listener fuer videoassets registrieren		VideoassetsController.getInstance().addListener(this);		// videoassets laden lassen		VideoassetsController.getInstance().loadVideoassets(url);	}	public function onVideoassetsFault(data:Object ):Void	{		trace(data.faultcode);		trace(data.faultstring);	}	public function onVideoassetsLoaded():Void	{	}	/**	 * callback nach erfolgreichem laden und parsen alle videodaten	 */	public function onVideoassetsParsed(videoassets:VideoassetsImpl ):Void	{		// zum player		changeState(STATE_PLAYER);	}	/**	 * aendert den aktuellen state und springt zum entsprechenden frame im ui	 * @param state neuer state (s. STATE_)	 */	public function changeState(state:String ):Void	{		// neuer state		var newstate:String = getState();		// je nach gewuenschtem state		switch (state) {			case STATE_INIT :			case STATE_PLAYER :				newstate = state;		}		// testen, ob state geaendert		if (newstate != getState()) {			// listener informieren			_event.send("onStateChanged", getState(), newstate);			// neuer state			setState(newstate);			// hinspringen			ui.gotoAndStop(newstate);		}	}	public static function getInstance():ApplicationController {		if (_instance == null)			_instance = new ApplicationController();		return _instance;	}	public function setState(state:String ):Void	{		this.state = state;	}	public function getState():String	{		return this.state;	}	public function setUi(ui:MovieClip ):Void	{		this.ui = ui;	}	public function getUi():MovieClip	{		return this.ui;	}	public function isDebug():Boolean	{		return this.debug;	}	private function ApplicationController()	{		super();		// debug ein / aus		this.debug = false;		// aktuller state		this.state = STATE_INIT;		// movieclip, das die einzelnen states anzeigt		this.ui = null;	}	public function onMinitvlistSelected(minitvlist : MinitvlistImpl) : Void {	}}