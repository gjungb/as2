import com.adgamewonderland.agw.util.Mask;import flash.geom.Point;import mx.transitions.easing.Strong;import mx.transitions.Tween;import com.adgamewonderland.eplus.vybe.stargallery.ui.SelectorUI;import mx.utils.Collection;import mx.utils.CollectionImpl;import com.adgamewonderland.eplus.vybe.stargallery.controllers.GalleryController;import mx.utils.Iterator;import com.adgamewonderland.eplus.vybe.stargallery.beans.Artist;import flash.geom.Rectangle;/** * @author gerd */class com.adgamewonderland.eplus.vybe.stargallery.ui.ArtistsUI extends MovieClip {	private static var LISTX:Number = 12;	private static var LISTY:Number = 50;	private static var LISTWIDTH:Number = 179;	private static var LISTHEIGHT:Number = 246;	private static var SELECTORXDIFF:Number = 0;	private static var SELECTORYDIFF:Number = 0;	private static var TWEENDELAY:Number = 50;	private static var TWEENDURATION:Number = 0.2;	private static var SCROLLHEIGHT:Number = 90;	private static var SCROLLSPEED:Number = 6;	private static var SCROLLDIR_UP:Number = -1;	private static var SCROLLDIR_DOWN:Number = 1;	private var artists:Collection;	private var selectoruis:Array;	private var scrolltop:Rectangle;	private var scrollbottom:Rectangle;	private var list_mc:MovieClip;	private var mask_mc:MovieClip;	public function ArtistsUI() {		// verfuegbare artists		this.artists = new CollectionImpl();		// ausblenden		_visible = false;		// scrollsensitive flaeche am oberen rand		this.scrolltop = new Rectangle(LISTX, LISTY, LISTWIDTH, SCROLLHEIGHT);		// scrollsensitive flaeche am unteren rand		this.scrollbottom = new Rectangle(LISTX, LISTY + LISTHEIGHT - SCROLLHEIGHT, LISTWIDTH, SCROLLHEIGHT);	}	public function showArtists(artists:Collection ):Void	{		// einblenden		_visible = true;		// verfuegbare artists		this.artists = artists;		// liste aufbauen		initList();		// scrollen verfolgen		onEnterFrame = followMouse;	}	public function hideArtists():Void	{		// liste resetten		reset();		// ausblenden		_visible = false;		// scrollen verfolgen beenden		delete(onEnterFrame);	}	private function followMouse():Void	{		// mausposition		var mousepos:Point = new Point(_xmouse,_ymouse);		// scrollrichtung		var scrolldirection:Number = 0;		// prozentuale scrollgeschwindigkeit je nach abstand vom rand		var scrollpercent:Number = 0;		// testen, ob maus in oberer scrollsensitiver flaeche		if (this.scrolltop.containsPoint(mousepos)) {			// scrollrichtung nach unten			scrolldirection = SCROLLDIR_DOWN;			// scrollgeschwindigkeit steigt mit sinkendem abstand vom oberen rand			scrollpercent = 100 - Math.round((mousepos.y - this.scrolltop.y) / this.scrolltop.height * 100);		}		// testen, ob maus in unterer scrollsensitiver flaeche		if (this.scrollbottom.containsPoint(mousepos)) {			// scrollrichtung nach oben			scrolldirection = SCROLLDIR_UP;			// scrollgeschwindigkeit steigt mit sinkendem abstand vom unteren rand			scrollpercent = Math.round((mousepos.y - this.scrollbottom.y) / this.scrollbottom.height * 100);		}		// scrollen		scrollList(scrolldirection, scrollpercent);	}	private function scrollList(direction:Number, percent:Number ):Void	{		// abbrechen, wenn nichts zu scrollen		if (direction == 0 || percent == 0) return;		// um wie viele pixel soll die liste verschoben werden		var ydiff:Number = direction * percent / 100 * SCROLLSPEED;		// neue position der liste		var ypos:Number = list_mc._y + ydiff;		// erlaubte grenzen testen		if (ypos > LISTY) {			ypos = LISTY;		} else if (ypos < LISTY + LISTHEIGHT - Math.max(LISTHEIGHT, list_mc._height)) {			ypos = LISTY - (Math.max(LISTHEIGHT, list_mc._height) - LISTHEIGHT);		}		// liste scrollen		list_mc._y = Math.round(ypos);	}	private function initList():Void	{		// liste mit selectors auf buehne		list_mc = this.createEmptyMovieClip("list_mc", getNextHighestDepth());		// positionieren		list_mc._x = LISTX;		list_mc._y = LISTY;		// array mit selectors auf buehne		this.selectoruis = new Array();		// aktuelle artist		var artist:Artist;		// selector auf buehne		var ui:SelectorUI;		// position des selectors auf buehne		var pos:Point = new Point(-LISTWIDTH, 0);		// counter		var i:Number = -1;		// schleife ueber alle artists		var iterator:Iterator = this.artists.getIterator();		while (iterator.hasNext()) {			// artist			artist = Artist(iterator.next());			// auf buehne bringen			ui = addSelector(artist, pos, ++i);			// tweenen			ui.tweenInSelector(i * TWEENDELAY, Strong.easeOut, TWEENDURATION);			// naechste position berechnen			pos.offset(SELECTORXDIFF, ui._height + SELECTORYDIFF);		}		// maske fuer liste der selectors auf buehne		var mask:Mask = new Mask(this, list_mc, new com.adgamewonderland.agw.math.Rectangle(LISTX, LISTY, LISTWIDTH, LISTHEIGHT));		// maskieren		mask.drawMask();	}	private function reset():Void	{		// alle selectors von buehne loeschen		for (var i:String in this.selectoruis) {			// loeschen			SelectorUI(this.selectoruis[i]).removeMovieClip();		}		// array mit selectors leeren		this.selectoruis.splice();		// liste loeschen		list_mc.removeMovieClip();		// maske loeschen		mask_mc.removeMovieClip();	}	/**	 * fuegt ein movieclip fuer ein selector hinzu	 * @param selector selector, das auf der buehne angezeigt werden soll	 */	private function addSelector(artist:Artist, pos:Point, id:Number ):SelectorUI	{		// movieclip		var ui:SelectorUI;		// konstruktor		var constructor:Object = new Object();		// position		constructor._x = pos.x;		constructor._y = pos.y;		// artist		constructor._artist = artist;		// auf buehne		ui = SelectorUI(list_mc.attachMovie("SelectorUI", "selector" + id + "_mc", list_mc.getNextHighestDepth(), constructor));		// hinzufuegen zu array mit selectors auf buehne		this.selectoruis[id] = ui;		// zurueck geben		return ui;	}}