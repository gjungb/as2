/*  * Generated by ASDT */ /*klasse:			StrokeUIautor: 			gerd jungbluth, adgame-wonderlandemail:			gerd.jungbluth@adgame-wonderland.dekunde:			epluserstellung: 		28.02.2005zuletzt bearbeitet:	06.03.2005durch			gjstatus:			final*/import com.adgamewonderland.eplus.cebit.interfaces.*;class com.adgamewonderland.eplus.cebit.ui.StrokeUI extends MovieClip {	private var _myFpsStroke:Number;	private var myFpsStroke:Number;		private var myFpsClip:Number;		private var isActive:Boolean;		private var myUpdateCounter:Number;		private var myTime:Number;		private var myListeners:Array;		private var fps_txt:TextField;		public function StrokeUI()	{		// global ansprechbar		_global.Stroke = this;		// gewuenschte aktualisierungs-framerate [1/s]		myFpsStroke = 0;		// aktuelle framerate [1/s]		myFpsClip = 25;		// auf wert aus komponente einstellen		changeFpsStroke(_myFpsStroke);		// schalter fuer aktivitaet		active = true;		// zaehler zum update der aktuellen framerate		myUpdateCounter = 0;		// aktuelle zeit fuer messung von fps		myTime = getTimer();		// array mit angemeldeten listenern		myListeners = [];		// fps anzeige		fps_txt.autoSize = "left";	}		public function set active(bool:Boolean ):Void	{		// schalter fuer aktivitaet		isActive = bool;		// takt geben		switch (isActive) {			// einschalten			case true :				onEnterFrame = updateStroke;								break;							// ausschalten			case false :				delete(onEnterFrame);								break;		}	}		public function get fpsstroke():Number	{		// gewuenschte aktualisierungs-framerate [1/s]		return myFpsStroke;	}		public function get fpsclip():Number	{		// aktuelle framerate [1/s]		return myFpsClip;	}		public function changeFpsStroke(diff:Number ):Void	{		// testen, ob innerhalb der grenzen		if (myFpsStroke + diff > 100 || myFpsStroke + diff < 1) {			return;		}		// geschwindigkeit aendern		myFpsStroke += diff;	}		public function addListener(lst:Strokable ):Number	{		// zum array mit angemeldeten listenern		return myListeners.push(lst);	}		public function removeListener(lst:Strokable ):Boolean	{		// schleife ueber alle angemeldeten listenern		for (var i:String in myListeners) {			// wenn gefunden, abbrechen			if (myListeners[i] === lst) {				// aus array loeschen				myListeners.splice(i, 1);				// erfolgreich				return true;			}		}		// nicht erfolgreich		return false;	}		private function updateStroke():Void	{		// alle 10 frames fps ausrechnen		if (++myUpdateCounter % 10 == 0) {			// fps aus zeit seit letzter messung bestimmen			myFpsClip = Math.round(100 / (getTimer() - myTime) * 100);			// neue zeit merken			myTime = getTimer();			// fps anzeige			fps_txt.text = String(myFpsClip);		}		// nur weiter machen, wenn speed es so will		if (myUpdateCounter % Math.round(myFpsClip / myFpsStroke) != 0) {//			return;		}		// alle listener informieren		for (var i in myListeners) {			// aktueller listener			var lst:Strokable = myListeners[i];			// callback ausfuehren			lst.onUpdateStroke();		}	}}