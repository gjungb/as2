/* 
 * Generated by ASDT 
*/ 

/*
klasse:			VideoLoaderUI
autor: 			gerd jungbluth, adgame-wonderland
email:			gerd.jungbluth@adgame-wonderland.de
kunde:			eplus
erstellung: 		26.02.2005
zuletzt bearbeitet:	09.03.2005
durch			gj
status:			final
*/

import com.adgamewonderland.eplus.cebit.*;

class com.adgamewonderland.eplus.cebit.VideoLoaderUI extends MovieClip {
	
	private var _myPath:String;
	
	private var _myFileName:String;
	
	private var _myFileNum:Number;
	
	private var _myFileType:String;
	
	private var myDepth:Number;
	
	private var myVideoFiles:Array;
	
	private var myCurrentVideoFile:VideoFile;
	
	public function VideoLoaderUI() {
		// start tiefe fuer laden der videos
		myDepth = 0;
		// alle video dateien
		myVideoFiles = [];
		// video, das aktuell abgespielt wird
		myCurrentVideoFile = null;
		// alle video dateien als objekte anlegen
		for (var i:Number = 1; i <= _myFileNum; i++) {
			// neues movieclip, in das das video geladen wird
			var mc:MovieClip = this.createEmptyMovieClip("video" + (++myDepth) + "_mc", myDepth);
			// ausblenden, wird erst beim abspielen eingeblendet
			mc._visible = false;
			// dateiname
			var src:String = _myPath + "/" + _myFileName + "" + i + "" + _myFileType;
			// neues objekt
			myVideoFiles[i] = new VideoFile(i, src, mc);
		}
	}
	
	private function loadVideo(id:Number ):Void
	{
		// entsprechendes video objekt
		var video:VideoFile = myVideoFiles[id];
		// abbrechen, wenn schon geladen
		if (video.isfullyloaded) return;
		// movieclip, in das das video geladen wird
		var mc:MovieClip = video.target;
		// laden ueberwachen
		onEnterFrame = function() {
			// video stoppen und ausblenden
			resetVideo(video);
			// prozent geladen
			video.percentloaded = Math.round(mc.getBytesLoaded() / mc.getBytesTotal() * 100);
			// weiter, wenn video komplett geladen
			if (video.isfullyloaded) onVideoLoaded(video);
		};
		// laden
		mc.loadMovie(video.src);
	}
	
	private function onVideoLoaded(video:VideoFile ):Void
	{
		// laden ueberwachen beenden
		delete (onEnterFrame);
		// naechstes video laden
		if (video.id < _myFileNum) loadVideo(video.id + 1);
		// erstes video abspielen
		if (video.id == 1) showVideo(video);
	}
	
	private function showVideo(video:VideoFile ):Void
	{
		// bisheriges video stoppen und ausblenden
		resetVideo(myCurrentVideoFile);
		// video, das aktuell abgespielt wird
		myCurrentVideoFile = video;
		// movieclip, in das das video geladen wurde
		var mc:MovieClip = myCurrentVideoFile.target;
		// einblenden
		mc._visible = true;
		// abspielen
		mc.gotoAndPlay(1);
		// abspielen ueberwachen
		mc.onEnterFrame = function() {this._parent.onVideoPlaying();};
	}
	
	private function onVideoPlaying():Void
	{
		// id des aktuellen videoclips
		var id:Number = myCurrentVideoFile.id;
		// movieclip, in das das video geladen wurde
		var mc:MovieClip = myCurrentVideoFile.target;
		// testen, ob vollstaendig abgespielt
		if (mc._currentframe == mc._totalframes) {
			// ueberwachen beenden
			delete (mc.onEnterFrame);
			// naechstes video
			var nextvideo:VideoFile = myVideoFiles[id + 1];
			// wenn nicht vorhanden oder noch nicht geladen, von vorne loopen
			if (id == _myFileNum || nextvideo.isfullyloaded == false) nextvideo = myVideoFiles[1];
			// naechstes abspielen
			showVideo(nextvideo);
		}
	}
	
	public function controlVideo(mode:String ):Void
	{
		// ja nach modus
		switch (mode) {
			// anhalten
			case "stop" :
				// aktuelles video anhalten
				myCurrentVideoFile.target.stop();
			
				break;
			// abspielen
			case "play" :
				// aktuelles video abspielen
				myCurrentVideoFile.target.play();
			
				break;	
			// anhalten und zurueck spulen
			case "reset" :
				// zurueck spulen
				showVideo(myVideoFiles[1]);
				// anhalten
				controlVideo("stop");
				
				break;
			// alles andere
			default :
				trace("controlVideo: " + mode);
		}
	}
	
	private function resetVideo(video:VideoFile ):Void
	{
		// stoppen
		video.target.stop();
		// ausblenden
		video.target._visible = false;
	}
}