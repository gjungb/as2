import com.adgamewonderland.eplus.basecasting.interfaces.ICitiesControllerListener;import com.adgamewonderland.agw.util.DefaultController;import com.adgamewonderland.eplus.basecasting.controllers.CitiesController;import com.adgamewonderland.eplus.basecasting.beans.impl.CityImpl;import com.adgamewonderland.agw.util.EventBroadcaster;/** * @author gerd */class com.adgamewonderland.eplus.basecasting.controllers.ApplicationController extends DefaultController implements ICitiesControllerListener{	public static var STATE_INIT:String = "frInit";	public static var STATE_START:String = "frStart";	public static var STATE_CITY:String = "frCity";	private static var _instance:ApplicationController;	private var debug:Boolean;	private var state:String;	private var ui:MovieClip;	private var city:CityImpl;	private var date:Date;	private var clipid:Number;	/**	 * startet die applikation	 * @param ui movieclip, das die einzelnen states anzeigt	 */	public function startApplication(aUI:MovieClip, aCityId:Number, aClipId:Number, aTime:Number ):Void	{		// movieclip, das die einzelnen states anzeigt		this.ui = aUI;		// id eines clips, der angezeigt werden soll		this.clipid = Number(aClipId);		// aktuelles datum		if (aTime != null)			this.date = new Date(aTime);		// als listener fuer cities registrieren		CitiesController.getInstance().addListener(this);		// cities laden lassen		CitiesController.getInstance().loadCities(null);	}	/**	 * callback nach erfolgreichem laden und parsen aller staedte	 */	public function onCitiesParsed(aCity:CityImpl ):Void	{		// pruefen, ob initiale stadt vorhanden		if (aCity instanceof CityImpl) {			// zur cityseite			changeState(STATE_CITY);		} else {			// keinen clip anzeigen			this.clipid = null;			// zur startseite			changeState(STATE_START);		}	}	/**	 * aendert den aktuellen state und springt zum entsprechenden frame im ui	 * @param state neuer state (s. STATE_)	 */	public function changeState(aState:String ):Void	{		// neuer state		var newstate:String = getState();		// je nach gewuenschtem state		switch (aState) {			case STATE_INIT :			case STATE_START :			case STATE_CITY :				newstate = aState;		}		// testen, ob state geaendert		if (newstate != getState()) {			// listener informieren			_event.send("onStateChangeInited", getState(), newstate);			// nach pause hinspringen			var interval:Number;			var doNavigate = function(aEvent:EventBroadcaster, aState:String, aNewstate:String, aUI:MovieClip, aFrame:String ):Void {				// listener informieren				aEvent.send("onStateChanged", aState, aNewstate);				// hinspringen				aUI.gotoAndStop(aFrame);				// interval loeschen				clearInterval(interval);			};			interval = setInterval(doNavigate, 1000 / 25 * 10, _event, getState(), newstate, this.ui, newstate);			// neuer state			setState(newstate);		}	}	public function selectCity(aCity:CityImpl ):Void	{		// speichern		CitiesController.getInstance().setCurrentcity(aCity);		// pruefen, ob initiale stadt vorhanden		if (aCity instanceof CityImpl) {			// zur cityseite			changeState(STATE_CITY);		} else {			// zur startseite			changeState(STATE_START);		}	}	public static function getInstance():ApplicationController {		if (_instance == null)			_instance = new ApplicationController();		return _instance;	}	public function setState(aState:String ):Void	{		this.state = aState;	}	public function getState():String	{		return this.state;	}	public function getUi():MovieClip	{		return this.ui;	}	public function getDate():Date	{		return this.date;	}	public function setClipid(aClipId:Number ):Void	{		this.clipid = aClipId;	}	public function getClipid():Number	{		return this.clipid;	}	public function isDebug():Boolean	{		return this.debug;	}	private function ApplicationController()	{		super();		// debug ein / aus		this.debug = false;		// aktuller state		this.state = STATE_INIT;		// movieclip, das die einzelnen states anzeigt		this.ui = null;		// aktuelles datum		this.date = new Date();	}}