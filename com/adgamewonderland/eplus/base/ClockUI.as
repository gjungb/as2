/** * @author gerd */import com.adgamewonderland.agw.interfaces.ITimeConsumer;import com.adgamewonderland.agw.interfaces.ITimeUI;import com.adgamewonderland.agw.util.Timer;class com.adgamewonderland.eplus.base.ClockUI extends MovieClip implements ITimeConsumer, ITimeUI {	private static var DATEEND:Date = new Date(2008, 6, 1);	private var _txtsingular:String = "Tag!";	private var _txtplural:String = "Tage!";	private var timer:Timer;	private var myDate:Date;	private var myWeekdays:Array;	private var myTime:Number;	private var myStartTime:Number;	private var myRound:Object;	private var days_txt:TextField;	private var hours_txt:TextField;	private var minutes_txt:TextField;	private var seconds_txt:TextField;	private var unit_txt:TextField;	public function ClockUI()	{		// aktuelles datum		var now:Date = new Date();		// ggf. von aussen uebergebenes nehmen		if (_root.now != undefined) {			now.setTime(Number(_root.now) * 1000);		}		// enddatum		var end:Date = DATEEND;		// ggf. von aussen uebergebenes nehmen		if (_root.enddate != undefined) {			end.setTime(Number(_root.enddate) * 1000);		}		// sekunden bis zielzeit		var duration:Number = (end.getTime() - now.getTime()) / 1000;		// textfelder		days_txt.autoSize = "none";		hours_txt.autoSize = "center";		minutes_txt.autoSize = "center";		seconds_txt.autoSize = "center";		unit_txt.autoSize = "center";				// entweder starten, oder beenden		if (duration > 0) {			// timer			timer = new Timer();			// bei uhr anmelden			timer.addConsumer(this);			// movieclip der uhr anmelden			timer.addUI(this);			// dauer in sekunden uebergeben			timer.startTime(duration);			// uhr starten			timer.status = true;		} else {			// beenden				onTimeEnded();		}	}	public function showTime(tobj:Timer ):Void	{		// sekunden bis zielzeit		var left:Number = tobj.getSeconds()["left"];		// formatieren		var ftime:Array = Timer.getFormattedTime(left, ":").split(":");		// sekunden		var seconds:Number = ftime[2];		// minuten		var minutes:Number = ftime[1];		// stunden		var hours:Number = ftime[0];		// tage		var days:Number = Math.floor(hours / 24);		// stunden bis tagesende		hours = hours % 24;		// anzeigen		days_txt.text = String(days);		hours_txt.text = String(leadingZero(hours));		minutes_txt.text = String(minutes);		seconds_txt.text = String(seconds);		// einheit		unit_txt.text = (days == 1 ? _txtsingular : _txtplural);	}	public function onTimeEnded():Void	{		// zum frame mit statischem inhalt springen		gotoAndStop("frEnded");	}	private function leadingZero(num:Number ):String	{		// in string umwandeln		var str:String = num.toString();		// falls kuerzer als zwei zeichen		if (str.length < 2) {			// nullen vorne dran			str = "0" + str;		}		// zurueck geben		return (str);	}} /* end class Clock */