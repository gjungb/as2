/* Login** Generated from ArgoUML Model ** ActionScript 2 generator module provided by www.codealloy.com */ /*klasse:			Loginautor: 			gerd jungbluth, adgame-wonderlandemail:			gerd.jungbluth@adgame-wonderland.dekunde:			agwerstellung: 		21.04.2004zuletzt bearbeitet:	03.06.2004durch			gjstatus:			in bearbeitung*/import com.adgamewonderland.eplus.soccer.game.*;import com.adgamewonderland.eplus.soccer.microsite.*;import com.meychi.MD5;import com.adgamewonderland.agw.*;class com.adgamewonderland.eplus.soccer.game.Login extends Box {	// Attributes		private var myUser:User;		private var myXMLConnector:XMLConnector;		private var myFormprocessor:Formprocessor;		private var myPassword:String;		private var myLso:SharedObject;		private var email_txt:TextField, password_txt:TextField, newpwd1_txt:TextField, newpwd2_txt:TextField, message_txt:TextField;		private var nickname_txt:TextField, firstname_txt:TextField, lastname_txt:TextField, phone_txt:TextField, street_txt:TextField, postcode_txt:TextField, city_txt:TextField, age_txt:TextField;		private var clear_mc:MovieClip, send_mc:MovieClip, cancel_mc:MovieClip, register_mc:MovieClip, registertxt_mc:MovieClip, optin_mc:MovieClip, close_mc:MovieClip;		private var myButtons:Array;		private var myInterval:Number;		// Operations		public  function Login()	{		// klassenname		myClassName = "Login";		// user (mit leerer email)		myUser = new User("");		// xml connector		myXMLConnector = new XMLConnector(this, _global.scriptPath);		// form processor		myFormprocessor = new Formprocessor();		// password		myPassword = "";		// lso zum speichern / laden der email		myLso = SharedObject.getLocal("eplussoccer");		// buttons initialisieren		initButtons();	}		// buttons initialisieren	public function initButtons():Void	{		// array mit buttons		myButtons = [clear_mc, send_mc, register_mc, close_mc];		// callback beim druecken von "zurueck"		close_mc.onRelease = function () {			_global.Subgame.closeBox();		}		// aktivieren		active = true;		// login formular initalisieren		initForm("login");	}		private  function initForm(form:String ):Void	{		// interval loeschen		clearInterval(myInterval);		// je nach formular		switch (form) {			// login			case "login" :				// hinspringen				gotoAndStop("frLogin");				// email und password als eingabefelder				email_txt.selectable = password_txt.selectable = true;				email_txt.type = password_txt.type = "input";				// gespeicherte email laden				email_txt.text = (typeof myLso.data.email != "undefined" ? myLso.data.email : email_txt.text);				// callback beim druecken von "clear"				clear_mc.onRelease = function () {					this._parent.clearForm();				}				// callback beim druecken von "send"				send_mc.onRelease = function () {					this._parent.sendLogin();				}				// callback beim druecken von "register"				register_mc.onRelease = function () {					this._parent.initForm("register");				}				// nach der registrierung				if (myInterval) {					// nachricht					showMessage("Sie erhalten ein Passwort per E-Mail");					// button "registrieren" ausblenden					register_mc._visible = false;					// text "zum registrieren" ausblenden					registertxt_mc._visible = false;				}							break;			// settings			case "settings" :				// hinspringen				gotoAndStop("frSettings");				// passwords als eingabefelder				newpwd1_txt.selectable = newpwd2_txt.selectable = true;				newpwd1_txt.type = newpwd2_txt.type = "input";				// callback beim druecken von "send"				send_mc.onRelease = function () {					this._parent.sendSettings();				}				break;							// register			case "register" :				// hinspringen				gotoAndStop("frRegister");				// postleitzahl auf ziffern beschraenken				postcode_txt.restrict = "0123456789";				// alter auf ziffern beschraenken				age_txt.restrict = "0123456789";				// tab reihenfolge				var index:Number = 0;				email_txt.tabIndex = ++index;				nickname_txt.tabIndex = ++index;				firstname_txt.tabIndex = ++index;				lastname_txt.tabIndex = ++index;				phone_txt.tabIndex = ++index;				street_txt.tabIndex = ++index;				postcode_txt.tabIndex = ++index;				city_txt.tabIndex = ++index;				age_txt.tabIndex = ++index;				// callback beim druecken von "abbrechen"				cancel_mc.onRelease = function () {					this._parent.initForm("login");				}				// callback beim druecken von "send"				send_mc.onRelease = function () {					this._parent.sendRegister();				}							break;				}		// button aktivieren		active = true;	}		private  function clearForm():Void	{		// email		email_txt.text = "";		// password		password_txt.text = "";	}		private function checkForm(type:String ):Boolean	{		// je nach formular		switch (type) {			// login			case "login" :				// validieren, ob 1. korrekte email adresse, 2. nicht leeres passwort				var errors:Array = myFormprocessor.checkForm([3, "E-Mail", email_txt.text, 1, "Passwort", password_txt.text]);				// testen, ob fehler gefunden				if (errors.length != 0) {					// nachricht					var message:Object = {};					// headline					message.headline = "<B>Fehler im Eingabeformular!</B>";					// info					message.info = "Folgende Felder sind nicht korrekt ausgefüllt:<BR>";					// feldnamen dranhaengen					for (var i=0; i < errors.length; i++) {						// als bulletpoint						message.info += "<LI>" + errors[i] + "</LI>";					}					// und noch text					message.info += "Bitte ändern Sie Ihre Angaben entsprechend!";					// anzeigen lassen					showPopup(message, []);										// abbrechen					return false;				}				// alles in ordnung				return true;							break;							// settings			case "settings" :				// validieren, ob 1. korrekte email adresse, 2. nicht leeres passwort				var errors:Array = myFormprocessor.checkForm([1, "Passwort 1", newpwd1_txt.text, 1, "Passwort 2", newpwd2_txt.text]);				// testen, ob fehler gefunden				if (errors.length != 0) {					// nachricht					var message:Object = {};					// headline					message.headline = "<B>Fehler im Eingabeformular!</B>";					// info					message.info = "Folgende Felder sind nicht korrekt ausgefüllt:<BR>";					// feldnamen dranhaengen					for (var i=0; i < errors.length; i++) {						// als bulletpoint						message.info += "<LI>" + errors[i] + "</LI>";					}					// und noch text					message.info += "Bitte ändern Sie Ihre Angaben entsprechend!";					// anzeigen lassen					showPopup(message, []);										// abbrechen					return false;									// testen, ob beide passwoerter identisch				} else if (newpwd1_txt.text != newpwd2_txt.text) {					// nachricht					var message:Object = {};					// headline					message.headline = "<B>Fehler im Eingabeformular!</B>";					// info					message.info = "Die von Ihnen gewählten Passwörter sind nicht identisch.<BR>Bitte ändern Sie Ihre Angaben entsprechend!";					// anzeigen lassen					showPopup(message, []);										// abbrechen					return false;				}				// alles in ordnung				return true;							break;							// register			case "register" :				// validieren, ob 1. korrekte email adresse, 2. nicht leerer nickname				var errors:Array = myFormprocessor.checkForm([3, "E-Mail", email_txt.text, 1, "Nickname", nickname_txt.text]);				// testen, ob fehler gefunden				if (errors.length != 0) {					// nachricht					var message:Object = {};					// headline					message.headline = "<B>Fehler im Eingabeformular!</B>";					// info					message.info = "Folgende Felder sind nicht korrekt ausgefüllt:<BR>";					// feldnamen dranhaengen					for (var i=0; i < errors.length; i++) {						// als bulletpoint						message.info += "<LI>" + errors[i] + "</LI>";					}					// und noch text					message.info += "Bitte ändern Sie Ihre Angaben entsprechend!";					// anzeigen lassen					showPopup(message, []);										// abbrechen					return false;				}				// alles in ordnung				return true;							break;		}	}		private function showPopup(message:Object, callback:Array ):Void	{		// fenster einblenden		_global.Game.showInfopopup(this, callback, 180, 100, message.headline, message.info, false);	}		private  function sendLogin():Void	{		// eingaben testen		if (checkForm("login") == false) return;				// email und password duerfen nicht editiert werden		email_txt.selectable = password_txt.selectable = false;		email_txt.type = password_txt.type = "dynamic";		// button deaktivieren		active = false;		// eingegebenes password mit session id MD5en		var password:String = MD5.calculate(password_txt.text); //  + _global.SID		// xml head		var head:XML = myXMLConnector.getXMLHead("eplussoccer", {obj:"loginProcessor"});		// infos ueber user		var node:XMLNode = myXMLConnector.getXMLNode("user", {email:email_txt.text, password:password});		// einhaengen		head.firstChild.appendChild(node);				// debug// 		_global.Game._parent.debug_mc.zeigePopup("SID Client: " + _global.SID);// 		_global.Game._parent.debug_mc.zeigePopup("Passwort Client: " + password);				// senden und empfangen		myXMLConnector.sendXML(head, "onLoginLoaded");		// nachricht anzeigen		showMessage("Ihre Daten werden gesendet!");	}		public  function onLoginLoaded(xmlobj:XML ):Void	{		// infos ueber user		var user:XMLNode = xmlobj.firstChild.firstChild;		// in object umformen		var info:Object = myXMLConnector.parseXMLNode(user);				// debug// 		_global.Game._parent.debug_mc.zeigePopup("SID Server: " + info.sid);// 		_global.Game._parent.debug_mc.zeigePopup("Passwort Server: " + info.password);				// erfolgreich oder nicht		switch (Number(info["loginstatus"])) {			// erfolgreich			case 1:						// email				myUser.email = email_txt.text;				// email lokal speichern				myLso.data.email = myUser.email;				// speichern				myLso.flush();								// userid				myUser.userid = info["userid"];				// nickname				myUser.nickname = info["nickname"];				// loginstatus				myUser.loginstatus = info["loginstatus"];				// score				myUser.score = Number(info["score"]);				// rank				myUser.rank = Number(info["rank"]);				// timestamp				myUser.timestamp = Number(info["timestamp"]);								// beim ersten login password aenderung erforderlich				if (Number(info["numlogin"]) == 0) {					// formular einblenden					initForm("settings");				} else {					// login beenden					finishLogin(MD5.calculate(password_txt.text)); //  + _global.SID				}								break;			// nicht erfolgreich			default:								// interval loeschen				delete(myInterval);				// nachricht anzeigen				showMessage("Das Login ist fehlgeschlagen!"); // <BR>Sie müssen Cookies zulassen,<BR>um sich sicher einzuloggen!				// formular einblenden				initForm("login");		}	}		private function sendSettings():Void	{		// eingaben testen		if (checkForm("settings") == false) return;				// passwords duerfen nicht editiert werden		newpwd1_txt.selectable = newpwd2_txt.selectable = false;		newpwd1_txt.type = newpwd2_txt.type = "dynamic";		// button deaktivieren		active = false;		// eingegebenes password mit session id MD5en		var password:String = MD5.calculate(password_txt.text); //  + _global.SID		// neues password verschluesseln// 		var newpwd:String = DES.calculate(_global.SID.substr(0, 24), newpwd1_txt.text, true);		var newpwd:String = DES.calculate("eplussoccereuro2004porto", newpwd1_txt.text, true);		// xml head		var head:XML = myXMLConnector.getXMLHead("eplussoccer", {obj:"settingsProcessor"});		// infos ueber user		var node:XMLNode = myXMLConnector.getXMLNode("user", {id:myUser.userid, password:password, newpwd:newpwd});		// einhaengen		head.firstChild.appendChild(node);		// senden und empfangen		myXMLConnector.sendXML(head, "onSettingsLoaded");		// nachricht anzeigen		showMessage("Ihre Daten werden gesendet!");	}		public  function onSettingsLoaded(xmlobj:XML ):Void	{		// infos ueber user		var user:XMLNode = xmlobj.firstChild.firstChild;		// in object umformen		var info:Object = myXMLConnector.parseXMLNode(user);		// erfolgreich oder nicht		switch (Number(info["settingsstatus"])) {			// erfolgreich			case 1:							// login beenden				finishLogin(MD5.calculate(newpwd1_txt.text)); //  + _global.SID								break;			// nicht erfolgreich			default:								// nachricht				var message:Object = {};				// headline				message.headline = "<B>Das Ändern des Passworts ist fehlgeschlagen!</B>";				// info				message.info = "Es liegt offenbar ein technisches Problem vor. Bitte versuchen Sie es zu einem späteren Zeitpunkt noch einmal!";				// anzeigen lassen				showPopup(message, ["onSettingsAcknowledged"]);		}	}		public  function onSettingsAcknowledged():Void	{		// nach kurzer pause formular einblenden		myInterval = setInterval(this, "initForm", 100, "settings");	}		private  function sendRegister():Void	{		// eingaben testen		if (checkForm("register") == false) return;				// button deaktivieren		active = false;		// xml head		var head:XML = myXMLConnector.getXMLHead("eplussoccer", {obj:"registerProcessor"});		// infos ueber user		var node:XMLNode = myXMLConnector.getXMLNode("user", {email:email_txt.text, nickname : nickname_txt.text, firstname : firstname_txt.text, lastname : lastname_txt.text, phone : phone_txt.text, street : street_txt.text, postcode : postcode_txt.text, city : city_txt.text, age : age_txt.text, optin : optin_mc.optin});		trace(node);		// einhaengen		head.firstChild.appendChild(node);		// senden und empfangen		myXMLConnector.sendXML(head, "onRegisterLoaded");		// nachricht anzeigen		showMessage("Ihre Daten werden gesendet!");	}		public  function onRegisterLoaded(xmlobj:XML ):Void	{		// infos ueber user		var user:XMLNode = xmlobj.firstChild.firstChild;		// in object umformen		var info:Object = myXMLConnector.parseXMLNode(user);		// erfolgreich oder nicht		switch (Number(info["registerstatus"])) {			// erfolgreich			case 1:						// email				myUser.email = email_txt.text;				// email lokal speichern				myLso.data.email = myUser.email;				// speichern				myLso.flush();								// nachricht				var message:Object = {};				// headline				message.headline = "<B>Ihre Registrierung war erfolgreich!</B>";				// info				message.info = "Sie erhalten in Kürze Ihr Passwort per E-Mail. Nach Ihrem ersten Login müssen Sie einmalig ein neues Passwort vergeben.<BR>Klicken Sie auf \"Weiter\", um zum Login-Formular zu wechseln!";				// anzeigen lassen				showPopup(message, ["onRegisterAcknowledged"]);								break;			// nicht erfolgreich			default:								// nachricht				var message:Object = {};				// headline				message.headline = "<B>Ihre Registrierung war <I>nicht</I> erfolgreich!</B>";				// info				message.info = "Mit den von Ihnen eingegebenen Daten ist keine Registrierung möglich!<BR>Bitte beachten Sie: je E-Mail Adresse ist nur eine Registrierung erlaubt!";				// button deaktivieren				active = true;				// anzeigen lassen				showPopup(message, []);		}	}		public  function onRegisterAcknowledged():Void	{		// nach kurzer pause formular einblenden		myInterval = setInterval(this, "initForm", 100, "login");	}		private  function finishLogin(password:String ):Void	{		// password speichern		myUser.password = password;		// user an spiel uebergeben und fertig		_global.Game.loginUser(myUser);	}		private  function showMessage(msg:String ):Void	{		// anzeigen		message_txt.html = true;		message_txt.autoSize = "left";		message_txt.multiline = true;		message_txt.htmlText = msg;	}} /* end class Login */