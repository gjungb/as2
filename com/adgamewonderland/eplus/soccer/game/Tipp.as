/* Tipp** Generated from ArgoUML Model ** ActionScript 2 generator module provided by www.codealloy.com */ /*klasse:			Tippautor: 			gerd jungbluth, adgame-wonderlandemail:			gerd.jungbluth@adgame-wonderland.dekunde:			agwerstellung: 		24.04.2004zuletzt bearbeitet:	03.06.2004durch			gjstatus:			in bearbeitung*/import com.adgamewonderland.eplus.soccer.game.*;import com.adgamewonderland.agw.*;class com.adgamewonderland.eplus.soccer.game.Tipp extends MovieClip {	// Attributes		private var myUser:User;		private var myMatch:Match;		private var myXMLConnector:XMLConnector;		private var myTipp:Array;		private var myFigure:MovieClip;		private var myDepth:Object;		private var myCount:Object, myMaxCount:Object, myMessages:Object;		private var isActive:Boolean, isSelectable:Boolean;		private var myButtons:Array;		private var teamlist_mc:MovieClip, field_mc:MovieClip, matchlistitem_mc:MovieClip, back_mc:MovieClip, send_mc:MovieClip, instructions_mc:MovieClip, topteam_mc:MovieClip, print_mc:MovieClip;		private var count_txt:TextField;		// Operations		public function Tipp()	{		// global ansprechbar		_global.Tipp = this;		// user, der eingeloggt ist		myUser = _global.Game.user;		// match, fuer das der tipp abgegeben wird		myMatch = _global.Game.match;		// kurzanleitung zeigen		_global.Game.showShortInstructions(true);				// xml connector		myXMLConnector = new XMLConnector(this, _global.scriptPath);				// array, das die figures aufnimmt, die der user tippt		myTipp = [];		// figur, die aktuell bearbeitet wird		myFigure = null;		// eindeutige tiefen fuer attachte movies		myDepth = {figure : 100, max : 201};		// anzahl an getippten spielern		myCount = {goal : 0, field : 0, exchange : 0, top : 0, bad : 0};		// maximale anzahl an spielern		myMaxCount = {goal : 1, field : 11, exchange : 3, top : 3, bad : 1};		// nachrichtentexte		myMessages = {};		// zu viele spieler auf field		myMessages["field"] = {headline : "<B>Sie haben bereits " + myMaxCount["field"] + " Feldspieler aufgestellt.</B>", info : "Entfernen Sie zunächst einen Spieler vom Spielfeld, wenn Sie<B>#{player}#</B>aufstellen möchten!"};		// zu viele torhueter auf field		myMessages["goal"] = {headline : "<B>Sie haben bereits " + myMaxCount["goal"] + " Torhüter aufgestellt.</B>", info : "Entfernen Sie zunächst den Torhüter vom Spielfeld, wenn Sie<B>#{player}#</B>aufstellen möchten!"};		// zu viele spieler im einwechselbereich		myMessages["exchange"] = {headline : "<B>Sie haben bereits " + myMaxCount["exchange"] + " Einwechselspieler aufgestellt.</B>", info : "Entfernen Sie zunächst einen Spieler aus dem Einwechselbereich, wenn Sie<B>#{player}#</B>aufstellen möchten!"};		// zu viele topspieler		myMessages["top"] = {headline : "<B>Sie haben bereits " + myMaxCount["top"] + " Topspieler nominiert.</B>", info : "Klicken Sie auf die Krone neben einem der Topspieler, wenn Sie<B>#{player}#</B>nomieren möchten!"};		// zu viele boese spieler		myMessages["bad"] = {headline : "<B>Sie haben bereits " + myMaxCount["bad"] + " Spieler als Bad Boy nominiert.</B>", info : "Klicken Sie auf das Teufelchen neben dem Bad Boy, wenn Sie<B>#{player}#</B>nomieren möchten!"};		// tippen abbrechen		myMessages["cancel"] = {headline : "<B>Möchten Sie das Tippen wirklich beenden?</B>", info : "Wenn Sie beenden, wir Ihr Tipp <B>nicht gespeichert</B>!<BR>Klicken Sie auf \"Ja\", um zurück zur Übersicht der Spiele zu kommen.<BR>Klicken Sie auf \"Nein\", wenn Sie mit dem Tippen weiter machen möchten."};		// tipp absenden		myMessages["send"] = {headline : "<B>Möchten Sie Ihren Tipp nun absenden?</B>", info : "<BR>Nachdem Sie den Tipp abgeschickt haben, können Sie ihn <B>nicht mehr korrigieren</B>. Für dieses Match gegen<B>#{opponent}#</B>können Sie dann auch keinen weiteren Tipp abgeben!"};		// tippen erfolgreich		myMessages["success"] = {headline : "<B>Sie haben Ihren Tipp erfolgreich abgegeben!</B>", info : "Schauen Sie Ihren Tipp nochmal in aller Ruhe an oder drucken Sie ihn aus. Viel Spaß beim Mitfiebern mit der deutschen Elf!"};		// tippen nicht erfolgreich		myMessages["failure"] = {headline : "<B>Es ist ein Fehler aufgetreten!</B>", info : "Der Server meldet<BR><B>#{error}#</B><BR>Möchten Sie noch einmal versuchen, Ihren Tipp abzusenden? Dann klicken Sie auf \"Ja\".<BR>Mit einem Klick auf \"Nein\"kommen Sie zur Übersicht der Partien zurück!"};				// buttons initialisieren		initButtons();		// anzahl anzeigen		showCount("field");	}		private function initButtons():Void	{		// array mit buttons		myButtons = [send_mc, back_mc, instructions_mc, topteam_mc, print_mc];		// callback bei klick auf "senden"		send_mc.onRelease = function () {			// tipp senden			this._parent.sendTipp();		}		// callback bei klick auf "zurueck"		back_mc.onRelease = function () {			// tipp abbrechen			this._parent.cancelTipp();		}		// callback bei klick auf "drucken"		print_mc.onRelease = function () {			// tipp drucken			this._parent.printTipp();		}				// aktivieren		active = true;		// drucken button ausblenden		print_mc._visible = false;	}		public function set active(bool:Boolean ):Void	{		// aktivitaet umschalten		isActive = bool;		// buttons de- / aktivieren		for (var i in myButtons) {			myButtons[i].enabled = bool;		}	}		public function set selectable(bool:Boolean ):Void	{		// merken		isSelectable = bool;		// schleife ueber alle figures		for (var i in myTipp) {			// de- / aktivieren			myTipp[i].active = bool;		}	}		private function getDepth (type:String ):Number	{		// hochzaehlen und alle 100 wieder resetten		if (++ this.myDepth[type] % 100 == 0) this.myDepth[type] -= 100;		//  und zurueck geben		return (this.myDepth[type]);	}		public function selectPlayer(player:Player ):Void	{		// testen, ob es noch keine figur zu dem spieler gibt		if (player.figure == null) {			// neue figur neben der buehnde			myFigure = this.attachMovie("figure", "figure" + player.playerid + "_mc", getDepth("figure"), {_x : _root._xmouse, _y : _root._ymouse, myPlayer : player});			// in array schreiben			myTipp[player.playerid] = myFigure;					} else {			// figur des uebergebenen players			myFigure = player.figure;			// stelle, an der die figur abgelegt ist			var spot:String = field_mc.getSpot(new Point(_root._xmouse, _root._ymouse));			// torhueter zaehlen			if (spot == "field" && myFigure.player.position == "goal") myCount["goal"] --;		}		// ganz nach vorne		myFigure.swapDepths(myDepth.max);		// draggen		myFigure.startDrag(false, 30, 55, 780, 580);		// der figur sagen, dass sie gedraggt wird		myFigure.dragging = true;	}		public function dropPlayer(coords:Point ):Void	{		// bereich, auf dem die figur vor dem draggen lag		var lastspot:String = field_mc.getSpot(myFigure.coords);		// fuer letzten bereich runterzaehlen		myCount[lastspot] --;		// anzahl anzeigen		showCount(lastspot);				// draggen beenden		myFigure.stopDrag();		// der figur sagen, dass sie nicht gedraggt wird		myFigure.dragging = false;				// bereich, auf dem die figur abgelegt wurde		var spot:String = field_mc.getSpot(coords);		// ausserhalb		if (spot == "") {			// loeschen			removePlayer();			// abbrechen			return;		}		// auf field oder exchange		// abbrechen, wenn zu viele		if (myCount[spot] + 1 > myMaxCount[spot]) {			// meldung anzeigen			showMessage(getMessage(myFigure.player, spot), [null]);			// spieler loeschen			removePlayer();			// abbrechen			return;		}		// abbrechen, wenn zweiter torhueter auf feld		if (spot == "field" && myFigure.player.position == "goal" && myCount["goal"] == 1) {			// meldung anzeigen			showMessage(getMessage(myFigure.player, "goal"), [null]);			// spieler loeschen			removePlayer();			// abbrechen			return;		}		// sonderbehandlung fuer torhueter		if (myFigure.player.position == "goal") {			// shirt aendern			myFigure.changeShirt("goal" + spot);			// zaehlen, falls auf field			myCount["goal"] += (spot == "field");		} else {			// shirt aendern			myFigure.changeShirt(spot);		}		// zaehlen		myCount[spot] ++;		// anzeigen		showCount(spot);		// startplayer attribut der figur aendern		myFigure.startplayer = (spot == "field");		// koordinaten an figur uebergeben		myFigure.coords = coords;		// keine aktuelle figur		myFigure = null;	}		public function removePlayer():Void	{		// aus array loeschen		myTipp[myFigure.playerid] = null;		// loeschen		myFigure.removeMovieClip();		// keine aktuelle figur		myFigure = null;	}		public function changeCount(figure:MovieClip, type:String, diff:Number ):Boolean	{		// testen, ob maximaler wert erreicht		if (myCount[type] + diff > myMaxCount[type]) {			// meldung anzeigen			showMessage(getMessage(figure.player, type), [null]);			// nicht erlaubt			return false;		}		// zaehlen		myCount[type] += diff;		// erlaubt		return (true);	}		public function showCount(spot:String ):Void	{		// nur fuer field		if (spot != "field") return;		// anzeigen		count_txt.autoSize = "right";		count_txt.text = "Noch " + (myMaxCount[spot] - myCount[spot]);		// button de- / aktivieren		send_mc.enabled = (myMaxCount[spot] == myCount[spot]);		// button faden		send_mc._alpha = (myMaxCount[spot] == myCount[spot] ? 100 : 50);	}		private function getMessage(varinfo:Object, type:String ):Object	{		// headline		var headline:String = myMessages[type].headline;		// infotext		var info:String = myMessages[type].info;		// variablen finden		var infoarr:Array = info.split("#");		// ersetzen		for (var i in infoarr) {				// spielernamen				if (infoarr[i].indexOf("{player}") != -1) infoarr[i] = varinfo.firstname + " " + varinfo.lastname;				// gegner				if (infoarr[i].indexOf("{opponent}") != -1) infoarr[i] = varinfo.opponent;				// fehlermeldung				if (infoarr[i].indexOf("{error}") != -1) infoarr[i] = varinfo.errormessage;		}		// und wieder zusammen bauen		info = infoarr.join(" ");				// als object zurueck geben		return({headline : headline, info : info});	}		public function showMessage(message:Object, callback:Array ):Void	{		// fenster einblenden		_global.Game.showInfopopup(this, callback, 180, 145, message.headline, message.info, false);	}		public function cancelTipp():Void	{		// nachricht zusammen bauen		var message:Object = getMessage(null, "cancel");		// nachricht anzeigen		showMessage(message, ["onTippCancelled", false]);	}		public function onTippCancelled():Void	{		// zum auswahlscreen		_global.Game.jumpNavi("Main");	}		public function sendTipp():Void	{		// nachricht zusammen bauen		var message:Object = getMessage(myMatch, "send");		// testen, ob alle einwechselspieler nominiert		if (myCount["exchange"] < myMaxCount["exchange"]) message.info = "<B>Achtung!</B> Sie können noch " + (myMaxCount["exchange"] - myCount["exchange"]) + " Einwechselspieler festlegen.<BR>" + message.info;		// testen, ob alle spielentscheider nominiert		if (myCount["top"] < myMaxCount["top"]) message.info = "<B>Achtung!</B> Sie können noch " + (myMaxCount["top"] - myCount["top"]) + " Spielentscheider festlegen.<BR>" + message.info;		// testen, ob alle bad boys nominiert		if (myCount["bad"] < myMaxCount["bad"]) message.info = "<B>Achtung!</B> Sie können noch " + (myMaxCount["bad"] - myCount["bad"]) + " Bad Boy festlegen.<BR>" + message.info;		// nachricht anzeigen		showMessage(message, ["onTippApproved", false]);	}		public  function onTippApproved():Void	{		// alle buttons deaktivieren		active = false;		// xml head		var head:XML = myXMLConnector.getXMLHead("eplussoccer", {obj:"tippProcessor"});		// infos ueber user und match		var tipp:XMLNode = myXMLConnector.getXMLNode("tipp", {userid : myUser.userid, password : myUser.password, matchid : myMatch.id});		// schleife ueber alle getippten figuren		for (var i in myTipp) {			// aktuelle figur			var figure:MovieClip = myTipp[i];			// infos ueber player			var player:XMLNode = myXMLConnector.getXMLNode("player", {playerid : figure.player.playerid, top : (figure.top ? 1 : 0), bad : (figure.bad ? 1 : 0), startplayer : (figure.startplayer ? 1 : 0), x : figure.coords.x, y : figure.coords.y});			// player einhaengen			tipp.appendChild(player);		}		// tipp einhaengen		head.firstChild.appendChild(tipp);		// senden und empfangen		myXMLConnector.sendXML(head, "onTippLoaded");	}		public  function onTippLoaded(xmlobj:XML ):Void	{		// infos ueber tipp		var tipp:XMLNode = xmlobj.firstChild.firstChild;		// in object umformen		var info:Object = myXMLConnector.parseXMLNode(tipp);		// erfolg / misserfolg		switch (info.tippstatus) {			// erfolg			case "0" :				// nachricht zusammen bauen				var message:Object = getMessage(info, "success");								// bonuspunkte ausrechnen				// tippstart				var firsttipp:Number = myMatch.firsttipp.getTime() / 1000;				// tippende				var lasttipp:Number = myMatch.lasttipp.getTime() / 1000;				// tippzeitpunkt				var tippdate:Number = info.timestamp;				// zeit zwischen tippende und tippabgabe				var t1:Number = lasttipp - tippdate;				// zeit zwischen tippende und tippstart				var t2:Number = lasttipp - firsttipp;				// je eher, desto mehr, maximal 5 punkte				var bonus:Number = Math.round(5 * t1 / t2);				// an nachricht anhanegen				message.info = "Ihr Zeitbonus für frühes Tippen: <B>" + bonus + "</B> Punkte<BR><BR>" + message.info;								// nachricht anzeigen				showMessage(message, ["onTippFinished"]);				// tippen fuer dieses match verbieten				myMatch.allowed = false;							break;			// misserfolg			default :				// nachricht zusammen bauen				var message:Object = getMessage(info, "failure");				// nachricht anzeigen				showMessage(message, ["onTippApproved", "onTippCancelled"]);		}	}		public  function onTippFinished():Void	{		// alle buttons aktivieren		active = true;		// fertig button ausblenden		send_mc._visible = false;		// count ausblenden		count_txt._visible = false;		// anleitung button ausblenden		instructions_mc._visible = false;		// topteam button ausblenden// 		topteam_mc._visible = false;		// teamlist deaktivieren		teamlist_mc.selectable = false;		// figures deaktivieren		selectable = false;		// callback bei klick auf "zurueck"		back_mc.onRelease = function () {			// tipp beenden (ohne nachfrage)			this._parent.onTippCancelled();		}		// drucken button einblenden		print_mc._visible = true;	}		public function printTipp():Void	{		// drucken		print (this, "bmovie");	}} /* end class Tipp */