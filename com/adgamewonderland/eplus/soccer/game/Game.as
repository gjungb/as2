/* Game** Generated from ArgoUML Model ** ActionScript 2 generator module provided by www.codealloy.com */ /*klasse:			Gameautor: 			gerd jungbluth, adgame-wonderlandemail:			gerd.jungbluth@adgame-wonderland.dekunde:			agwerstellung: 		21.04.2004zuletzt bearbeitet:	30.05.2004durch			gjstatus:			in bearbeitung*/import com.adgamewonderland.eplus.soccer.game.*;import com.adgamewonderland.eplus.soccer.microsite.*;import com.adgamewonderland.agw.*;class com.adgamewonderland.eplus.soccer.game.Game extends MovieClip {	// Attributes		private var myUser:User;		private var myTeam:Team;		private var myMatch:Match;		private var myMatches:Array;		private var myMode:String;		private var isActive:Boolean;		private var login_mc:Login, clock_mc:Clock, topnavi_mc:Topnavi, matchlist_mc:Matchlist, popup_mc:MovieClip, hitarea_mc:MovieClip, instructions_mc:MovieClip, shortinstructions_mc:MovieClip, highscore_mc:MovieClip, logout_mc:MovieClip, topteam_mc:MovieClip;		// Operations		public  function Game()	{		// global ansprechbar		_global.Game = this;		// pfad zum xml connector script		if (_url.indexOf("194") != -1) {			_global.scriptPath = "game/eplussoccer_xmlconnector.php";		} else {			_global.scriptPath = "http://192.168.0.2/web/eplus/fussball_em/beta/game/eplussoccer_xmlconnector.php";		}		// eingeloggter user		user = null;		// nationalteam		team = null;		// aktuelles match, fuer das der user tippen moechte		match = null;		// array mit matches		myMatches = [];		// modus fuer tipp ("w" write => tipp abgeben, "r" read => tipp ansehen)		mode = "";		// menue ausblenden		Stage.showMenu = false;		// callback beim druecken von "logout"		logout_mc.onRelease = function () {			this._parent.logoutUser();		}	}		public  function jumpNavi(target:String ):Void	{		// frame name		var frame:String = "fr" + target;		// hinspringen		gotoAndPlay(frame);	}		public function getTime()	{		// aktuelle zeit zurueck geben		return(clock_mc.time);	}		public  function loginUser(obj:User ):Void	{		// user speichern		user = obj;		// karten deaktivieren		Playground.setBoxesActive("card", false);		// weiter gehts		jumpNavi("Blitzer");	}		public function logoutUser():Void	{		// headline		var headline:String = "<B>Möchten Sie sich wirklich abmelden?</B>";		// infotext		var info:String = "";		// anzeigen lassen		showInfopopup(this, ["onLogoutAcknowledged", false], 180, 145, headline, info, false);	}		public function onLogoutAcknowledged():Void	{		// user loeschen		user = null;		// zum login springen		jumpNavi("Login");		// karten aktivieren		Playground.setBoxesActive("card", true);	}		public function set user(obj:User ):Void	{		myUser = obj;	}		public function get user():User	{		return (myUser);	}		public function set team(obj:Team ):Void	{		myTeam = obj;	}		public function get team():Team	{		return (myTeam);	}		public function set match(obj:Match ):Void	{		myMatch = obj;	}		public function onTeamlistLoaded(obj:Team ):Void	{		// team speichern		team = obj;	}		public function get match():Match	{		return (myMatch);	}		public function selectMatch(obj:Match, tipp:Boolean ):Void	{		// match speichern		match = obj;		// modus auf schreiben		mode = "w";		// weiter gehts		jumpNavi("Tipp");	}		public function set mode(str:String ):Void	{		myMode = str;	}		public function get mode():String	{		return (myMode);	}		public function set matches(arr:Array ):Void	{		myMatches = arr;	}		public function get matches():Array	{		return (myMatches);	}		public function onMatchlistLoaded(arr:Array ):Void	{		// matches speichern		matches = arr;		// matchid des matches, fuer das der user zuletzt einen tipp abgegeben hat		var matchid:Number = getLastTippMatchid();		// falls ein match (und damit auch ein tipp) vorhanden		if (matchid != null) {			// button in topnavi aktivieren			topnavi_mc.setTippsActive(true);		}	}		private function getLastTippMatchid():Number	{		// gesuchtes match		var lastmatch:Match = null;		// schleife ueber alle matches		for (var i in matches) {			// aktuelles match			var match = matches[i];			// naechstes match, falls tippen noch erlaubt (sprich noch kein tipp abgegeben)			if (match.allowed == true) continue;			// match auswaehlen, wenn timestamp des matches groesser als die des bisherigen matches (sprich aktuelleres match)			if (match.date > lastmatch.date) lastmatch = match;		}		// wenn match gefunden, id zurueck geben		return(typeof lastmatch.id != "undefined" ? lastmatch.id : null);	}		private function getLastMatchMatchid():Number	{		// gesuchtes match (zuletzt ausgewertetes match)		var lastmatch:Match = null;		// schleife ueber alle matches		for (var i in matches) {			// aktuelles match			var match = matches[i];			// naechstes match, falls noch kein ergebnis			if (match.result == "") continue;			// match auswaehlen, wenn timestamp des matches groesser als die des bisherigen matches (sprich aktuelleres match)			if (match.date > lastmatch.date) lastmatch = match;		}		// wenn match gefunden, id zurueck geben		return(typeof lastmatch.id != "undefined" ? lastmatch.id : 0);	}		public function showTippresult():Void	{		// match speichern		match = matches[getLastTippMatchid()];		// modus auf lesen		mode = "r";		// weiter gehts		jumpNavi("Tippresult");	}		public function showInfopopup(caller:Object, callback:Array, x:Number, y:Number, headline:String, info:String, activity:Boolean ):Void	{		// anzahl der buttons, die im popup angezeigt werden sollen entspricht anzahl der moeglichen callbacks		var numbut:Number = callback.length;		// neues popup		var popup:MovieClip = this.attachMovie("infopopup", "popup_mc", 2, {_x : x, _y : y, _myHeadline : headline, _myInfo : info, _myNumButtons : numbut, _myCaller : caller, _myCallback : callback});		// aktivitaet aendern (sprich button hinter popup legen)		active = activity;	}		public function hideInfopopup():Void	{		// loeschen		popup_mc.removeMovieClip();		// aktivitaet aendern (sprich button hinter popup entfernen)		if (!active) active = true;	}		public function showInstructions(bool:Boolean ):Void	{		// aktivitaet umschalten		active = !bool;		// nach vorne		instructions_mc.swapDepths(hitarea_mc);		// ein- / ausblenden		switch (bool) {			// einblenden			case true :				// abspielen				instructions_mc.gotoAndPlay("frTipp");							break;			// ausblenden			case false :				// abspielen				instructions_mc.gotoAndPlay("frClose");							break;		}	}		public function showShortInstructions(bool:Boolean ):Void	{		// aktivitaet umschalten		active = !bool;		// nach vorne		shortinstructions_mc.swapDepths(hitarea_mc);		// ein- / ausblenden		switch (bool) {			// einblenden			case true :				// abspielen				shortinstructions_mc.gotoAndStop("frInstructions");							break;			// ausblenden			case false :				// abspielen				shortinstructions_mc.gotoAndPlay("frClose");							break;		}	}		public function showHighscore(bool:Boolean, showmatch:Boolean ):Void	{		// aktivitaet umschalten		active = !bool;		// nach vorne		highscore_mc.swapDepths(hitarea_mc);		// ein- / ausblenden		switch (bool) {			// einblenden			case true :				// wenn highscore fuer letztes spiel gewuenscht				if (showmatch) {					// matchid uebergeben					highscore_mc.matchid = getLastMatchMatchid();				} else {					// 0 fuer gesamt highscore					highscore_mc.matchid = 0;				}				// abspielen				highscore_mc.gotoAndPlay("frHighscore");							break;			// ausblenden			case false :				// abspielen				highscore_mc.gotoAndPlay("frClose");							break;		}	}		public function showTopteam(bool:Boolean ):Void	{		// aktivitaet umschalten		active = !bool;		// nach vorne		topteam_mc.swapDepths(hitarea_mc);		// ein- / ausblenden		switch (bool) {			// einblenden			case true :				// abspielen				topteam_mc.gotoAndPlay("frTopteam");							break;			// ausblenden			case false :				// abspielen				topteam_mc.gotoAndPlay("frClose");							break;		}	}		// de- / aktivieren	public function set active(bool:Boolean ):Void	{		// aktivitaet umschalten		isActive = bool;		// button auf ganzes spielfeld legen, damit alle dahinter liegenden buttons inaktiv sind		switch (bool) {			// neuer button			case false:				// button bauen				hitarea_mc = this.createEmptyMovieClip("hitarea_mc", 1);				// an linke obere ecke				hitarea_mc._x = 0;				hitarea_mc._y = 0;				// hitarea bauen				hitarea_mc.beginFill(0xCCCCCC, 50);				hitarea_mc.lineTo(Stage.width, 0);				hitarea_mc.lineTo(Stage.width, Stage.height);				hitarea_mc.lineTo(0, Stage.height);				hitarea_mc.lineTo(0, 0);				hitarea_mc.endFill();				// callback als dummy button				hitarea_mc.onRollOver = function () {				}				// keine hand anzeigen				hitarea_mc.useHandCursor = false;								break;			// button loeschen			case true :				// nach vorne				hitarea_mc.swapDepths(1);				// loeschen				hitarea_mc.removeMovieClip();								break;		}	}		// aktivitatet	public function get active():Boolean	{		// aktivitaet		return (isActive);	}		} /* end class Game */