/* Matchlistitem** Generated from ArgoUML Model ** ActionScript 2 generator module provided by www.codealloy.com */ /*klasse:			Matchlistitemautor: 			gerd jungbluth, adgame-wonderlandemail:			gerd.jungbluth@adgame-wonderland.dekunde:			agwerstellung: 		23.05.2004zuletzt bearbeitet:	03.06.2004durch			gjstatus:			in bearbeitung*/import com.adgamewonderland.eplus.soccer.game.*;class com.adgamewonderland.eplus.soccer.game.Matchlistitem extends MovieClip {	// Attributes		private var _autoInit:Boolean;		private var myMatch:Match;		private var isActive:Boolean, myInterval:Number;		private var flag1_mc:MovieClip, flag2_mc:MovieClip, tipp_mc:MovieClip;		private var opponent1_txt:TextField, opponent2_txt:TextField, goals1_txt:TextField, goals2_txt:TextField, day_txt:TextField, date_txt:TextField, time_txt:TextField, city_txt:TextField, info_txt:TextField;		// Operations		public  function Matchlistitem()	{		// match, das angezeigt wird		myMatch = null;		// erst mal ausblenden		_visible = false;		// ggf. direkt initialisieren		if (_autoInit) showMatch(_global.Game.match, false);	}		public function showMatch(match:Match, complete:Boolean ):Void	{		// match merken		myMatch = match;		// einblenden		_visible = true;		// callback bei klick auf "tipp"		tipp_mc.onRelease = function () {			// match zum tippen uebergeben			_global.Game.selectMatch(this._parent.myMatch);		}		// linke mannschaft		opponent1_txt.autoSize = "center";		opponent1_txt.text = "Deutschland";		// linke flagge		flag1_mc.gotoAndStop("fr" + opponent1_txt.text);		// rechte mannschaft		opponent2_txt.autoSize = "center";		opponent2_txt.text = myMatch.opponent;		// rechte flagge		flag2_mc.gotoAndStop("fr" + opponent2_txt.text);				// vollstaendig		if (complete) {			// infos ueber spiel			var infos:Object = myMatch.getMatchinfos();			// anzeigen			for (var i in infos) {				// aktuelle info				var info:String = infos[i];				// ausrichten				this[i + "_txt"].autoSize = "left";				// anzeigen				this[i + "_txt"].text = info;			}			// button anzeigen			showButton();			// regelmaessig updaten			setInterval(this, "showButton", 1000);					// nur als ueberschrift		} else {			// button loeschen			tipp_mc.unloadMovie();			// zeitanzeige loeschen// 			unloadMovie();		}	}		private function showButton():Void	{		// aktuelle zeit		var time:Number = _global.Game.getTime();		// zeit bis zum tippanfang		var timetofirst:Number = myMatch.firsttipp.getTime() - time;		// zeit bis zum anpfiff		var timetomatch:Number = myMatch.date.getTime() - time;		// stunden bis zum anpfiff		var hourstomatch:Number = timetomatch / 1000 / 3600;		// zeit bis zum tippende		var timetolast:Number = myMatch.lasttipp.getTime() - time;		// stunden bis zum tippende		var hourstolast:Number = timetolast / 1000 / 3600;		// infos ueber spiel (in formatierter form)		var infos:Object = myMatch.getMatchinfos();		// zeitanzeige		info_txt.html = true;		info_txt.autoSize = "center";				// zeit bis zum tippanfang >0 (sprich tippanfang in zukunft)		if (timetofirst > 0) {			// deaktivieren			active = false;			// anzeigen			info_txt.htmlText = "<P ALIGN=\"CENTER\"><FONT SIZE=\"15\">Tippen Sie ab</FONT><BR><FONT SIZE=\"18\">" + infos.firsttippdate + " " + infos.firsttipptime + "</FONT></P>";		// zeit bis zum tippende <0 (sprich tippende in vergangenheit)		} else if (timetolast <= 0) {			// deaktivieren			active = false;			// zeit bis anpfiff umrechnen in stunden und minuten			var formattedtime:Object = getFormattedTime(timetomatch);			// zeit bis zum match >0 (sprich match in zukunft)			if (timetomatch > 0) {				// anzeigen				info_txt.htmlText = "<P ALIGN=\"CENTER\"><FONT SIZE=\"15\">Tippen beendet<BR>Anpfiff in</FONT><BR><FONT SIZE=\"16\">" + formattedtime.hours + " Std " + formattedtime.minutes + " Min</FONT></P>";			// zeit bis zum match << (sprich match laeuft, ist aber noch aktiv)			} else {				// anzeigen				info_txt.htmlText = "<P ALIGN=\"CENTER\"><FONT SIZE=\"15\">Match läuft<BR>Auswertung in Kürze</FONT></P>";			}		// eingeloggter user darf fuer dieses match nicht tippen		} else if (myMatch.allowed == false) {			// deaktivieren			active = false;			// zeit bis anpfiff umrechnen in stunden und minuten			var formattedtime:Object = getFormattedTime(timetomatch);			// anzeigen			info_txt.htmlText = "<P ALIGN=\"CENTER\"><FONT SIZE=\"15\">Tipp bereits abgegeben<BR>Anpfiff in</FONT><BR><FONT SIZE=\"16\">" + formattedtime.hours + " Std " + formattedtime.minutes + " Min</FONT></P>";					// zwischen tippanfang und tippende		} else {			// aktivieren			active = true;			// zeit bis tippende umrechnen in stunden und minuten			var formattedtime:Object = getFormattedTime(timetolast);			// bonuspunkte ausrechnen			// tippstart			var firsttipp:Number = myMatch.firsttipp.getTime() / 1000;			// tippende			var lasttipp:Number = myMatch.lasttipp.getTime() / 1000;			// tippzeitpunkt (aktuelle zeit)			var tippdate:Number = time / 1000;			// zeit zwischen tippende und tippabgabe			var t1:Number = lasttipp - tippdate;			// zeit zwischen tippende und tippstart			var t2:Number = lasttipp - firsttipp;			// je eher, desto mehr, maximal 5 punkte			var bonus:Number = Math.round(5 * t1 / t2);						// anzeigen			info_txt.htmlText = "<P ALIGN=\"CENTER\"><FONT SIZE=\"13\">Noch<BR>" + formattedtime.hours + " Std " + formattedtime.minutes + " Min</FONT><BR><FONT SIZE=\"11\">Zeitbonus: " + bonus + " Punkte</FONT></P>";		}	}		private function getFormattedTime(seconds:Number ):Object	{		// millisekunden in stunden		var hours:Number = seconds / 1000 / 3600;		// dezimale minuten in minuten		var minutes:Number = Math.ceil((hours - Math.floor(hours)) * 60);		// bei 60 minuten korrigieren		if (minutes == 60) {			// minuten auf 0			minutes = 0;			// stunden eine mehr			hours += 1;		}		// als object zurueck geben		return ({hours : Math.floor(hours), minutes : minutes});	}		public function showResult(result:String ):Void	{		// result kommt als string mit :		var resarr:Array = result.split(":");		// tore fuer team 1		goals1_txt.autoSize = "center";		goals1_txt.text = resarr[0];		// tore fuer team 2		goals2_txt.autoSize = "center";		goals2_txt.text = resarr[1];	}		public function set active(bool:Boolean ):Void	{		// aktivitate merken		isActive = bool;		// button ein- / ausblenden		tipp_mc._visible = bool;		// zeitanzeige ein- / ausblenden// 		_visible = bool;		// alpha umschalten		this._alpha = (bool ? 100 : 75);	}} /* end class Matchlistitem */